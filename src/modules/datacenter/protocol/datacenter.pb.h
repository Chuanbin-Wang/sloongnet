// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datacenter.proto

#ifndef PROTOBUF_INCLUDED_datacenter_2eproto
#define PROTOBUF_INCLUDED_datacenter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_datacenter_2eproto 

namespace protobuf_datacenter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_datacenter_2eproto
namespace DataCenter {
class RunSQLRequest;
class RunSQLRequestDefaultTypeInternal;
extern RunSQLRequestDefaultTypeInternal _RunSQLRequest_default_instance_;
class RunSQLResponse;
class RunSQLResponseDefaultTypeInternal;
extern RunSQLResponseDefaultTypeInternal _RunSQLResponse_default_instance_;
}  // namespace DataCenter
namespace google {
namespace protobuf {
template<> ::DataCenter::RunSQLRequest* Arena::CreateMaybeMessage<::DataCenter::RunSQLRequest>(Arena*);
template<> ::DataCenter::RunSQLResponse* Arena::CreateMaybeMessage<::DataCenter::RunSQLResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DataCenter {

enum Functions {
  Invalid = 0,
  RunSQL = 201,
  Functions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Functions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Functions_IsValid(int value);
const Functions Functions_MIN = Invalid;
const Functions Functions_MAX = RunSQL;
const int Functions_ARRAYSIZE = Functions_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functions_descriptor();
inline const ::std::string& Functions_Name(Functions value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functions_descriptor(), value);
}
inline bool Functions_Parse(
    const ::std::string& name, Functions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functions>(
    Functions_descriptor(), name, value);
}
// ===================================================================

class RunSQLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataCenter.RunSQLRequest) */ {
 public:
  RunSQLRequest();
  virtual ~RunSQLRequest();

  RunSQLRequest(const RunSQLRequest& from);

  inline RunSQLRequest& operator=(const RunSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunSQLRequest(RunSQLRequest&& from) noexcept
    : RunSQLRequest() {
    *this = ::std::move(from);
  }

  inline RunSQLRequest& operator=(RunSQLRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunSQLRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunSQLRequest* internal_default_instance() {
    return reinterpret_cast<const RunSQLRequest*>(
               &_RunSQLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RunSQLRequest* other);
  friend void swap(RunSQLRequest& a, RunSQLRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunSQLRequest* New() const final {
    return CreateMaybeMessage<RunSQLRequest>(NULL);
  }

  RunSQLRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunSQLRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunSQLRequest& from);
  void MergeFrom(const RunSQLRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunSQLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SQLCMD = 1;
  void clear_sqlcmd();
  static const int kSQLCMDFieldNumber = 1;
  const ::std::string& sqlcmd() const;
  void set_sqlcmd(const ::std::string& value);
  #if LANG_CXX11
  void set_sqlcmd(::std::string&& value);
  #endif
  void set_sqlcmd(const char* value);
  void set_sqlcmd(const char* value, size_t size);
  ::std::string* mutable_sqlcmd();
  ::std::string* release_sqlcmd();
  void set_allocated_sqlcmd(::std::string* sqlcmd);

  // @@protoc_insertion_point(class_scope:DataCenter.RunSQLRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sqlcmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datacenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunSQLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataCenter.RunSQLResponse) */ {
 public:
  RunSQLResponse();
  virtual ~RunSQLResponse();

  RunSQLResponse(const RunSQLResponse& from);

  inline RunSQLResponse& operator=(const RunSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunSQLResponse(RunSQLResponse&& from) noexcept
    : RunSQLResponse() {
    *this = ::std::move(from);
  }

  inline RunSQLResponse& operator=(RunSQLResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunSQLResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunSQLResponse* internal_default_instance() {
    return reinterpret_cast<const RunSQLResponse*>(
               &_RunSQLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RunSQLResponse* other);
  friend void swap(RunSQLResponse& a, RunSQLResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunSQLResponse* New() const final {
    return CreateMaybeMessage<RunSQLResponse>(NULL);
  }

  RunSQLResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunSQLResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunSQLResponse& from);
  void MergeFrom(const RunSQLResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunSQLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::std::string& results(int index) const;
  ::std::string* mutable_results(int index);
  void set_results(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_results(int index, ::std::string&& value);
  #endif
  void set_results(int index, const char* value);
  void set_results(int index, const char* value, size_t size);
  ::std::string* add_results();
  void add_results(const ::std::string& value);
  #if LANG_CXX11
  void add_results(::std::string&& value);
  #endif
  void add_results(const char* value);
  void add_results(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& results() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_results();

  // int32 AffectedRows = 1;
  void clear_affectedrows();
  static const int kAffectedRowsFieldNumber = 1;
  ::google::protobuf::int32 affectedrows() const;
  void set_affectedrows(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataCenter.RunSQLResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> results_;
  ::google::protobuf::int32 affectedrows_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datacenter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunSQLRequest

// string SQLCMD = 1;
inline void RunSQLRequest::clear_sqlcmd() {
  sqlcmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RunSQLRequest::sqlcmd() const {
  // @@protoc_insertion_point(field_get:DataCenter.RunSQLRequest.SQLCMD)
  return sqlcmd_.GetNoArena();
}
inline void RunSQLRequest::set_sqlcmd(const ::std::string& value) {
  
  sqlcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataCenter.RunSQLRequest.SQLCMD)
}
#if LANG_CXX11
inline void RunSQLRequest::set_sqlcmd(::std::string&& value) {
  
  sqlcmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataCenter.RunSQLRequest.SQLCMD)
}
#endif
inline void RunSQLRequest::set_sqlcmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqlcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataCenter.RunSQLRequest.SQLCMD)
}
inline void RunSQLRequest::set_sqlcmd(const char* value, size_t size) {
  
  sqlcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataCenter.RunSQLRequest.SQLCMD)
}
inline ::std::string* RunSQLRequest::mutable_sqlcmd() {
  
  // @@protoc_insertion_point(field_mutable:DataCenter.RunSQLRequest.SQLCMD)
  return sqlcmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunSQLRequest::release_sqlcmd() {
  // @@protoc_insertion_point(field_release:DataCenter.RunSQLRequest.SQLCMD)
  
  return sqlcmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunSQLRequest::set_allocated_sqlcmd(::std::string* sqlcmd) {
  if (sqlcmd != NULL) {
    
  } else {
    
  }
  sqlcmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqlcmd);
  // @@protoc_insertion_point(field_set_allocated:DataCenter.RunSQLRequest.SQLCMD)
}

// -------------------------------------------------------------------

// RunSQLResponse

// int32 AffectedRows = 1;
inline void RunSQLResponse::clear_affectedrows() {
  affectedrows_ = 0;
}
inline ::google::protobuf::int32 RunSQLResponse::affectedrows() const {
  // @@protoc_insertion_point(field_get:DataCenter.RunSQLResponse.AffectedRows)
  return affectedrows_;
}
inline void RunSQLResponse::set_affectedrows(::google::protobuf::int32 value) {
  
  affectedrows_ = value;
  // @@protoc_insertion_point(field_set:DataCenter.RunSQLResponse.AffectedRows)
}

// repeated string Results = 2;
inline int RunSQLResponse::results_size() const {
  return results_.size();
}
inline void RunSQLResponse::clear_results() {
  results_.Clear();
}
inline const ::std::string& RunSQLResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:DataCenter.RunSQLResponse.Results)
  return results_.Get(index);
}
inline ::std::string* RunSQLResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:DataCenter.RunSQLResponse.Results)
  return results_.Mutable(index);
}
inline void RunSQLResponse::set_results(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DataCenter.RunSQLResponse.Results)
  results_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RunSQLResponse::set_results(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:DataCenter.RunSQLResponse.Results)
  results_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RunSQLResponse::set_results(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  results_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DataCenter.RunSQLResponse.Results)
}
inline void RunSQLResponse::set_results(int index, const char* value, size_t size) {
  results_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataCenter.RunSQLResponse.Results)
}
inline ::std::string* RunSQLResponse::add_results() {
  // @@protoc_insertion_point(field_add_mutable:DataCenter.RunSQLResponse.Results)
  return results_.Add();
}
inline void RunSQLResponse::add_results(const ::std::string& value) {
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DataCenter.RunSQLResponse.Results)
}
#if LANG_CXX11
inline void RunSQLResponse::add_results(::std::string&& value) {
  results_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DataCenter.RunSQLResponse.Results)
}
#endif
inline void RunSQLResponse::add_results(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DataCenter.RunSQLResponse.Results)
}
inline void RunSQLResponse::add_results(const char* value, size_t size) {
  results_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DataCenter.RunSQLResponse.Results)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunSQLResponse::results() const {
  // @@protoc_insertion_point(field_list:DataCenter.RunSQLResponse.Results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RunSQLResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:DataCenter.RunSQLResponse.Results)
  return &results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataCenter

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DataCenter::Functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataCenter::Functions>() {
  return ::DataCenter::Functions_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_datacenter_2eproto
