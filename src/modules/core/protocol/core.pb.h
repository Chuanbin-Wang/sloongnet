// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef PROTOBUF_INCLUDED_core_2eproto
#define PROTOBUF_INCLUDED_core_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto 

namespace protobuf_core_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_core_2eproto
namespace Core {
class GLOBAL_CONFIG;
class GLOBAL_CONFIGDefaultTypeInternal;
extern GLOBAL_CONFIGDefaultTypeInternal _GLOBAL_CONFIG_default_instance_;
class RuntimeDataPackage;
class RuntimeDataPackageDefaultTypeInternal;
extern RuntimeDataPackageDefaultTypeInternal _RuntimeDataPackage_default_instance_;
}  // namespace Core
namespace google {
namespace protobuf {
template<> ::Core::GLOBAL_CONFIG* Arena::CreateMaybeMessage<::Core::GLOBAL_CONFIG>(Arena*);
template<> ::Core::RuntimeDataPackage* Arena::CreateMaybeMessage<::Core::RuntimeDataPackage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Core {

enum GLOBAL_CONFIG_MODULE_TYPE {
  GLOBAL_CONFIG_MODULE_TYPE_Manager = 0,
  GLOBAL_CONFIG_MODULE_TYPE_AuthCenter = 1,
  GLOBAL_CONFIG_MODULE_TYPE_DataCenter = 2,
  GLOBAL_CONFIG_MODULE_TYPE_FileCenter = 3,
  GLOBAL_CONFIG_MODULE_TYPE_Firewall = 4,
  GLOBAL_CONFIG_MODULE_TYPE_Gateway = 5,
  GLOBAL_CONFIG_MODULE_TYPE_Processer = 6,
  GLOBAL_CONFIG_MODULE_TYPE_GLOBAL_CONFIG_MODULE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GLOBAL_CONFIG_MODULE_TYPE_GLOBAL_CONFIG_MODULE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GLOBAL_CONFIG_MODULE_TYPE_IsValid(int value);
const GLOBAL_CONFIG_MODULE_TYPE GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_MIN = GLOBAL_CONFIG_MODULE_TYPE_Manager;
const GLOBAL_CONFIG_MODULE_TYPE GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_MAX = GLOBAL_CONFIG_MODULE_TYPE_Processer;
const int GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_ARRAYSIZE = GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GLOBAL_CONFIG_MODULE_TYPE_descriptor();
inline const ::std::string& GLOBAL_CONFIG_MODULE_TYPE_Name(GLOBAL_CONFIG_MODULE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GLOBAL_CONFIG_MODULE_TYPE_descriptor(), value);
}
inline bool GLOBAL_CONFIG_MODULE_TYPE_Parse(
    const ::std::string& name, GLOBAL_CONFIG_MODULE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GLOBAL_CONFIG_MODULE_TYPE>(
    GLOBAL_CONFIG_MODULE_TYPE_descriptor(), name, value);
}
enum LogLevel {
  All = 0,
  Verbos = 1,
  Debug = 2,
  Info = 3,
  Warn = 4,
  Err = 5,
  Assert = 6,
  Fatal = 7,
  LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogLevel_IsValid(int value);
const LogLevel LogLevel_MIN = All;
const LogLevel LogLevel_MAX = Fatal;
const int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor();
inline const ::std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogLevel_descriptor(), value);
}
inline bool LogLevel_Parse(
    const ::std::string& name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
enum DATA_ITEM {
  ServerConfiguation = 0,
  ModuleConfiguation = 1,
  Logger = 2,
  RuntimeData = 3,
  ReferenceTemplateInfo = 4,
  DATA_ITEM_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DATA_ITEM_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DATA_ITEM_IsValid(int value);
const DATA_ITEM DATA_ITEM_MIN = ServerConfiguation;
const DATA_ITEM DATA_ITEM_MAX = ReferenceTemplateInfo;
const int DATA_ITEM_ARRAYSIZE = DATA_ITEM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATA_ITEM_descriptor();
inline const ::std::string& DATA_ITEM_Name(DATA_ITEM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATA_ITEM_descriptor(), value);
}
inline bool DATA_ITEM_Parse(
    const ::std::string& name, DATA_ITEM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATA_ITEM>(
    DATA_ITEM_descriptor(), name, value);
}
enum EVENT_TYPE {
  ProgramStart = 0,
  ProgramStop = 1,
  ProgramRestart = 2,
  SocketClose = 3,
  SendPackage = 4,
  MonitorSendStatus = 5,
  EnableTimeoutCheck = 6,
  EnableClientCheck = 7,
  ReloadLuaContext = 8,
  RegisteConnection = 9,
  EVENT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EVENT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EVENT_TYPE_IsValid(int value);
const EVENT_TYPE EVENT_TYPE_MIN = ProgramStart;
const EVENT_TYPE EVENT_TYPE_MAX = RegisteConnection;
const int EVENT_TYPE_ARRAYSIZE = EVENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVENT_TYPE_descriptor();
inline const ::std::string& EVENT_TYPE_Name(EVENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVENT_TYPE_descriptor(), value);
}
inline bool EVENT_TYPE_Parse(
    const ::std::string& name, EVENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVENT_TYPE>(
    EVENT_TYPE_descriptor(), name, value);
}
enum PRIORITY_LEVEL {
  HEIGHT_LEVEL = 0,
  NORMAL_LEVEL = 1,
  LOW_LEVEL = 2,
  PRIORITY_LEVEL_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PRIORITY_LEVEL_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PRIORITY_LEVEL_IsValid(int value);
const PRIORITY_LEVEL PRIORITY_LEVEL_MIN = HEIGHT_LEVEL;
const PRIORITY_LEVEL PRIORITY_LEVEL_MAX = LOW_LEVEL;
const int PRIORITY_LEVEL_ARRAYSIZE = PRIORITY_LEVEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* PRIORITY_LEVEL_descriptor();
inline const ::std::string& PRIORITY_LEVEL_Name(PRIORITY_LEVEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    PRIORITY_LEVEL_descriptor(), value);
}
inline bool PRIORITY_LEVEL_Parse(
    const ::std::string& name, PRIORITY_LEVEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PRIORITY_LEVEL>(
    PRIORITY_LEVEL_descriptor(), name, value);
}
enum ControlEvent {
  InvalidEvent = 0,
  Restart = 1,
  Stop = 2,
  ControlEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlEvent_IsValid(int value);
const ControlEvent ControlEvent_MIN = InvalidEvent;
const ControlEvent ControlEvent_MAX = Stop;
const int ControlEvent_ARRAYSIZE = ControlEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlEvent_descriptor();
inline const ::std::string& ControlEvent_Name(ControlEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlEvent_descriptor(), value);
}
inline bool ControlEvent_Parse(
    const ::std::string& name, ControlEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlEvent>(
    ControlEvent_descriptor(), name, value);
}
// ===================================================================

class GLOBAL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Core.GLOBAL_CONFIG) */ {
 public:
  GLOBAL_CONFIG();
  virtual ~GLOBAL_CONFIG();

  GLOBAL_CONFIG(const GLOBAL_CONFIG& from);

  inline GLOBAL_CONFIG& operator=(const GLOBAL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GLOBAL_CONFIG(GLOBAL_CONFIG&& from) noexcept
    : GLOBAL_CONFIG() {
    *this = ::std::move(from);
  }

  inline GLOBAL_CONFIG& operator=(GLOBAL_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLOBAL_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GLOBAL_CONFIG* internal_default_instance() {
    return reinterpret_cast<const GLOBAL_CONFIG*>(
               &_GLOBAL_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GLOBAL_CONFIG* other);
  friend void swap(GLOBAL_CONFIG& a, GLOBAL_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GLOBAL_CONFIG* New() const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(NULL);
  }

  GLOBAL_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GLOBAL_CONFIG& from);
  void MergeFrom(const GLOBAL_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GLOBAL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GLOBAL_CONFIG_MODULE_TYPE MODULE_TYPE;
  static const MODULE_TYPE Manager =
    GLOBAL_CONFIG_MODULE_TYPE_Manager;
  static const MODULE_TYPE AuthCenter =
    GLOBAL_CONFIG_MODULE_TYPE_AuthCenter;
  static const MODULE_TYPE DataCenter =
    GLOBAL_CONFIG_MODULE_TYPE_DataCenter;
  static const MODULE_TYPE FileCenter =
    GLOBAL_CONFIG_MODULE_TYPE_FileCenter;
  static const MODULE_TYPE Firewall =
    GLOBAL_CONFIG_MODULE_TYPE_Firewall;
  static const MODULE_TYPE Gateway =
    GLOBAL_CONFIG_MODULE_TYPE_Gateway;
  static const MODULE_TYPE Processer =
    GLOBAL_CONFIG_MODULE_TYPE_Processer;
  static inline bool MODULE_TYPE_IsValid(int value) {
    return GLOBAL_CONFIG_MODULE_TYPE_IsValid(value);
  }
  static const MODULE_TYPE MODULE_TYPE_MIN =
    GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_MIN;
  static const MODULE_TYPE MODULE_TYPE_MAX =
    GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_MAX;
  static const int MODULE_TYPE_ARRAYSIZE =
    GLOBAL_CONFIG_MODULE_TYPE_MODULE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MODULE_TYPE_descriptor() {
    return GLOBAL_CONFIG_MODULE_TYPE_descriptor();
  }
  static inline const ::std::string& MODULE_TYPE_Name(MODULE_TYPE value) {
    return GLOBAL_CONFIG_MODULE_TYPE_Name(value);
  }
  static inline bool MODULE_TYPE_Parse(const ::std::string& name,
      MODULE_TYPE* value) {
    return GLOBAL_CONFIG_MODULE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string ListenAddress = 1;
  void clear_listenaddress();
  static const int kListenAddressFieldNumber = 1;
  const ::std::string& listenaddress() const;
  void set_listenaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_listenaddress(::std::string&& value);
  #endif
  void set_listenaddress(const char* value);
  void set_listenaddress(const char* value, size_t size);
  ::std::string* mutable_listenaddress();
  ::std::string* release_listenaddress();
  void set_allocated_listenaddress(::std::string* listenaddress);

  // string LogPath = 3;
  void clear_logpath();
  static const int kLogPathFieldNumber = 3;
  const ::std::string& logpath() const;
  void set_logpath(const ::std::string& value);
  #if LANG_CXX11
  void set_logpath(::std::string&& value);
  #endif
  void set_logpath(const char* value);
  void set_logpath(const char* value, size_t size);
  ::std::string* mutable_logpath();
  ::std::string* release_logpath();
  void set_allocated_logpath(::std::string* logpath);

  // string ModuleName = 12;
  void clear_modulename();
  static const int kModuleNameFieldNumber = 12;
  const ::std::string& modulename() const;
  void set_modulename(const ::std::string& value);
  #if LANG_CXX11
  void set_modulename(::std::string&& value);
  #endif
  void set_modulename(const char* value);
  void set_modulename(const char* value, size_t size);
  ::std::string* mutable_modulename();
  ::std::string* release_modulename();
  void set_allocated_modulename(::std::string* modulename);

  // string ModulePath = 14;
  void clear_modulepath();
  static const int kModulePathFieldNumber = 14;
  const ::std::string& modulepath() const;
  void set_modulepath(const ::std::string& value);
  #if LANG_CXX11
  void set_modulepath(::std::string&& value);
  #endif
  void set_modulepath(const char* value);
  void set_modulepath(const char* value, size_t size);
  ::std::string* mutable_modulepath();
  ::std::string* release_modulepath();
  void set_allocated_modulepath(::std::string* modulepath);

  // bytes ModuleConfig = 15;
  void clear_moduleconfig();
  static const int kModuleConfigFieldNumber = 15;
  const ::std::string& moduleconfig() const;
  void set_moduleconfig(const ::std::string& value);
  #if LANG_CXX11
  void set_moduleconfig(::std::string&& value);
  #endif
  void set_moduleconfig(const char* value);
  void set_moduleconfig(const void* value, size_t size);
  ::std::string* mutable_moduleconfig();
  ::std::string* release_moduleconfig();
  void set_allocated_moduleconfig(::std::string* moduleconfig);

  // string ModuleReference = 16;
  void clear_modulereference();
  static const int kModuleReferenceFieldNumber = 16;
  const ::std::string& modulereference() const;
  void set_modulereference(const ::std::string& value);
  #if LANG_CXX11
  void set_modulereference(::std::string&& value);
  #endif
  void set_modulereference(const char* value);
  void set_modulereference(const char* value, size_t size);
  ::std::string* mutable_modulereference();
  ::std::string* release_modulereference();
  void set_allocated_modulereference(::std::string* modulereference);

  // string ModuleFunctoins = 17;
  void clear_modulefunctoins();
  static const int kModuleFunctoinsFieldNumber = 17;
  const ::std::string& modulefunctoins() const;
  void set_modulefunctoins(const ::std::string& value);
  #if LANG_CXX11
  void set_modulefunctoins(::std::string&& value);
  #endif
  void set_modulefunctoins(const char* value);
  void set_modulefunctoins(const char* value, size_t size);
  ::std::string* mutable_modulefunctoins();
  ::std::string* release_modulefunctoins();
  void set_allocated_modulefunctoins(::std::string* modulefunctoins);

  // string CertFilePath = 19;
  void clear_certfilepath();
  static const int kCertFilePathFieldNumber = 19;
  const ::std::string& certfilepath() const;
  void set_certfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_certfilepath(::std::string&& value);
  #endif
  void set_certfilepath(const char* value);
  void set_certfilepath(const char* value, size_t size);
  ::std::string* mutable_certfilepath();
  ::std::string* release_certfilepath();
  void set_allocated_certfilepath(::std::string* certfilepath);

  // string KeyFilePath = 20;
  void clear_keyfilepath();
  static const int kKeyFilePathFieldNumber = 20;
  const ::std::string& keyfilepath() const;
  void set_keyfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_keyfilepath(::std::string&& value);
  #endif
  void set_keyfilepath(const char* value);
  void set_keyfilepath(const char* value, size_t size);
  ::std::string* mutable_keyfilepath();
  ::std::string* release_keyfilepath();
  void set_allocated_keyfilepath(::std::string* keyfilepath);

  // string CertPasswd = 21;
  void clear_certpasswd();
  static const int kCertPasswdFieldNumber = 21;
  const ::std::string& certpasswd() const;
  void set_certpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_certpasswd(::std::string&& value);
  #endif
  void set_certpasswd(const char* value);
  void set_certpasswd(const char* value, size_t size);
  ::std::string* mutable_certpasswd();
  ::std::string* release_certpasswd();
  void set_allocated_certpasswd(::std::string* certpasswd);

  // int32 ListenPort = 2;
  void clear_listenport();
  static const int kListenPortFieldNumber = 2;
  ::google::protobuf::int32 listenport() const;
  void set_listenport(::google::protobuf::int32 value);

  // .Core.LogLevel LogLevel = 4;
  void clear_loglevel();
  static const int kLogLevelFieldNumber = 4;
  ::Core::LogLevel loglevel() const;
  void set_loglevel(::Core::LogLevel value);

  // int32 LogOperation = 5;
  void clear_logoperation();
  static const int kLogOperationFieldNumber = 5;
  ::google::protobuf::int32 logoperation() const;
  void set_logoperation(::google::protobuf::int32 value);

  // int32 MQThreadQuantity = 6;
  void clear_mqthreadquantity();
  static const int kMQThreadQuantityFieldNumber = 6;
  ::google::protobuf::int32 mqthreadquantity() const;
  void set_mqthreadquantity(::google::protobuf::int32 value);

  // int32 EPollThreadQuantity = 7;
  void clear_epollthreadquantity();
  static const int kEPollThreadQuantityFieldNumber = 7;
  ::google::protobuf::int32 epollthreadquantity() const;
  void set_epollthreadquantity(::google::protobuf::int32 value);

  // int32 ProcessThreadQuantity = 8;
  void clear_processthreadquantity();
  static const int kProcessThreadQuantityFieldNumber = 8;
  ::google::protobuf::int32 processthreadquantity() const;
  void set_processthreadquantity(::google::protobuf::int32 value);

  // int32 PrioritySize = 9;
  void clear_prioritysize();
  static const int kPrioritySizeFieldNumber = 9;
  ::google::protobuf::int32 prioritysize() const;
  void set_prioritysize(::google::protobuf::int32 value);

  // int32 ConnectTime = 10;
  void clear_connecttime();
  static const int kConnectTimeFieldNumber = 10;
  ::google::protobuf::int32 connecttime() const;
  void set_connecttime(::google::protobuf::int32 value);

  // int32 ReceiveTime = 11;
  void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 11;
  ::google::protobuf::int32 receivetime() const;
  void set_receivetime(::google::protobuf::int32 value);

  // .Core.GLOBAL_CONFIG.MODULE_TYPE ModuleType = 13;
  void clear_moduletype();
  static const int kModuleTypeFieldNumber = 13;
  ::Core::GLOBAL_CONFIG_MODULE_TYPE moduletype() const;
  void set_moduletype(::Core::GLOBAL_CONFIG_MODULE_TYPE value);

  // bool EnableSSL = 18;
  void clear_enablessl();
  static const int kEnableSSLFieldNumber = 18;
  bool enablessl() const;
  void set_enablessl(bool value);

  // @@protoc_insertion_point(class_scope:Core.GLOBAL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr listenaddress_;
  ::google::protobuf::internal::ArenaStringPtr logpath_;
  ::google::protobuf::internal::ArenaStringPtr modulename_;
  ::google::protobuf::internal::ArenaStringPtr modulepath_;
  ::google::protobuf::internal::ArenaStringPtr moduleconfig_;
  ::google::protobuf::internal::ArenaStringPtr modulereference_;
  ::google::protobuf::internal::ArenaStringPtr modulefunctoins_;
  ::google::protobuf::internal::ArenaStringPtr certfilepath_;
  ::google::protobuf::internal::ArenaStringPtr keyfilepath_;
  ::google::protobuf::internal::ArenaStringPtr certpasswd_;
  ::google::protobuf::int32 listenport_;
  int loglevel_;
  ::google::protobuf::int32 logoperation_;
  ::google::protobuf::int32 mqthreadquantity_;
  ::google::protobuf::int32 epollthreadquantity_;
  ::google::protobuf::int32 processthreadquantity_;
  ::google::protobuf::int32 prioritysize_;
  ::google::protobuf::int32 connecttime_;
  ::google::protobuf::int32 receivetime_;
  int moduletype_;
  bool enablessl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeDataPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Core.RuntimeDataPackage) */ {
 public:
  RuntimeDataPackage();
  virtual ~RuntimeDataPackage();

  RuntimeDataPackage(const RuntimeDataPackage& from);

  inline RuntimeDataPackage& operator=(const RuntimeDataPackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeDataPackage(RuntimeDataPackage&& from) noexcept
    : RuntimeDataPackage() {
    *this = ::std::move(from);
  }

  inline RuntimeDataPackage& operator=(RuntimeDataPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeDataPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeDataPackage* internal_default_instance() {
    return reinterpret_cast<const RuntimeDataPackage*>(
               &_RuntimeDataPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RuntimeDataPackage* other);
  friend void swap(RuntimeDataPackage& a, RuntimeDataPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeDataPackage* New() const final {
    return CreateMaybeMessage<RuntimeDataPackage>(NULL);
  }

  RuntimeDataPackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeDataPackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuntimeDataPackage& from);
  void MergeFrom(const RuntimeDataPackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeDataPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ManagerAddress = 1;
  void clear_manageraddress();
  static const int kManagerAddressFieldNumber = 1;
  const ::std::string& manageraddress() const;
  void set_manageraddress(const ::std::string& value);
  #if LANG_CXX11
  void set_manageraddress(::std::string&& value);
  #endif
  void set_manageraddress(const char* value);
  void set_manageraddress(const char* value, size_t size);
  ::std::string* mutable_manageraddress();
  ::std::string* release_manageraddress();
  void set_allocated_manageraddress(::std::string* manageraddress);

  // .Core.GLOBAL_CONFIG TemplateConfig = 5;
  bool has_templateconfig() const;
  void clear_templateconfig();
  static const int kTemplateConfigFieldNumber = 5;
  private:
  const ::Core::GLOBAL_CONFIG& _internal_templateconfig() const;
  public:
  const ::Core::GLOBAL_CONFIG& templateconfig() const;
  ::Core::GLOBAL_CONFIG* release_templateconfig();
  ::Core::GLOBAL_CONFIG* mutable_templateconfig();
  void set_allocated_templateconfig(::Core::GLOBAL_CONFIG* templateconfig);

  // int32 ManagerPort = 2;
  void clear_managerport();
  static const int kManagerPortFieldNumber = 2;
  ::google::protobuf::int32 managerport() const;
  void set_managerport(::google::protobuf::int32 value);

  // int32 TemplateID = 3;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 3;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // fixed64 NodeUUID = 4;
  void clear_nodeuuid();
  static const int kNodeUUIDFieldNumber = 4;
  ::google::protobuf::uint64 nodeuuid() const;
  void set_nodeuuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Core.RuntimeDataPackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manageraddress_;
  ::Core::GLOBAL_CONFIG* templateconfig_;
  ::google::protobuf::int32 managerport_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::uint64 nodeuuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_core_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GLOBAL_CONFIG

// string ListenAddress = 1;
inline void GLOBAL_CONFIG::clear_listenaddress() {
  listenaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::listenaddress() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ListenAddress)
  return listenaddress_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_listenaddress(const ::std::string& value) {
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ListenAddress)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_listenaddress(::std::string&& value) {
  
  listenaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ListenAddress)
}
#endif
inline void GLOBAL_CONFIG::set_listenaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ListenAddress)
}
inline void GLOBAL_CONFIG::set_listenaddress(const char* value, size_t size) {
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ListenAddress)
}
inline ::std::string* GLOBAL_CONFIG::mutable_listenaddress() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ListenAddress)
  return listenaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_listenaddress() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ListenAddress)
  
  return listenaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_listenaddress(::std::string* listenaddress) {
  if (listenaddress != NULL) {
    
  } else {
    
  }
  listenaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listenaddress);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ListenAddress)
}

// int32 ListenPort = 2;
inline void GLOBAL_CONFIG::clear_listenport() {
  listenport_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::listenport() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ListenPort)
  return listenport_;
}
inline void GLOBAL_CONFIG::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ListenPort)
}

// string LogPath = 3;
inline void GLOBAL_CONFIG::clear_logpath() {
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::logpath() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.LogPath)
  return logpath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_logpath(const ::std::string& value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.LogPath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_logpath(::std::string&& value) {
  
  logpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.LogPath)
}
#endif
inline void GLOBAL_CONFIG::set_logpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.LogPath)
}
inline void GLOBAL_CONFIG::set_logpath(const char* value, size_t size) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.LogPath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_logpath() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.LogPath)
  return logpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_logpath() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.LogPath)
  
  return logpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_logpath(::std::string* logpath) {
  if (logpath != NULL) {
    
  } else {
    
  }
  logpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logpath);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.LogPath)
}

// .Core.LogLevel LogLevel = 4;
inline void GLOBAL_CONFIG::clear_loglevel() {
  loglevel_ = 0;
}
inline ::Core::LogLevel GLOBAL_CONFIG::loglevel() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.LogLevel)
  return static_cast< ::Core::LogLevel >(loglevel_);
}
inline void GLOBAL_CONFIG::set_loglevel(::Core::LogLevel value) {
  
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.LogLevel)
}

// int32 LogOperation = 5;
inline void GLOBAL_CONFIG::clear_logoperation() {
  logoperation_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::logoperation() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.LogOperation)
  return logoperation_;
}
inline void GLOBAL_CONFIG::set_logoperation(::google::protobuf::int32 value) {
  
  logoperation_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.LogOperation)
}

// int32 MQThreadQuantity = 6;
inline void GLOBAL_CONFIG::clear_mqthreadquantity() {
  mqthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::mqthreadquantity() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.MQThreadQuantity)
  return mqthreadquantity_;
}
inline void GLOBAL_CONFIG::set_mqthreadquantity(::google::protobuf::int32 value) {
  
  mqthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.MQThreadQuantity)
}

// int32 EPollThreadQuantity = 7;
inline void GLOBAL_CONFIG::clear_epollthreadquantity() {
  epollthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::epollthreadquantity() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.EPollThreadQuantity)
  return epollthreadquantity_;
}
inline void GLOBAL_CONFIG::set_epollthreadquantity(::google::protobuf::int32 value) {
  
  epollthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.EPollThreadQuantity)
}

// int32 ProcessThreadQuantity = 8;
inline void GLOBAL_CONFIG::clear_processthreadquantity() {
  processthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::processthreadquantity() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ProcessThreadQuantity)
  return processthreadquantity_;
}
inline void GLOBAL_CONFIG::set_processthreadquantity(::google::protobuf::int32 value) {
  
  processthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ProcessThreadQuantity)
}

// int32 PrioritySize = 9;
inline void GLOBAL_CONFIG::clear_prioritysize() {
  prioritysize_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::prioritysize() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.PrioritySize)
  return prioritysize_;
}
inline void GLOBAL_CONFIG::set_prioritysize(::google::protobuf::int32 value) {
  
  prioritysize_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.PrioritySize)
}

// int32 ConnectTime = 10;
inline void GLOBAL_CONFIG::clear_connecttime() {
  connecttime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::connecttime() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ConnectTime)
  return connecttime_;
}
inline void GLOBAL_CONFIG::set_connecttime(::google::protobuf::int32 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ConnectTime)
}

// int32 ReceiveTime = 11;
inline void GLOBAL_CONFIG::clear_receivetime() {
  receivetime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::receivetime() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ReceiveTime)
  return receivetime_;
}
inline void GLOBAL_CONFIG::set_receivetime(::google::protobuf::int32 value) {
  
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ReceiveTime)
}

// string ModuleName = 12;
inline void GLOBAL_CONFIG::clear_modulename() {
  modulename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulename() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModuleName)
  return modulename_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulename(const ::std::string& value) {
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModuleName)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulename(::std::string&& value) {
  
  modulename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ModuleName)
}
#endif
inline void GLOBAL_CONFIG::set_modulename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ModuleName)
}
inline void GLOBAL_CONFIG::set_modulename(const char* value, size_t size) {
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ModuleName)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulename() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ModuleName)
  return modulename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulename() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ModuleName)
  
  return modulename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulename(::std::string* modulename) {
  if (modulename != NULL) {
    
  } else {
    
  }
  modulename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulename);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ModuleName)
}

// .Core.GLOBAL_CONFIG.MODULE_TYPE ModuleType = 13;
inline void GLOBAL_CONFIG::clear_moduletype() {
  moduletype_ = 0;
}
inline ::Core::GLOBAL_CONFIG_MODULE_TYPE GLOBAL_CONFIG::moduletype() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModuleType)
  return static_cast< ::Core::GLOBAL_CONFIG_MODULE_TYPE >(moduletype_);
}
inline void GLOBAL_CONFIG::set_moduletype(::Core::GLOBAL_CONFIG_MODULE_TYPE value) {
  
  moduletype_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModuleType)
}

// string ModulePath = 14;
inline void GLOBAL_CONFIG::clear_modulepath() {
  modulepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulepath() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModulePath)
  return modulepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulepath(const ::std::string& value) {
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModulePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulepath(::std::string&& value) {
  
  modulepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ModulePath)
}
#endif
inline void GLOBAL_CONFIG::set_modulepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ModulePath)
}
inline void GLOBAL_CONFIG::set_modulepath(const char* value, size_t size) {
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ModulePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulepath() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ModulePath)
  return modulepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulepath() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ModulePath)
  
  return modulepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulepath(::std::string* modulepath) {
  if (modulepath != NULL) {
    
  } else {
    
  }
  modulepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulepath);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ModulePath)
}

// bytes ModuleConfig = 15;
inline void GLOBAL_CONFIG::clear_moduleconfig() {
  moduleconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::moduleconfig() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModuleConfig)
  return moduleconfig_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_moduleconfig(const ::std::string& value) {
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModuleConfig)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_moduleconfig(::std::string&& value) {
  
  moduleconfig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ModuleConfig)
}
#endif
inline void GLOBAL_CONFIG::set_moduleconfig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ModuleConfig)
}
inline void GLOBAL_CONFIG::set_moduleconfig(const void* value, size_t size) {
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ModuleConfig)
}
inline ::std::string* GLOBAL_CONFIG::mutable_moduleconfig() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ModuleConfig)
  return moduleconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_moduleconfig() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ModuleConfig)
  
  return moduleconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_moduleconfig(::std::string* moduleconfig) {
  if (moduleconfig != NULL) {
    
  } else {
    
  }
  moduleconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleconfig);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ModuleConfig)
}

// string ModuleReference = 16;
inline void GLOBAL_CONFIG::clear_modulereference() {
  modulereference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulereference() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModuleReference)
  return modulereference_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulereference(const ::std::string& value) {
  
  modulereference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModuleReference)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulereference(::std::string&& value) {
  
  modulereference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ModuleReference)
}
#endif
inline void GLOBAL_CONFIG::set_modulereference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulereference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ModuleReference)
}
inline void GLOBAL_CONFIG::set_modulereference(const char* value, size_t size) {
  
  modulereference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ModuleReference)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulereference() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ModuleReference)
  return modulereference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulereference() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ModuleReference)
  
  return modulereference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulereference(::std::string* modulereference) {
  if (modulereference != NULL) {
    
  } else {
    
  }
  modulereference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulereference);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ModuleReference)
}

// string ModuleFunctoins = 17;
inline void GLOBAL_CONFIG::clear_modulefunctoins() {
  modulefunctoins_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulefunctoins() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.ModuleFunctoins)
  return modulefunctoins_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulefunctoins(const ::std::string& value) {
  
  modulefunctoins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.ModuleFunctoins)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulefunctoins(::std::string&& value) {
  
  modulefunctoins_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.ModuleFunctoins)
}
#endif
inline void GLOBAL_CONFIG::set_modulefunctoins(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulefunctoins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.ModuleFunctoins)
}
inline void GLOBAL_CONFIG::set_modulefunctoins(const char* value, size_t size) {
  
  modulefunctoins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.ModuleFunctoins)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulefunctoins() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.ModuleFunctoins)
  return modulefunctoins_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulefunctoins() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.ModuleFunctoins)
  
  return modulefunctoins_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulefunctoins(::std::string* modulefunctoins) {
  if (modulefunctoins != NULL) {
    
  } else {
    
  }
  modulefunctoins_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulefunctoins);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.ModuleFunctoins)
}

// bool EnableSSL = 18;
inline void GLOBAL_CONFIG::clear_enablessl() {
  enablessl_ = false;
}
inline bool GLOBAL_CONFIG::enablessl() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.EnableSSL)
  return enablessl_;
}
inline void GLOBAL_CONFIG::set_enablessl(bool value) {
  
  enablessl_ = value;
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.EnableSSL)
}

// string CertFilePath = 19;
inline void GLOBAL_CONFIG::clear_certfilepath() {
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certfilepath() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certfilepath(const ::std::string& value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.CertFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certfilepath(::std::string&& value) {
  
  certfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.CertFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_certfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.CertFilePath)
}
inline void GLOBAL_CONFIG::set_certfilepath(const char* value, size_t size) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.CertFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certfilepath() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.CertFilePath)
  
  return certfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certfilepath(::std::string* certfilepath) {
  if (certfilepath != NULL) {
    
  } else {
    
  }
  certfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certfilepath);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.CertFilePath)
}

// string KeyFilePath = 20;
inline void GLOBAL_CONFIG::clear_keyfilepath() {
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::keyfilepath() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_keyfilepath(const ::std::string& value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.KeyFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_keyfilepath(::std::string&& value) {
  
  keyfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.KeyFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.KeyFilePath)
}
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value, size_t size) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.KeyFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_keyfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_keyfilepath() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.KeyFilePath)
  
  return keyfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_keyfilepath(::std::string* keyfilepath) {
  if (keyfilepath != NULL) {
    
  } else {
    
  }
  keyfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfilepath);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.KeyFilePath)
}

// string CertPasswd = 21;
inline void GLOBAL_CONFIG::clear_certpasswd() {
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certpasswd() const {
  // @@protoc_insertion_point(field_get:Core.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certpasswd(const ::std::string& value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.GLOBAL_CONFIG.CertPasswd)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certpasswd(::std::string&& value) {
  
  certpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.GLOBAL_CONFIG.CertPasswd)
}
#endif
inline void GLOBAL_CONFIG::set_certpasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.GLOBAL_CONFIG.CertPasswd)
}
inline void GLOBAL_CONFIG::set_certpasswd(const char* value, size_t size) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.GLOBAL_CONFIG.CertPasswd)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certpasswd() {
  
  // @@protoc_insertion_point(field_mutable:Core.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certpasswd() {
  // @@protoc_insertion_point(field_release:Core.GLOBAL_CONFIG.CertPasswd)
  
  return certpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certpasswd(::std::string* certpasswd) {
  if (certpasswd != NULL) {
    
  } else {
    
  }
  certpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certpasswd);
  // @@protoc_insertion_point(field_set_allocated:Core.GLOBAL_CONFIG.CertPasswd)
}

// -------------------------------------------------------------------

// RuntimeDataPackage

// string ManagerAddress = 1;
inline void RuntimeDataPackage::clear_manageraddress() {
  manageraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuntimeDataPackage::manageraddress() const {
  // @@protoc_insertion_point(field_get:Core.RuntimeDataPackage.ManagerAddress)
  return manageraddress_.GetNoArena();
}
inline void RuntimeDataPackage::set_manageraddress(const ::std::string& value) {
  
  manageraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Core.RuntimeDataPackage.ManagerAddress)
}
#if LANG_CXX11
inline void RuntimeDataPackage::set_manageraddress(::std::string&& value) {
  
  manageraddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Core.RuntimeDataPackage.ManagerAddress)
}
#endif
inline void RuntimeDataPackage::set_manageraddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manageraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Core.RuntimeDataPackage.ManagerAddress)
}
inline void RuntimeDataPackage::set_manageraddress(const char* value, size_t size) {
  
  manageraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Core.RuntimeDataPackage.ManagerAddress)
}
inline ::std::string* RuntimeDataPackage::mutable_manageraddress() {
  
  // @@protoc_insertion_point(field_mutable:Core.RuntimeDataPackage.ManagerAddress)
  return manageraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuntimeDataPackage::release_manageraddress() {
  // @@protoc_insertion_point(field_release:Core.RuntimeDataPackage.ManagerAddress)
  
  return manageraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeDataPackage::set_allocated_manageraddress(::std::string* manageraddress) {
  if (manageraddress != NULL) {
    
  } else {
    
  }
  manageraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manageraddress);
  // @@protoc_insertion_point(field_set_allocated:Core.RuntimeDataPackage.ManagerAddress)
}

// int32 ManagerPort = 2;
inline void RuntimeDataPackage::clear_managerport() {
  managerport_ = 0;
}
inline ::google::protobuf::int32 RuntimeDataPackage::managerport() const {
  // @@protoc_insertion_point(field_get:Core.RuntimeDataPackage.ManagerPort)
  return managerport_;
}
inline void RuntimeDataPackage::set_managerport(::google::protobuf::int32 value) {
  
  managerport_ = value;
  // @@protoc_insertion_point(field_set:Core.RuntimeDataPackage.ManagerPort)
}

// int32 TemplateID = 3;
inline void RuntimeDataPackage::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 RuntimeDataPackage::templateid() const {
  // @@protoc_insertion_point(field_get:Core.RuntimeDataPackage.TemplateID)
  return templateid_;
}
inline void RuntimeDataPackage::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Core.RuntimeDataPackage.TemplateID)
}

// fixed64 NodeUUID = 4;
inline void RuntimeDataPackage::clear_nodeuuid() {
  nodeuuid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RuntimeDataPackage::nodeuuid() const {
  // @@protoc_insertion_point(field_get:Core.RuntimeDataPackage.NodeUUID)
  return nodeuuid_;
}
inline void RuntimeDataPackage::set_nodeuuid(::google::protobuf::uint64 value) {
  
  nodeuuid_ = value;
  // @@protoc_insertion_point(field_set:Core.RuntimeDataPackage.NodeUUID)
}

// .Core.GLOBAL_CONFIG TemplateConfig = 5;
inline bool RuntimeDataPackage::has_templateconfig() const {
  return this != internal_default_instance() && templateconfig_ != NULL;
}
inline void RuntimeDataPackage::clear_templateconfig() {
  if (GetArenaNoVirtual() == NULL && templateconfig_ != NULL) {
    delete templateconfig_;
  }
  templateconfig_ = NULL;
}
inline const ::Core::GLOBAL_CONFIG& RuntimeDataPackage::_internal_templateconfig() const {
  return *templateconfig_;
}
inline const ::Core::GLOBAL_CONFIG& RuntimeDataPackage::templateconfig() const {
  const ::Core::GLOBAL_CONFIG* p = templateconfig_;
  // @@protoc_insertion_point(field_get:Core.RuntimeDataPackage.TemplateConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::Core::GLOBAL_CONFIG*>(
      &::Core::_GLOBAL_CONFIG_default_instance_);
}
inline ::Core::GLOBAL_CONFIG* RuntimeDataPackage::release_templateconfig() {
  // @@protoc_insertion_point(field_release:Core.RuntimeDataPackage.TemplateConfig)
  
  ::Core::GLOBAL_CONFIG* temp = templateconfig_;
  templateconfig_ = NULL;
  return temp;
}
inline ::Core::GLOBAL_CONFIG* RuntimeDataPackage::mutable_templateconfig() {
  
  if (templateconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::Core::GLOBAL_CONFIG>(GetArenaNoVirtual());
    templateconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Core.RuntimeDataPackage.TemplateConfig)
  return templateconfig_;
}
inline void RuntimeDataPackage::set_allocated_templateconfig(::Core::GLOBAL_CONFIG* templateconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete templateconfig_;
  }
  if (templateconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      templateconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, templateconfig, submessage_arena);
    }
    
  } else {
    
  }
  templateconfig_ = templateconfig;
  // @@protoc_insertion_point(field_set_allocated:Core.RuntimeDataPackage.TemplateConfig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Core

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Core::GLOBAL_CONFIG_MODULE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::GLOBAL_CONFIG_MODULE_TYPE>() {
  return ::Core::GLOBAL_CONFIG_MODULE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Core::LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::LogLevel>() {
  return ::Core::LogLevel_descriptor();
}
template <> struct is_proto_enum< ::Core::DATA_ITEM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::DATA_ITEM>() {
  return ::Core::DATA_ITEM_descriptor();
}
template <> struct is_proto_enum< ::Core::EVENT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::EVENT_TYPE>() {
  return ::Core::EVENT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Core::PRIORITY_LEVEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::PRIORITY_LEVEL>() {
  return ::Core::PRIORITY_LEVEL_descriptor();
}
template <> struct is_proto_enum< ::Core::ControlEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Core::ControlEvent>() {
  return ::Core::ControlEvent_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_core_2eproto
