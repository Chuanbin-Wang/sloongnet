// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filecenter.proto

#ifndef PROTOBUF_INCLUDED_filecenter_2eproto
#define PROTOBUF_INCLUDED_filecenter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_filecenter_2eproto 

namespace protobuf_filecenter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_filecenter_2eproto
namespace FileCenter {
class DownloadedRequest;
class DownloadedRequestDefaultTypeInternal;
extern DownloadedRequestDefaultTypeInternal _DownloadedRequest_default_instance_;
class DownloadingRequest;
class DownloadingRequestDefaultTypeInternal;
extern DownloadingRequestDefaultTypeInternal _DownloadingRequest_default_instance_;
class DownloadingResponse;
class DownloadingResponseDefaultTypeInternal;
extern DownloadingResponseDefaultTypeInternal _DownloadingResponse_default_instance_;
class FileInfoItem;
class FileInfoItemDefaultTypeInternal;
extern FileInfoItemDefaultTypeInternal _FileInfoItem_default_instance_;
class PrepareDownloadRequest;
class PrepareDownloadRequestDefaultTypeInternal;
extern PrepareDownloadRequestDefaultTypeInternal _PrepareDownloadRequest_default_instance_;
class PrepareDownloadResponse;
class PrepareDownloadResponseDefaultTypeInternal;
extern PrepareDownloadResponseDefaultTypeInternal _PrepareDownloadResponse_default_instance_;
class PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse;
class PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUseDefaultTypeInternal;
extern PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUseDefaultTypeInternal _PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse_default_instance_;
class PrepareUploadRequest;
class PrepareUploadRequestDefaultTypeInternal;
extern PrepareUploadRequestDefaultTypeInternal _PrepareUploadRequest_default_instance_;
class PrepareUploadResponse;
class PrepareUploadResponseDefaultTypeInternal;
extern PrepareUploadResponseDefaultTypeInternal _PrepareUploadResponse_default_instance_;
class UploadedRequest;
class UploadedRequestDefaultTypeInternal;
extern UploadedRequestDefaultTypeInternal _UploadedRequest_default_instance_;
class UploadingRequest;
class UploadingRequestDefaultTypeInternal;
extern UploadingRequestDefaultTypeInternal _UploadingRequest_default_instance_;
}  // namespace FileCenter
namespace google {
namespace protobuf {
template<> ::FileCenter::DownloadedRequest* Arena::CreateMaybeMessage<::FileCenter::DownloadedRequest>(Arena*);
template<> ::FileCenter::DownloadingRequest* Arena::CreateMaybeMessage<::FileCenter::DownloadingRequest>(Arena*);
template<> ::FileCenter::DownloadingResponse* Arena::CreateMaybeMessage<::FileCenter::DownloadingResponse>(Arena*);
template<> ::FileCenter::FileInfoItem* Arena::CreateMaybeMessage<::FileCenter::FileInfoItem>(Arena*);
template<> ::FileCenter::PrepareDownloadRequest* Arena::CreateMaybeMessage<::FileCenter::PrepareDownloadRequest>(Arena*);
template<> ::FileCenter::PrepareDownloadResponse* Arena::CreateMaybeMessage<::FileCenter::PrepareDownloadResponse>(Arena*);
template<> ::FileCenter::PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::FileCenter::PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse>(Arena*);
template<> ::FileCenter::PrepareUploadRequest* Arena::CreateMaybeMessage<::FileCenter::PrepareUploadRequest>(Arena*);
template<> ::FileCenter::PrepareUploadResponse* Arena::CreateMaybeMessage<::FileCenter::PrepareUploadResponse>(Arena*);
template<> ::FileCenter::UploadedRequest* Arena::CreateMaybeMessage<::FileCenter::UploadedRequest>(Arena*);
template<> ::FileCenter::UploadingRequest* Arena::CreateMaybeMessage<::FileCenter::UploadingRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace FileCenter {

enum Functions {
  Invalid = 0,
  TestSpeed = 301,
  PrepareUpload = 302,
  Uploading = 303,
  Uploaded = 304,
  PrepareDownload = 305,
  Downloading = 306,
  Downloaded = 307,
  Functions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Functions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Functions_IsValid(int value);
const Functions Functions_MIN = Invalid;
const Functions Functions_MAX = Downloaded;
const int Functions_ARRAYSIZE = Functions_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functions_descriptor();
inline const ::std::string& Functions_Name(Functions value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functions_descriptor(), value);
}
inline bool Functions_Parse(
    const ::std::string& name, Functions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functions>(
    Functions_descriptor(), name, value);
}
// ===================================================================

class FileInfoItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.FileInfoItem) */ {
 public:
  FileInfoItem();
  virtual ~FileInfoItem();

  FileInfoItem(const FileInfoItem& from);

  inline FileInfoItem& operator=(const FileInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfoItem(FileInfoItem&& from) noexcept
    : FileInfoItem() {
    *this = ::std::move(from);
  }

  inline FileInfoItem& operator=(FileInfoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfoItem* internal_default_instance() {
    return reinterpret_cast<const FileInfoItem*>(
               &_FileInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileInfoItem* other);
  friend void swap(FileInfoItem& a, FileInfoItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfoItem* New() const final {
    return CreateMaybeMessage<FileInfoItem>(NULL);
  }

  FileInfoItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileInfoItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileInfoItem& from);
  void MergeFrom(const FileInfoItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Hash_MD5 = 2;
  void clear_hash_md5();
  static const int kHashMD5FieldNumber = 2;
  const ::std::string& hash_md5() const;
  void set_hash_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_md5(::std::string&& value);
  #endif
  void set_hash_md5(const char* value);
  void set_hash_md5(const char* value, size_t size);
  ::std::string* mutable_hash_md5();
  ::std::string* release_hash_md5();
  void set_allocated_hash_md5(::std::string* hash_md5);

  // int32 FileSize = 3;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 3;
  ::google::protobuf::int32 filesize() const;
  void set_filesize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileCenter.FileInfoItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hash_md5_;
  ::google::protobuf::int32 filesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareUploadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.PrepareUploadRequest) */ {
 public:
  PrepareUploadRequest();
  virtual ~PrepareUploadRequest();

  PrepareUploadRequest(const PrepareUploadRequest& from);

  inline PrepareUploadRequest& operator=(const PrepareUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareUploadRequest(PrepareUploadRequest&& from) noexcept
    : PrepareUploadRequest() {
    *this = ::std::move(from);
  }

  inline PrepareUploadRequest& operator=(PrepareUploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareUploadRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareUploadRequest*>(
               &_PrepareUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PrepareUploadRequest* other);
  friend void swap(PrepareUploadRequest& a, PrepareUploadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareUploadRequest* New() const final {
    return CreateMaybeMessage<PrepareUploadRequest>(NULL);
  }

  PrepareUploadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareUploadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareUploadRequest& from);
  void MergeFrom(const PrepareUploadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareUploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .FileCenter.FileInfoItem info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::FileCenter::FileInfoItem& _internal_info() const;
  public:
  const ::FileCenter::FileInfoItem& info() const;
  ::FileCenter::FileInfoItem* release_info();
  ::FileCenter::FileInfoItem* mutable_info();
  void set_allocated_info(::FileCenter::FileInfoItem* info);

  // @@protoc_insertion_point(class_scope:FileCenter.PrepareUploadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::FileCenter::FileInfoItem* info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareUploadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.PrepareUploadResponse) */ {
 public:
  PrepareUploadResponse();
  virtual ~PrepareUploadResponse();

  PrepareUploadResponse(const PrepareUploadResponse& from);

  inline PrepareUploadResponse& operator=(const PrepareUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareUploadResponse(PrepareUploadResponse&& from) noexcept
    : PrepareUploadResponse() {
    *this = ::std::move(from);
  }

  inline PrepareUploadResponse& operator=(PrepareUploadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareUploadResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareUploadResponse*>(
               &_PrepareUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PrepareUploadResponse* other);
  friend void swap(PrepareUploadResponse& a, PrepareUploadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareUploadResponse* New() const final {
    return CreateMaybeMessage<PrepareUploadResponse>(NULL);
  }

  PrepareUploadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareUploadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareUploadResponse& from);
  void MergeFrom(const PrepareUploadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareUploadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:FileCenter.PrepareUploadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.UploadingRequest) */ {
 public:
  UploadingRequest();
  virtual ~UploadingRequest();

  UploadingRequest(const UploadingRequest& from);

  inline UploadingRequest& operator=(const UploadingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadingRequest(UploadingRequest&& from) noexcept
    : UploadingRequest() {
    *this = ::std::move(from);
  }

  inline UploadingRequest& operator=(UploadingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadingRequest* internal_default_instance() {
    return reinterpret_cast<const UploadingRequest*>(
               &_UploadingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UploadingRequest* other);
  friend void swap(UploadingRequest& a, UploadingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadingRequest* New() const final {
    return CreateMaybeMessage<UploadingRequest>(NULL);
  }

  UploadingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadingRequest& from);
  void MergeFrom(const UploadingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string Hash_MD5 = 3;
  void clear_hash_md5();
  static const int kHashMD5FieldNumber = 3;
  const ::std::string& hash_md5() const;
  void set_hash_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_md5(::std::string&& value);
  #endif
  void set_hash_md5(const char* value);
  void set_hash_md5(const char* value, size_t size);
  ::std::string* mutable_hash_md5();
  ::std::string* release_hash_md5();
  void set_allocated_hash_md5(::std::string* hash_md5);

  // int32 SplitPackageID = 2;
  void clear_splitpackageid();
  static const int kSplitPackageIDFieldNumber = 2;
  ::google::protobuf::int32 splitpackageid() const;
  void set_splitpackageid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileCenter.UploadingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr hash_md5_;
  ::google::protobuf::int32 splitpackageid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.UploadedRequest) */ {
 public:
  UploadedRequest();
  virtual ~UploadedRequest();

  UploadedRequest(const UploadedRequest& from);

  inline UploadedRequest& operator=(const UploadedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadedRequest(UploadedRequest&& from) noexcept
    : UploadedRequest() {
    *this = ::std::move(from);
  }

  inline UploadedRequest& operator=(UploadedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadedRequest* internal_default_instance() {
    return reinterpret_cast<const UploadedRequest*>(
               &_UploadedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UploadedRequest* other);
  friend void swap(UploadedRequest& a, UploadedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadedRequest* New() const final {
    return CreateMaybeMessage<UploadedRequest>(NULL);
  }

  UploadedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadedRequest& from);
  void MergeFrom(const UploadedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:FileCenter.UploadedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareDownloadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.PrepareDownloadRequest) */ {
 public:
  PrepareDownloadRequest();
  virtual ~PrepareDownloadRequest();

  PrepareDownloadRequest(const PrepareDownloadRequest& from);

  inline PrepareDownloadRequest& operator=(const PrepareDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareDownloadRequest(PrepareDownloadRequest&& from) noexcept
    : PrepareDownloadRequest() {
    *this = ::std::move(from);
  }

  inline PrepareDownloadRequest& operator=(PrepareDownloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareDownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareDownloadRequest*>(
               &_PrepareDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PrepareDownloadRequest* other);
  friend void swap(PrepareDownloadRequest& a, PrepareDownloadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareDownloadRequest* New() const final {
    return CreateMaybeMessage<PrepareDownloadRequest>(NULL);
  }

  PrepareDownloadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareDownloadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareDownloadRequest& from);
  void MergeFrom(const PrepareDownloadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareDownloadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Hash_MD5 = 1;
  void clear_hash_md5();
  static const int kHashMD5FieldNumber = 1;
  const ::std::string& hash_md5() const;
  void set_hash_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_md5(::std::string&& value);
  #endif
  void set_hash_md5(const char* value);
  void set_hash_md5(const char* value, size_t size);
  ::std::string* mutable_hash_md5();
  ::std::string* release_hash_md5();
  void set_allocated_hash_md5(::std::string* hash_md5);

  // @@protoc_insertion_point(class_scope:FileCenter.PrepareDownloadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_md5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse();
  PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse& other);
  static const PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse*>(&_PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PrepareDownloadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.PrepareDownloadResponse) */ {
 public:
  PrepareDownloadResponse();
  virtual ~PrepareDownloadResponse();

  PrepareDownloadResponse(const PrepareDownloadResponse& from);

  inline PrepareDownloadResponse& operator=(const PrepareDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareDownloadResponse(PrepareDownloadResponse&& from) noexcept
    : PrepareDownloadResponse() {
    *this = ::std::move(from);
  }

  inline PrepareDownloadResponse& operator=(PrepareDownloadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareDownloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareDownloadResponse*>(
               &_PrepareDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PrepareDownloadResponse* other);
  friend void swap(PrepareDownloadResponse& a, PrepareDownloadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareDownloadResponse* New() const final {
    return CreateMaybeMessage<PrepareDownloadResponse>(NULL);
  }

  PrepareDownloadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareDownloadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareDownloadResponse& from);
  void MergeFrom(const PrepareDownloadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareDownloadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, string> SplitPackageInfos = 3;
  int splitpackageinfos_size() const;
  void clear_splitpackageinfos();
  static const int kSplitPackageInfosFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      splitpackageinfos() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_splitpackageinfos();

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int32 FileSize = 2;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int32 filesize() const;
  void set_filesize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileCenter.PrepareDownloadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PrepareDownloadResponse_SplitPackageInfosEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > splitpackageinfos_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int32 filesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.DownloadingRequest) */ {
 public:
  DownloadingRequest();
  virtual ~DownloadingRequest();

  DownloadingRequest(const DownloadingRequest& from);

  inline DownloadingRequest& operator=(const DownloadingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadingRequest(DownloadingRequest&& from) noexcept
    : DownloadingRequest() {
    *this = ::std::move(from);
  }

  inline DownloadingRequest& operator=(DownloadingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadingRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadingRequest*>(
               &_DownloadingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DownloadingRequest* other);
  friend void swap(DownloadingRequest& a, DownloadingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadingRequest* New() const final {
    return CreateMaybeMessage<DownloadingRequest>(NULL);
  }

  DownloadingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadingRequest& from);
  void MergeFrom(const DownloadingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int32 SplitPackageID = 2;
  void clear_splitpackageid();
  static const int kSplitPackageIDFieldNumber = 2;
  ::google::protobuf::int32 splitpackageid() const;
  void set_splitpackageid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileCenter.DownloadingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int32 splitpackageid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.DownloadingResponse) */ {
 public:
  DownloadingResponse();
  virtual ~DownloadingResponse();

  DownloadingResponse(const DownloadingResponse& from);

  inline DownloadingResponse& operator=(const DownloadingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadingResponse(DownloadingResponse&& from) noexcept
    : DownloadingResponse() {
    *this = ::std::move(from);
  }

  inline DownloadingResponse& operator=(DownloadingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadingResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadingResponse*>(
               &_DownloadingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DownloadingResponse* other);
  friend void swap(DownloadingResponse& a, DownloadingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadingResponse* New() const final {
    return CreateMaybeMessage<DownloadingResponse>(NULL);
  }

  DownloadingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadingResponse& from);
  void MergeFrom(const DownloadingResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Hash_MD5 = 1;
  void clear_hash_md5();
  static const int kHashMD5FieldNumber = 1;
  const ::std::string& hash_md5() const;
  void set_hash_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_md5(::std::string&& value);
  #endif
  void set_hash_md5(const char* value);
  void set_hash_md5(const char* value, size_t size);
  ::std::string* mutable_hash_md5();
  ::std::string* release_hash_md5();
  void set_allocated_hash_md5(::std::string* hash_md5);

  // @@protoc_insertion_point(class_scope:FileCenter.DownloadingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_md5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileCenter.DownloadedRequest) */ {
 public:
  DownloadedRequest();
  virtual ~DownloadedRequest();

  DownloadedRequest(const DownloadedRequest& from);

  inline DownloadedRequest& operator=(const DownloadedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadedRequest(DownloadedRequest&& from) noexcept
    : DownloadedRequest() {
    *this = ::std::move(from);
  }

  inline DownloadedRequest& operator=(DownloadedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadedRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadedRequest*>(
               &_DownloadedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DownloadedRequest* other);
  friend void swap(DownloadedRequest& a, DownloadedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadedRequest* New() const final {
    return CreateMaybeMessage<DownloadedRequest>(NULL);
  }

  DownloadedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadedRequest& from);
  void MergeFrom(const DownloadedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:FileCenter.DownloadedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_filecenter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileInfoItem

// string Name = 1;
inline void FileInfoItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfoItem::name() const {
  // @@protoc_insertion_point(field_get:FileCenter.FileInfoItem.Name)
  return name_.GetNoArena();
}
inline void FileInfoItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.FileInfoItem.Name)
}
#if LANG_CXX11
inline void FileInfoItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.FileInfoItem.Name)
}
#endif
inline void FileInfoItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.FileInfoItem.Name)
}
inline void FileInfoItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.FileInfoItem.Name)
}
inline ::std::string* FileInfoItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.FileInfoItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfoItem::release_name() {
  // @@protoc_insertion_point(field_release:FileCenter.FileInfoItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfoItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.FileInfoItem.Name)
}

// string Hash_MD5 = 2;
inline void FileInfoItem::clear_hash_md5() {
  hash_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfoItem::hash_md5() const {
  // @@protoc_insertion_point(field_get:FileCenter.FileInfoItem.Hash_MD5)
  return hash_md5_.GetNoArena();
}
inline void FileInfoItem::set_hash_md5(const ::std::string& value) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.FileInfoItem.Hash_MD5)
}
#if LANG_CXX11
inline void FileInfoItem::set_hash_md5(::std::string&& value) {
  
  hash_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.FileInfoItem.Hash_MD5)
}
#endif
inline void FileInfoItem::set_hash_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.FileInfoItem.Hash_MD5)
}
inline void FileInfoItem::set_hash_md5(const char* value, size_t size) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.FileInfoItem.Hash_MD5)
}
inline ::std::string* FileInfoItem::mutable_hash_md5() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.FileInfoItem.Hash_MD5)
  return hash_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfoItem::release_hash_md5() {
  // @@protoc_insertion_point(field_release:FileCenter.FileInfoItem.Hash_MD5)
  
  return hash_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfoItem::set_allocated_hash_md5(::std::string* hash_md5) {
  if (hash_md5 != NULL) {
    
  } else {
    
  }
  hash_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_md5);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.FileInfoItem.Hash_MD5)
}

// int32 FileSize = 3;
inline void FileInfoItem::clear_filesize() {
  filesize_ = 0;
}
inline ::google::protobuf::int32 FileInfoItem::filesize() const {
  // @@protoc_insertion_point(field_get:FileCenter.FileInfoItem.FileSize)
  return filesize_;
}
inline void FileInfoItem::set_filesize(::google::protobuf::int32 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:FileCenter.FileInfoItem.FileSize)
}

// -------------------------------------------------------------------

// PrepareUploadRequest

// .FileCenter.FileInfoItem info = 1;
inline bool PrepareUploadRequest::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void PrepareUploadRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::FileCenter::FileInfoItem& PrepareUploadRequest::_internal_info() const {
  return *info_;
}
inline const ::FileCenter::FileInfoItem& PrepareUploadRequest::info() const {
  const ::FileCenter::FileInfoItem* p = info_;
  // @@protoc_insertion_point(field_get:FileCenter.PrepareUploadRequest.info)
  return p != NULL ? *p : *reinterpret_cast<const ::FileCenter::FileInfoItem*>(
      &::FileCenter::_FileInfoItem_default_instance_);
}
inline ::FileCenter::FileInfoItem* PrepareUploadRequest::release_info() {
  // @@protoc_insertion_point(field_release:FileCenter.PrepareUploadRequest.info)
  
  ::FileCenter::FileInfoItem* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::FileCenter::FileInfoItem* PrepareUploadRequest::mutable_info() {
  
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::FileCenter::FileInfoItem>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FileCenter.PrepareUploadRequest.info)
  return info_;
}
inline void PrepareUploadRequest::set_allocated_info(::FileCenter::FileInfoItem* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:FileCenter.PrepareUploadRequest.info)
}

// -------------------------------------------------------------------

// PrepareUploadResponse

// string Token = 1;
inline void PrepareUploadResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareUploadResponse::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.PrepareUploadResponse.Token)
  return token_.GetNoArena();
}
inline void PrepareUploadResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.PrepareUploadResponse.Token)
}
#if LANG_CXX11
inline void PrepareUploadResponse::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.PrepareUploadResponse.Token)
}
#endif
inline void PrepareUploadResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.PrepareUploadResponse.Token)
}
inline void PrepareUploadResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.PrepareUploadResponse.Token)
}
inline ::std::string* PrepareUploadResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.PrepareUploadResponse.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareUploadResponse::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.PrepareUploadResponse.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareUploadResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.PrepareUploadResponse.Token)
}

// -------------------------------------------------------------------

// UploadingRequest

// string Token = 1;
inline void UploadingRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadingRequest::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.UploadingRequest.Token)
  return token_.GetNoArena();
}
inline void UploadingRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.UploadingRequest.Token)
}
#if LANG_CXX11
inline void UploadingRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.UploadingRequest.Token)
}
#endif
inline void UploadingRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.UploadingRequest.Token)
}
inline void UploadingRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.UploadingRequest.Token)
}
inline ::std::string* UploadingRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.UploadingRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadingRequest::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.UploadingRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadingRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.UploadingRequest.Token)
}

// int32 SplitPackageID = 2;
inline void UploadingRequest::clear_splitpackageid() {
  splitpackageid_ = 0;
}
inline ::google::protobuf::int32 UploadingRequest::splitpackageid() const {
  // @@protoc_insertion_point(field_get:FileCenter.UploadingRequest.SplitPackageID)
  return splitpackageid_;
}
inline void UploadingRequest::set_splitpackageid(::google::protobuf::int32 value) {
  
  splitpackageid_ = value;
  // @@protoc_insertion_point(field_set:FileCenter.UploadingRequest.SplitPackageID)
}

// string Hash_MD5 = 3;
inline void UploadingRequest::clear_hash_md5() {
  hash_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadingRequest::hash_md5() const {
  // @@protoc_insertion_point(field_get:FileCenter.UploadingRequest.Hash_MD5)
  return hash_md5_.GetNoArena();
}
inline void UploadingRequest::set_hash_md5(const ::std::string& value) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.UploadingRequest.Hash_MD5)
}
#if LANG_CXX11
inline void UploadingRequest::set_hash_md5(::std::string&& value) {
  
  hash_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.UploadingRequest.Hash_MD5)
}
#endif
inline void UploadingRequest::set_hash_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.UploadingRequest.Hash_MD5)
}
inline void UploadingRequest::set_hash_md5(const char* value, size_t size) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.UploadingRequest.Hash_MD5)
}
inline ::std::string* UploadingRequest::mutable_hash_md5() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.UploadingRequest.Hash_MD5)
  return hash_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadingRequest::release_hash_md5() {
  // @@protoc_insertion_point(field_release:FileCenter.UploadingRequest.Hash_MD5)
  
  return hash_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadingRequest::set_allocated_hash_md5(::std::string* hash_md5) {
  if (hash_md5 != NULL) {
    
  } else {
    
  }
  hash_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_md5);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.UploadingRequest.Hash_MD5)
}

// -------------------------------------------------------------------

// UploadedRequest

// string Token = 1;
inline void UploadedRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadedRequest::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.UploadedRequest.Token)
  return token_.GetNoArena();
}
inline void UploadedRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.UploadedRequest.Token)
}
#if LANG_CXX11
inline void UploadedRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.UploadedRequest.Token)
}
#endif
inline void UploadedRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.UploadedRequest.Token)
}
inline void UploadedRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.UploadedRequest.Token)
}
inline ::std::string* UploadedRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.UploadedRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadedRequest::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.UploadedRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadedRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.UploadedRequest.Token)
}

// -------------------------------------------------------------------

// PrepareDownloadRequest

// string Hash_MD5 = 1;
inline void PrepareDownloadRequest::clear_hash_md5() {
  hash_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareDownloadRequest::hash_md5() const {
  // @@protoc_insertion_point(field_get:FileCenter.PrepareDownloadRequest.Hash_MD5)
  return hash_md5_.GetNoArena();
}
inline void PrepareDownloadRequest::set_hash_md5(const ::std::string& value) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.PrepareDownloadRequest.Hash_MD5)
}
#if LANG_CXX11
inline void PrepareDownloadRequest::set_hash_md5(::std::string&& value) {
  
  hash_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.PrepareDownloadRequest.Hash_MD5)
}
#endif
inline void PrepareDownloadRequest::set_hash_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.PrepareDownloadRequest.Hash_MD5)
}
inline void PrepareDownloadRequest::set_hash_md5(const char* value, size_t size) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.PrepareDownloadRequest.Hash_MD5)
}
inline ::std::string* PrepareDownloadRequest::mutable_hash_md5() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.PrepareDownloadRequest.Hash_MD5)
  return hash_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareDownloadRequest::release_hash_md5() {
  // @@protoc_insertion_point(field_release:FileCenter.PrepareDownloadRequest.Hash_MD5)
  
  return hash_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareDownloadRequest::set_allocated_hash_md5(::std::string* hash_md5) {
  if (hash_md5 != NULL) {
    
  } else {
    
  }
  hash_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_md5);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.PrepareDownloadRequest.Hash_MD5)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PrepareDownloadResponse

// string Token = 1;
inline void PrepareDownloadResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareDownloadResponse::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.PrepareDownloadResponse.Token)
  return token_.GetNoArena();
}
inline void PrepareDownloadResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.PrepareDownloadResponse.Token)
}
#if LANG_CXX11
inline void PrepareDownloadResponse::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.PrepareDownloadResponse.Token)
}
#endif
inline void PrepareDownloadResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.PrepareDownloadResponse.Token)
}
inline void PrepareDownloadResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.PrepareDownloadResponse.Token)
}
inline ::std::string* PrepareDownloadResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.PrepareDownloadResponse.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareDownloadResponse::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.PrepareDownloadResponse.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareDownloadResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.PrepareDownloadResponse.Token)
}

// int32 FileSize = 2;
inline void PrepareDownloadResponse::clear_filesize() {
  filesize_ = 0;
}
inline ::google::protobuf::int32 PrepareDownloadResponse::filesize() const {
  // @@protoc_insertion_point(field_get:FileCenter.PrepareDownloadResponse.FileSize)
  return filesize_;
}
inline void PrepareDownloadResponse::set_filesize(::google::protobuf::int32 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:FileCenter.PrepareDownloadResponse.FileSize)
}

// map<int32, string> SplitPackageInfos = 3;
inline int PrepareDownloadResponse::splitpackageinfos_size() const {
  return splitpackageinfos_.size();
}
inline void PrepareDownloadResponse::clear_splitpackageinfos() {
  splitpackageinfos_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
PrepareDownloadResponse::splitpackageinfos() const {
  // @@protoc_insertion_point(field_map:FileCenter.PrepareDownloadResponse.SplitPackageInfos)
  return splitpackageinfos_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
PrepareDownloadResponse::mutable_splitpackageinfos() {
  // @@protoc_insertion_point(field_mutable_map:FileCenter.PrepareDownloadResponse.SplitPackageInfos)
  return splitpackageinfos_.MutableMap();
}

// -------------------------------------------------------------------

// DownloadingRequest

// string Token = 1;
inline void DownloadingRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadingRequest::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.DownloadingRequest.Token)
  return token_.GetNoArena();
}
inline void DownloadingRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.DownloadingRequest.Token)
}
#if LANG_CXX11
inline void DownloadingRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.DownloadingRequest.Token)
}
#endif
inline void DownloadingRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.DownloadingRequest.Token)
}
inline void DownloadingRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.DownloadingRequest.Token)
}
inline ::std::string* DownloadingRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.DownloadingRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadingRequest::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.DownloadingRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadingRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.DownloadingRequest.Token)
}

// int32 SplitPackageID = 2;
inline void DownloadingRequest::clear_splitpackageid() {
  splitpackageid_ = 0;
}
inline ::google::protobuf::int32 DownloadingRequest::splitpackageid() const {
  // @@protoc_insertion_point(field_get:FileCenter.DownloadingRequest.SplitPackageID)
  return splitpackageid_;
}
inline void DownloadingRequest::set_splitpackageid(::google::protobuf::int32 value) {
  
  splitpackageid_ = value;
  // @@protoc_insertion_point(field_set:FileCenter.DownloadingRequest.SplitPackageID)
}

// -------------------------------------------------------------------

// DownloadingResponse

// string Hash_MD5 = 1;
inline void DownloadingResponse::clear_hash_md5() {
  hash_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadingResponse::hash_md5() const {
  // @@protoc_insertion_point(field_get:FileCenter.DownloadingResponse.Hash_MD5)
  return hash_md5_.GetNoArena();
}
inline void DownloadingResponse::set_hash_md5(const ::std::string& value) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.DownloadingResponse.Hash_MD5)
}
#if LANG_CXX11
inline void DownloadingResponse::set_hash_md5(::std::string&& value) {
  
  hash_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.DownloadingResponse.Hash_MD5)
}
#endif
inline void DownloadingResponse::set_hash_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.DownloadingResponse.Hash_MD5)
}
inline void DownloadingResponse::set_hash_md5(const char* value, size_t size) {
  
  hash_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.DownloadingResponse.Hash_MD5)
}
inline ::std::string* DownloadingResponse::mutable_hash_md5() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.DownloadingResponse.Hash_MD5)
  return hash_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadingResponse::release_hash_md5() {
  // @@protoc_insertion_point(field_release:FileCenter.DownloadingResponse.Hash_MD5)
  
  return hash_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadingResponse::set_allocated_hash_md5(::std::string* hash_md5) {
  if (hash_md5 != NULL) {
    
  } else {
    
  }
  hash_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_md5);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.DownloadingResponse.Hash_MD5)
}

// -------------------------------------------------------------------

// DownloadedRequest

// string Token = 1;
inline void DownloadedRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadedRequest::token() const {
  // @@protoc_insertion_point(field_get:FileCenter.DownloadedRequest.Token)
  return token_.GetNoArena();
}
inline void DownloadedRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileCenter.DownloadedRequest.Token)
}
#if LANG_CXX11
inline void DownloadedRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCenter.DownloadedRequest.Token)
}
#endif
inline void DownloadedRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCenter.DownloadedRequest.Token)
}
inline void DownloadedRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCenter.DownloadedRequest.Token)
}
inline ::std::string* DownloadedRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:FileCenter.DownloadedRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadedRequest::release_token() {
  // @@protoc_insertion_point(field_release:FileCenter.DownloadedRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadedRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:FileCenter.DownloadedRequest.Token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FileCenter

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FileCenter::Functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FileCenter::Functions>() {
  return ::FileCenter::Functions_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_filecenter_2eproto
