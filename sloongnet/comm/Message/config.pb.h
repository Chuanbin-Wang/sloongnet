// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_INCLUDED_config_2eproto
#define PROTOBUF_INCLUDED_config_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto 

namespace protobuf_config_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_config_2eproto
namespace ProtobufMessage {
class DATA_CONFIG;
class DATA_CONFIGDefaultTypeInternal;
extern DATA_CONFIGDefaultTypeInternal _DATA_CONFIG_default_instance_;
class DB_CONFIG;
class DB_CONFIGDefaultTypeInternal;
extern DB_CONFIGDefaultTypeInternal _DB_CONFIG_default_instance_;
class GLOBAL_CONFIG;
class GLOBAL_CONFIGDefaultTypeInternal;
extern GLOBAL_CONFIGDefaultTypeInternal _GLOBAL_CONFIG_default_instance_;
class MessagePackage;
class MessagePackageDefaultTypeInternal;
extern MessagePackageDefaultTypeInternal _MessagePackage_default_instance_;
class PROCESS_CONFIG;
class PROCESS_CONFIGDefaultTypeInternal;
extern PROCESS_CONFIGDefaultTypeInternal _PROCESS_CONFIG_default_instance_;
class PROXY_CONFIG;
class PROXY_CONFIGDefaultTypeInternal;
extern PROXY_CONFIGDefaultTypeInternal _PROXY_CONFIG_default_instance_;
}  // namespace ProtobufMessage
namespace google {
namespace protobuf {
template<> ::ProtobufMessage::DATA_CONFIG* Arena::CreateMaybeMessage<::ProtobufMessage::DATA_CONFIG>(Arena*);
template<> ::ProtobufMessage::DB_CONFIG* Arena::CreateMaybeMessage<::ProtobufMessage::DB_CONFIG>(Arena*);
template<> ::ProtobufMessage::GLOBAL_CONFIG* Arena::CreateMaybeMessage<::ProtobufMessage::GLOBAL_CONFIG>(Arena*);
template<> ::ProtobufMessage::MessagePackage* Arena::CreateMaybeMessage<::ProtobufMessage::MessagePackage>(Arena*);
template<> ::ProtobufMessage::PROCESS_CONFIG* Arena::CreateMaybeMessage<::ProtobufMessage::PROCESS_CONFIG>(Arena*);
template<> ::ProtobufMessage::PROXY_CONFIG* Arena::CreateMaybeMessage<::ProtobufMessage::PROXY_CONFIG>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProtobufMessage {

// ===================================================================

class MessagePackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.MessagePackage) */ {
 public:
  MessagePackage();
  virtual ~MessagePackage();

  MessagePackage(const MessagePackage& from);

  inline MessagePackage& operator=(const MessagePackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePackage(MessagePackage&& from) noexcept
    : MessagePackage() {
    *this = ::std::move(from);
  }

  inline MessagePackage& operator=(MessagePackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePackage* internal_default_instance() {
    return reinterpret_cast<const MessagePackage*>(
               &_MessagePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessagePackage* other);
  friend void swap(MessagePackage& a, MessagePackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePackage* New() const final {
    return CreateMaybeMessage<MessagePackage>(NULL);
  }

  MessagePackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessagePackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessagePackage& from);
  void MergeFrom(const MessagePackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagePackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CheckString = 3;
  void clear_checkstring();
  static const int kCheckStringFieldNumber = 3;
  const ::std::string& checkstring() const;
  void set_checkstring(const ::std::string& value);
  #if LANG_CXX11
  void set_checkstring(::std::string&& value);
  #endif
  void set_checkstring(const char* value);
  void set_checkstring(const char* value, size_t size);
  ::std::string* mutable_checkstring();
  ::std::string* release_checkstring();
  void set_allocated_checkstring(::std::string* checkstring);

  // string Context = 6;
  void clear_context();
  static const int kContextFieldNumber = 6;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // bytes ExtendData = 7;
  void clear_extenddata();
  static const int kExtendDataFieldNumber = 7;
  const ::std::string& extenddata() const;
  void set_extenddata(const ::std::string& value);
  #if LANG_CXX11
  void set_extenddata(::std::string&& value);
  #endif
  void set_extenddata(const char* value);
  void set_extenddata(const void* value, size_t size);
  ::std::string* mutable_extenddata();
  ::std::string* release_extenddata();
  void set_allocated_extenddata(::std::string* extenddata);

  // int32 Function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  ::google::protobuf::int32 function() const;
  void set_function(::google::protobuf::int32 value);

  // int32 SerailNumber = 2;
  void clear_serailnumber();
  static const int kSerailNumberFieldNumber = 2;
  ::google::protobuf::int32 serailnumber() const;
  void set_serailnumber(::google::protobuf::int32 value);

  // int32 Sender = 4;
  void clear_sender();
  static const int kSenderFieldNumber = 4;
  ::google::protobuf::int32 sender() const;
  void set_sender(::google::protobuf::int32 value);

  // int32 Receiver = 5;
  void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  ::google::protobuf::int32 receiver() const;
  void set_receiver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.MessagePackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checkstring_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr extenddata_;
  ::google::protobuf::int32 function_;
  ::google::protobuf::int32 serailnumber_;
  ::google::protobuf::int32 sender_;
  ::google::protobuf::int32 receiver_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GLOBAL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.GLOBAL_CONFIG) */ {
 public:
  GLOBAL_CONFIG();
  virtual ~GLOBAL_CONFIG();

  GLOBAL_CONFIG(const GLOBAL_CONFIG& from);

  inline GLOBAL_CONFIG& operator=(const GLOBAL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GLOBAL_CONFIG(GLOBAL_CONFIG&& from) noexcept
    : GLOBAL_CONFIG() {
    *this = ::std::move(from);
  }

  inline GLOBAL_CONFIG& operator=(GLOBAL_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLOBAL_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GLOBAL_CONFIG* internal_default_instance() {
    return reinterpret_cast<const GLOBAL_CONFIG*>(
               &_GLOBAL_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GLOBAL_CONFIG* other);
  friend void swap(GLOBAL_CONFIG& a, GLOBAL_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GLOBAL_CONFIG* New() const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(NULL);
  }

  GLOBAL_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GLOBAL_CONFIG& from);
  void MergeFrom(const GLOBAL_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GLOBAL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string LogPath = 2;
  void clear_logpath();
  static const int kLogPathFieldNumber = 2;
  const ::std::string& logpath() const;
  void set_logpath(const ::std::string& value);
  #if LANG_CXX11
  void set_logpath(::std::string&& value);
  #endif
  void set_logpath(const char* value);
  void set_logpath(const char* value, size_t size);
  ::std::string* mutable_logpath();
  ::std::string* release_logpath();
  void set_allocated_logpath(::std::string* logpath);

  // string CertFilePath = 7;
  void clear_certfilepath();
  static const int kCertFilePathFieldNumber = 7;
  const ::std::string& certfilepath() const;
  void set_certfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_certfilepath(::std::string&& value);
  #endif
  void set_certfilepath(const char* value);
  void set_certfilepath(const char* value, size_t size);
  ::std::string* mutable_certfilepath();
  ::std::string* release_certfilepath();
  void set_allocated_certfilepath(::std::string* certfilepath);

  // string KeyFilePath = 8;
  void clear_keyfilepath();
  static const int kKeyFilePathFieldNumber = 8;
  const ::std::string& keyfilepath() const;
  void set_keyfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_keyfilepath(::std::string&& value);
  #endif
  void set_keyfilepath(const char* value);
  void set_keyfilepath(const char* value, size_t size);
  ::std::string* mutable_keyfilepath();
  ::std::string* release_keyfilepath();
  void set_allocated_keyfilepath(::std::string* keyfilepath);

  // string CertPasswd = 9;
  void clear_certpasswd();
  static const int kCertPasswdFieldNumber = 9;
  const ::std::string& certpasswd() const;
  void set_certpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_certpasswd(::std::string&& value);
  #endif
  void set_certpasswd(const char* value);
  void set_certpasswd(const char* value, size_t size);
  ::std::string* mutable_certpasswd();
  ::std::string* release_certpasswd();
  void set_allocated_certpasswd(::std::string* certpasswd);

  // int32 ListenPort = 1;
  void clear_listenport();
  static const int kListenPortFieldNumber = 1;
  ::google::protobuf::int32 listenport() const;
  void set_listenport(::google::protobuf::int32 value);

  // int32 LogLevel = 3;
  void clear_loglevel();
  static const int kLogLevelFieldNumber = 3;
  ::google::protobuf::int32 loglevel() const;
  void set_loglevel(::google::protobuf::int32 value);

  // int32 MQThreadQuantity = 5;
  void clear_mqthreadquantity();
  static const int kMQThreadQuantityFieldNumber = 5;
  ::google::protobuf::int32 mqthreadquantity() const;
  void set_mqthreadquantity(::google::protobuf::int32 value);

  // bool DebugMode = 4;
  void clear_debugmode();
  static const int kDebugModeFieldNumber = 4;
  bool debugmode() const;
  void set_debugmode(bool value);

  // bool EnableSSL = 6;
  void clear_enablessl();
  static const int kEnableSSLFieldNumber = 6;
  bool enablessl() const;
  void set_enablessl(bool value);

  // int32 ConnectTime = 10;
  void clear_connecttime();
  static const int kConnectTimeFieldNumber = 10;
  ::google::protobuf::int32 connecttime() const;
  void set_connecttime(::google::protobuf::int32 value);

  // int32 ReceiveTime = 11;
  void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 11;
  ::google::protobuf::int32 receivetime() const;
  void set_receivetime(::google::protobuf::int32 value);

  // int32 EPollThreadQuantity = 12;
  void clear_epollthreadquantity();
  static const int kEPollThreadQuantityFieldNumber = 12;
  ::google::protobuf::int32 epollthreadquantity() const;
  void set_epollthreadquantity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.GLOBAL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr logpath_;
  ::google::protobuf::internal::ArenaStringPtr certfilepath_;
  ::google::protobuf::internal::ArenaStringPtr keyfilepath_;
  ::google::protobuf::internal::ArenaStringPtr certpasswd_;
  ::google::protobuf::int32 listenport_;
  ::google::protobuf::int32 loglevel_;
  ::google::protobuf::int32 mqthreadquantity_;
  bool debugmode_;
  bool enablessl_;
  ::google::protobuf::int32 connecttime_;
  ::google::protobuf::int32 receivetime_;
  ::google::protobuf::int32 epollthreadquantity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DB_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.DB_CONFIG) */ {
 public:
  DB_CONFIG();
  virtual ~DB_CONFIG();

  DB_CONFIG(const DB_CONFIG& from);

  inline DB_CONFIG& operator=(const DB_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DB_CONFIG(DB_CONFIG&& from) noexcept
    : DB_CONFIG() {
    *this = ::std::move(from);
  }

  inline DB_CONFIG& operator=(DB_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_CONFIG* internal_default_instance() {
    return reinterpret_cast<const DB_CONFIG*>(
               &_DB_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DB_CONFIG* other);
  friend void swap(DB_CONFIG& a, DB_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DB_CONFIG* New() const final {
    return CreateMaybeMessage<DB_CONFIG>(NULL);
  }

  DB_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DB_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DB_CONFIG& from);
  void MergeFrom(const DB_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ServerAddress = 1;
  void clear_serveraddress();
  static const int kServerAddressFieldNumber = 1;
  const ::std::string& serveraddress() const;
  void set_serveraddress(const ::std::string& value);
  #if LANG_CXX11
  void set_serveraddress(::std::string&& value);
  #endif
  void set_serveraddress(const char* value);
  void set_serveraddress(const char* value, size_t size);
  ::std::string* mutable_serveraddress();
  ::std::string* release_serveraddress();
  void set_allocated_serveraddress(::std::string* serveraddress);

  // string User = 3;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string Passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string Database = 5;
  void clear_database();
  static const int kDatabaseFieldNumber = 5;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 6;
  bool has_serverconfig() const;
  void clear_serverconfig();
  static const int kServerConfigFieldNumber = 6;
  private:
  const ::ProtobufMessage::GLOBAL_CONFIG& _internal_serverconfig() const;
  public:
  const ::ProtobufMessage::GLOBAL_CONFIG& serverconfig() const;
  ::ProtobufMessage::GLOBAL_CONFIG* release_serverconfig();
  ::ProtobufMessage::GLOBAL_CONFIG* mutable_serverconfig();
  void set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig);

  // int32 ServerPort = 2;
  void clear_serverport();
  static const int kServerPortFieldNumber = 2;
  ::google::protobuf::int32 serverport() const;
  void set_serverport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.DB_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serveraddress_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  ::ProtobufMessage::GLOBAL_CONFIG* serverconfig_;
  ::google::protobuf::int32 serverport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DATA_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.DATA_CONFIG) */ {
 public:
  DATA_CONFIG();
  virtual ~DATA_CONFIG();

  DATA_CONFIG(const DATA_CONFIG& from);

  inline DATA_CONFIG& operator=(const DATA_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DATA_CONFIG(DATA_CONFIG&& from) noexcept
    : DATA_CONFIG() {
    *this = ::std::move(from);
  }

  inline DATA_CONFIG& operator=(DATA_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DATA_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DATA_CONFIG* internal_default_instance() {
    return reinterpret_cast<const DATA_CONFIG*>(
               &_DATA_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DATA_CONFIG* other);
  friend void swap(DATA_CONFIG& a, DATA_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DATA_CONFIG* New() const final {
    return CreateMaybeMessage<DATA_CONFIG>(NULL);
  }

  DATA_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DATA_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DATA_CONFIG& from);
  void MergeFrom(const DATA_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATA_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 3;
  bool has_serverconfig() const;
  void clear_serverconfig();
  static const int kServerConfigFieldNumber = 3;
  private:
  const ::ProtobufMessage::GLOBAL_CONFIG& _internal_serverconfig() const;
  public:
  const ::ProtobufMessage::GLOBAL_CONFIG& serverconfig() const;
  ::ProtobufMessage::GLOBAL_CONFIG* release_serverconfig();
  ::ProtobufMessage::GLOBAL_CONFIG* mutable_serverconfig();
  void set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig);

  // int32 DataReceivePort = 1;
  void clear_datareceiveport();
  static const int kDataReceivePortFieldNumber = 1;
  ::google::protobuf::int32 datareceiveport() const;
  void set_datareceiveport(::google::protobuf::int32 value);

  // int32 DataRecvTime = 2;
  void clear_datarecvtime();
  static const int kDataRecvTimeFieldNumber = 2;
  ::google::protobuf::int32 datarecvtime() const;
  void set_datarecvtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.DATA_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ProtobufMessage::GLOBAL_CONFIG* serverconfig_;
  ::google::protobuf::int32 datareceiveport_;
  ::google::protobuf::int32 datarecvtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PROXY_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.PROXY_CONFIG) */ {
 public:
  PROXY_CONFIG();
  virtual ~PROXY_CONFIG();

  PROXY_CONFIG(const PROXY_CONFIG& from);

  inline PROXY_CONFIG& operator=(const PROXY_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PROXY_CONFIG(PROXY_CONFIG&& from) noexcept
    : PROXY_CONFIG() {
    *this = ::std::move(from);
  }

  inline PROXY_CONFIG& operator=(PROXY_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PROXY_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROXY_CONFIG* internal_default_instance() {
    return reinterpret_cast<const PROXY_CONFIG*>(
               &_PROXY_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PROXY_CONFIG* other);
  friend void swap(PROXY_CONFIG& a, PROXY_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PROXY_CONFIG* New() const final {
    return CreateMaybeMessage<PROXY_CONFIG>(NULL);
  }

  PROXY_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PROXY_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PROXY_CONFIG& from);
  void MergeFrom(const PROXY_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROXY_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ClientCheckKey = 2;
  void clear_clientcheckkey();
  static const int kClientCheckKeyFieldNumber = 2;
  const ::std::string& clientcheckkey() const;
  void set_clientcheckkey(const ::std::string& value);
  #if LANG_CXX11
  void set_clientcheckkey(::std::string&& value);
  #endif
  void set_clientcheckkey(const char* value);
  void set_clientcheckkey(const char* value, size_t size);
  ::std::string* mutable_clientcheckkey();
  ::std::string* release_clientcheckkey();
  void set_allocated_clientcheckkey(::std::string* clientcheckkey);

  // .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 5;
  bool has_serverconfig() const;
  void clear_serverconfig();
  static const int kServerConfigFieldNumber = 5;
  private:
  const ::ProtobufMessage::GLOBAL_CONFIG& _internal_serverconfig() const;
  public:
  const ::ProtobufMessage::GLOBAL_CONFIG& serverconfig() const;
  ::ProtobufMessage::GLOBAL_CONFIG* release_serverconfig();
  ::ProtobufMessage::GLOBAL_CONFIG* mutable_serverconfig();
  void set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig);

  // int32 ClientCheckTime = 1;
  void clear_clientchecktime();
  static const int kClientCheckTimeFieldNumber = 1;
  ::google::protobuf::int32 clientchecktime() const;
  void set_clientchecktime(::google::protobuf::int32 value);

  // int32 TimeoutCheckInterval = 3;
  void clear_timeoutcheckinterval();
  static const int kTimeoutCheckIntervalFieldNumber = 3;
  ::google::protobuf::int32 timeoutcheckinterval() const;
  void set_timeoutcheckinterval(::google::protobuf::int32 value);

  // int32 TimeoutTime = 4;
  void clear_timeouttime();
  static const int kTimeoutTimeFieldNumber = 4;
  ::google::protobuf::int32 timeouttime() const;
  void set_timeouttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.PROXY_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientcheckkey_;
  ::ProtobufMessage::GLOBAL_CONFIG* serverconfig_;
  ::google::protobuf::int32 clientchecktime_;
  ::google::protobuf::int32 timeoutcheckinterval_;
  ::google::protobuf::int32 timeouttime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PROCESS_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtobufMessage.PROCESS_CONFIG) */ {
 public:
  PROCESS_CONFIG();
  virtual ~PROCESS_CONFIG();

  PROCESS_CONFIG(const PROCESS_CONFIG& from);

  inline PROCESS_CONFIG& operator=(const PROCESS_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PROCESS_CONFIG(PROCESS_CONFIG&& from) noexcept
    : PROCESS_CONFIG() {
    *this = ::std::move(from);
  }

  inline PROCESS_CONFIG& operator=(PROCESS_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PROCESS_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROCESS_CONFIG* internal_default_instance() {
    return reinterpret_cast<const PROCESS_CONFIG*>(
               &_PROCESS_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PROCESS_CONFIG* other);
  friend void swap(PROCESS_CONFIG& a, PROCESS_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PROCESS_CONFIG* New() const final {
    return CreateMaybeMessage<PROCESS_CONFIG>(NULL);
  }

  PROCESS_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PROCESS_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PROCESS_CONFIG& from);
  void MergeFrom(const PROCESS_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROCESS_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string LuaContextQuantity = 1;
  void clear_luacontextquantity();
  static const int kLuaContextQuantityFieldNumber = 1;
  const ::std::string& luacontextquantity() const;
  void set_luacontextquantity(const ::std::string& value);
  #if LANG_CXX11
  void set_luacontextquantity(::std::string&& value);
  #endif
  void set_luacontextquantity(const char* value);
  void set_luacontextquantity(const char* value, size_t size);
  ::std::string* mutable_luacontextquantity();
  ::std::string* release_luacontextquantity();
  void set_allocated_luacontextquantity(::std::string* luacontextquantity);

  // string LuaScriptFolder = 2;
  void clear_luascriptfolder();
  static const int kLuaScriptFolderFieldNumber = 2;
  const ::std::string& luascriptfolder() const;
  void set_luascriptfolder(const ::std::string& value);
  #if LANG_CXX11
  void set_luascriptfolder(::std::string&& value);
  #endif
  void set_luascriptfolder(const char* value);
  void set_luascriptfolder(const char* value, size_t size);
  ::std::string* mutable_luascriptfolder();
  ::std::string* release_luascriptfolder();
  void set_allocated_luascriptfolder(::std::string* luascriptfolder);

  // string LuaEntryFile = 3;
  void clear_luaentryfile();
  static const int kLuaEntryFileFieldNumber = 3;
  const ::std::string& luaentryfile() const;
  void set_luaentryfile(const ::std::string& value);
  #if LANG_CXX11
  void set_luaentryfile(::std::string&& value);
  #endif
  void set_luaentryfile(const char* value);
  void set_luaentryfile(const char* value, size_t size);
  ::std::string* mutable_luaentryfile();
  ::std::string* release_luaentryfile();
  void set_allocated_luaentryfile(::std::string* luaentryfile);

  // string LuaEntryFunction = 4;
  void clear_luaentryfunction();
  static const int kLuaEntryFunctionFieldNumber = 4;
  const ::std::string& luaentryfunction() const;
  void set_luaentryfunction(const ::std::string& value);
  #if LANG_CXX11
  void set_luaentryfunction(::std::string&& value);
  #endif
  void set_luaentryfunction(const char* value);
  void set_luaentryfunction(const char* value, size_t size);
  ::std::string* mutable_luaentryfunction();
  ::std::string* release_luaentryfunction();
  void set_allocated_luaentryfunction(::std::string* luaentryfunction);

  // string LuaProcessFunction = 5;
  void clear_luaprocessfunction();
  static const int kLuaProcessFunctionFieldNumber = 5;
  const ::std::string& luaprocessfunction() const;
  void set_luaprocessfunction(const ::std::string& value);
  #if LANG_CXX11
  void set_luaprocessfunction(::std::string&& value);
  #endif
  void set_luaprocessfunction(const char* value);
  void set_luaprocessfunction(const char* value, size_t size);
  ::std::string* mutable_luaprocessfunction();
  ::std::string* release_luaprocessfunction();
  void set_allocated_luaprocessfunction(::std::string* luaprocessfunction);

  // string LuaSocketCloseFunction = 6;
  void clear_luasocketclosefunction();
  static const int kLuaSocketCloseFunctionFieldNumber = 6;
  const ::std::string& luasocketclosefunction() const;
  void set_luasocketclosefunction(const ::std::string& value);
  #if LANG_CXX11
  void set_luasocketclosefunction(::std::string&& value);
  #endif
  void set_luasocketclosefunction(const char* value);
  void set_luasocketclosefunction(const char* value, size_t size);
  ::std::string* mutable_luasocketclosefunction();
  ::std::string* release_luasocketclosefunction();
  void set_allocated_luasocketclosefunction(::std::string* luasocketclosefunction);

  // .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 7;
  bool has_serverconfig() const;
  void clear_serverconfig();
  static const int kServerConfigFieldNumber = 7;
  private:
  const ::ProtobufMessage::GLOBAL_CONFIG& _internal_serverconfig() const;
  public:
  const ::ProtobufMessage::GLOBAL_CONFIG& serverconfig() const;
  ::ProtobufMessage::GLOBAL_CONFIG* release_serverconfig();
  ::ProtobufMessage::GLOBAL_CONFIG* mutable_serverconfig();
  void set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig);

  // @@protoc_insertion_point(class_scope:ProtobufMessage.PROCESS_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr luacontextquantity_;
  ::google::protobuf::internal::ArenaStringPtr luascriptfolder_;
  ::google::protobuf::internal::ArenaStringPtr luaentryfile_;
  ::google::protobuf::internal::ArenaStringPtr luaentryfunction_;
  ::google::protobuf::internal::ArenaStringPtr luaprocessfunction_;
  ::google::protobuf::internal::ArenaStringPtr luasocketclosefunction_;
  ::ProtobufMessage::GLOBAL_CONFIG* serverconfig_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessagePackage

// int32 Function = 1;
inline void MessagePackage::clear_function() {
  function_ = 0;
}
inline ::google::protobuf::int32 MessagePackage::function() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.Function)
  return function_;
}
inline void MessagePackage::set_function(::google::protobuf::int32 value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.Function)
}

// int32 SerailNumber = 2;
inline void MessagePackage::clear_serailnumber() {
  serailnumber_ = 0;
}
inline ::google::protobuf::int32 MessagePackage::serailnumber() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.SerailNumber)
  return serailnumber_;
}
inline void MessagePackage::set_serailnumber(::google::protobuf::int32 value) {
  
  serailnumber_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.SerailNumber)
}

// string CheckString = 3;
inline void MessagePackage::clear_checkstring() {
  checkstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePackage::checkstring() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.CheckString)
  return checkstring_.GetNoArena();
}
inline void MessagePackage::set_checkstring(const ::std::string& value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.CheckString)
}
#if LANG_CXX11
inline void MessagePackage::set_checkstring(::std::string&& value) {
  
  checkstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.MessagePackage.CheckString)
}
#endif
inline void MessagePackage::set_checkstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.MessagePackage.CheckString)
}
inline void MessagePackage::set_checkstring(const char* value, size_t size) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.MessagePackage.CheckString)
}
inline ::std::string* MessagePackage::mutable_checkstring() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.MessagePackage.CheckString)
  return checkstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePackage::release_checkstring() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.MessagePackage.CheckString)
  
  return checkstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePackage::set_allocated_checkstring(::std::string* checkstring) {
  if (checkstring != NULL) {
    
  } else {
    
  }
  checkstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkstring);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.MessagePackage.CheckString)
}

// int32 Sender = 4;
inline void MessagePackage::clear_sender() {
  sender_ = 0;
}
inline ::google::protobuf::int32 MessagePackage::sender() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.Sender)
  return sender_;
}
inline void MessagePackage::set_sender(::google::protobuf::int32 value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.Sender)
}

// int32 Receiver = 5;
inline void MessagePackage::clear_receiver() {
  receiver_ = 0;
}
inline ::google::protobuf::int32 MessagePackage::receiver() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.Receiver)
  return receiver_;
}
inline void MessagePackage::set_receiver(::google::protobuf::int32 value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.Receiver)
}

// string Context = 6;
inline void MessagePackage::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePackage::context() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.Context)
  return context_.GetNoArena();
}
inline void MessagePackage::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.Context)
}
#if LANG_CXX11
inline void MessagePackage::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.MessagePackage.Context)
}
#endif
inline void MessagePackage::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.MessagePackage.Context)
}
inline void MessagePackage::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.MessagePackage.Context)
}
inline ::std::string* MessagePackage::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.MessagePackage.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePackage::release_context() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.MessagePackage.Context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePackage::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.MessagePackage.Context)
}

// bytes ExtendData = 7;
inline void MessagePackage::clear_extenddata() {
  extenddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePackage::extenddata() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.MessagePackage.ExtendData)
  return extenddata_.GetNoArena();
}
inline void MessagePackage::set_extenddata(const ::std::string& value) {
  
  extenddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.MessagePackage.ExtendData)
}
#if LANG_CXX11
inline void MessagePackage::set_extenddata(::std::string&& value) {
  
  extenddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.MessagePackage.ExtendData)
}
#endif
inline void MessagePackage::set_extenddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extenddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.MessagePackage.ExtendData)
}
inline void MessagePackage::set_extenddata(const void* value, size_t size) {
  
  extenddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.MessagePackage.ExtendData)
}
inline ::std::string* MessagePackage::mutable_extenddata() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.MessagePackage.ExtendData)
  return extenddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePackage::release_extenddata() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.MessagePackage.ExtendData)
  
  return extenddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePackage::set_allocated_extenddata(::std::string* extenddata) {
  if (extenddata != NULL) {
    
  } else {
    
  }
  extenddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extenddata);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.MessagePackage.ExtendData)
}

// -------------------------------------------------------------------

// GLOBAL_CONFIG

// int32 ListenPort = 1;
inline void GLOBAL_CONFIG::clear_listenport() {
  listenport_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::listenport() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.ListenPort)
  return listenport_;
}
inline void GLOBAL_CONFIG::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.ListenPort)
}

// string LogPath = 2;
inline void GLOBAL_CONFIG::clear_logpath() {
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::logpath() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.LogPath)
  return logpath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_logpath(const ::std::string& value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.LogPath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_logpath(::std::string&& value) {
  
  logpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.GLOBAL_CONFIG.LogPath)
}
#endif
inline void GLOBAL_CONFIG::set_logpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.GLOBAL_CONFIG.LogPath)
}
inline void GLOBAL_CONFIG::set_logpath(const char* value, size_t size) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.GLOBAL_CONFIG.LogPath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_logpath() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.GLOBAL_CONFIG.LogPath)
  return logpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_logpath() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.GLOBAL_CONFIG.LogPath)
  
  return logpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_logpath(::std::string* logpath) {
  if (logpath != NULL) {
    
  } else {
    
  }
  logpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logpath);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.GLOBAL_CONFIG.LogPath)
}

// int32 LogLevel = 3;
inline void GLOBAL_CONFIG::clear_loglevel() {
  loglevel_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::loglevel() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.LogLevel)
  return loglevel_;
}
inline void GLOBAL_CONFIG::set_loglevel(::google::protobuf::int32 value) {
  
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.LogLevel)
}

// bool DebugMode = 4;
inline void GLOBAL_CONFIG::clear_debugmode() {
  debugmode_ = false;
}
inline bool GLOBAL_CONFIG::debugmode() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.DebugMode)
  return debugmode_;
}
inline void GLOBAL_CONFIG::set_debugmode(bool value) {
  
  debugmode_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.DebugMode)
}

// int32 MQThreadQuantity = 5;
inline void GLOBAL_CONFIG::clear_mqthreadquantity() {
  mqthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::mqthreadquantity() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.MQThreadQuantity)
  return mqthreadquantity_;
}
inline void GLOBAL_CONFIG::set_mqthreadquantity(::google::protobuf::int32 value) {
  
  mqthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.MQThreadQuantity)
}

// bool EnableSSL = 6;
inline void GLOBAL_CONFIG::clear_enablessl() {
  enablessl_ = false;
}
inline bool GLOBAL_CONFIG::enablessl() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.EnableSSL)
  return enablessl_;
}
inline void GLOBAL_CONFIG::set_enablessl(bool value) {
  
  enablessl_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.EnableSSL)
}

// string CertFilePath = 7;
inline void GLOBAL_CONFIG::clear_certfilepath() {
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certfilepath() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certfilepath(const ::std::string& value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certfilepath(::std::string&& value) {
  
  certfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_certfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
}
inline void GLOBAL_CONFIG::set_certfilepath(const char* value, size_t size) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certfilepath() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certfilepath() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
  
  return certfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certfilepath(::std::string* certfilepath) {
  if (certfilepath != NULL) {
    
  } else {
    
  }
  certfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certfilepath);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.GLOBAL_CONFIG.CertFilePath)
}

// string KeyFilePath = 8;
inline void GLOBAL_CONFIG::clear_keyfilepath() {
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::keyfilepath() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_keyfilepath(const ::std::string& value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_keyfilepath(::std::string&& value) {
  
  keyfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
}
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value, size_t size) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_keyfilepath() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_keyfilepath() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
  
  return keyfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_keyfilepath(::std::string* keyfilepath) {
  if (keyfilepath != NULL) {
    
  } else {
    
  }
  keyfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfilepath);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.GLOBAL_CONFIG.KeyFilePath)
}

// string CertPasswd = 9;
inline void GLOBAL_CONFIG::clear_certpasswd() {
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certpasswd() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certpasswd(const ::std::string& value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certpasswd(::std::string&& value) {
  
  certpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
}
#endif
inline void GLOBAL_CONFIG::set_certpasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
}
inline void GLOBAL_CONFIG::set_certpasswd(const char* value, size_t size) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certpasswd() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certpasswd() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
  
  return certpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certpasswd(::std::string* certpasswd) {
  if (certpasswd != NULL) {
    
  } else {
    
  }
  certpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certpasswd);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.GLOBAL_CONFIG.CertPasswd)
}

// int32 ConnectTime = 10;
inline void GLOBAL_CONFIG::clear_connecttime() {
  connecttime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::connecttime() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.ConnectTime)
  return connecttime_;
}
inline void GLOBAL_CONFIG::set_connecttime(::google::protobuf::int32 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.ConnectTime)
}

// int32 ReceiveTime = 11;
inline void GLOBAL_CONFIG::clear_receivetime() {
  receivetime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::receivetime() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.ReceiveTime)
  return receivetime_;
}
inline void GLOBAL_CONFIG::set_receivetime(::google::protobuf::int32 value) {
  
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.ReceiveTime)
}

// int32 EPollThreadQuantity = 12;
inline void GLOBAL_CONFIG::clear_epollthreadquantity() {
  epollthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::epollthreadquantity() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.GLOBAL_CONFIG.EPollThreadQuantity)
  return epollthreadquantity_;
}
inline void GLOBAL_CONFIG::set_epollthreadquantity(::google::protobuf::int32 value) {
  
  epollthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.GLOBAL_CONFIG.EPollThreadQuantity)
}

// -------------------------------------------------------------------

// DB_CONFIG

// string ServerAddress = 1;
inline void DB_CONFIG::clear_serveraddress() {
  serveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::serveraddress() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.ServerAddress)
  return serveraddress_.GetNoArena();
}
inline void DB_CONFIG::set_serveraddress(const ::std::string& value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.DB_CONFIG.ServerAddress)
}
#if LANG_CXX11
inline void DB_CONFIG::set_serveraddress(::std::string&& value) {
  
  serveraddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.DB_CONFIG.ServerAddress)
}
#endif
inline void DB_CONFIG::set_serveraddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.DB_CONFIG.ServerAddress)
}
inline void DB_CONFIG::set_serveraddress(const char* value, size_t size) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.DB_CONFIG.ServerAddress)
}
inline ::std::string* DB_CONFIG::mutable_serveraddress() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DB_CONFIG.ServerAddress)
  return serveraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_serveraddress() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DB_CONFIG.ServerAddress)
  
  return serveraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_serveraddress(::std::string* serveraddress) {
  if (serveraddress != NULL) {
    
  } else {
    
  }
  serveraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serveraddress);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DB_CONFIG.ServerAddress)
}

// int32 ServerPort = 2;
inline void DB_CONFIG::clear_serverport() {
  serverport_ = 0;
}
inline ::google::protobuf::int32 DB_CONFIG::serverport() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.ServerPort)
  return serverport_;
}
inline void DB_CONFIG::set_serverport(::google::protobuf::int32 value) {
  
  serverport_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.DB_CONFIG.ServerPort)
}

// string User = 3;
inline void DB_CONFIG::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::user() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.User)
  return user_.GetNoArena();
}
inline void DB_CONFIG::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.DB_CONFIG.User)
}
#if LANG_CXX11
inline void DB_CONFIG::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.DB_CONFIG.User)
}
#endif
inline void DB_CONFIG::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.DB_CONFIG.User)
}
inline void DB_CONFIG::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.DB_CONFIG.User)
}
inline ::std::string* DB_CONFIG::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DB_CONFIG.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_user() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DB_CONFIG.User)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DB_CONFIG.User)
}

// string Passwd = 4;
inline void DB_CONFIG::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::passwd() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.Passwd)
  return passwd_.GetNoArena();
}
inline void DB_CONFIG::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.DB_CONFIG.Passwd)
}
#if LANG_CXX11
inline void DB_CONFIG::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.DB_CONFIG.Passwd)
}
#endif
inline void DB_CONFIG::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.DB_CONFIG.Passwd)
}
inline void DB_CONFIG::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.DB_CONFIG.Passwd)
}
inline ::std::string* DB_CONFIG::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DB_CONFIG.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_passwd() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DB_CONFIG.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DB_CONFIG.Passwd)
}

// string Database = 5;
inline void DB_CONFIG::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::database() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.Database)
  return database_.GetNoArena();
}
inline void DB_CONFIG::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.DB_CONFIG.Database)
}
#if LANG_CXX11
inline void DB_CONFIG::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.DB_CONFIG.Database)
}
#endif
inline void DB_CONFIG::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.DB_CONFIG.Database)
}
inline void DB_CONFIG::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.DB_CONFIG.Database)
}
inline ::std::string* DB_CONFIG::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DB_CONFIG.Database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_database() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DB_CONFIG.Database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DB_CONFIG.Database)
}

// .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 6;
inline bool DB_CONFIG::has_serverconfig() const {
  return this != internal_default_instance() && serverconfig_ != NULL;
}
inline void DB_CONFIG::clear_serverconfig() {
  if (GetArenaNoVirtual() == NULL && serverconfig_ != NULL) {
    delete serverconfig_;
  }
  serverconfig_ = NULL;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& DB_CONFIG::_internal_serverconfig() const {
  return *serverconfig_;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& DB_CONFIG::serverconfig() const {
  const ::ProtobufMessage::GLOBAL_CONFIG* p = serverconfig_;
  // @@protoc_insertion_point(field_get:ProtobufMessage.DB_CONFIG.ServerConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtobufMessage::GLOBAL_CONFIG*>(
      &::ProtobufMessage::_GLOBAL_CONFIG_default_instance_);
}
inline ::ProtobufMessage::GLOBAL_CONFIG* DB_CONFIG::release_serverconfig() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DB_CONFIG.ServerConfig)
  
  ::ProtobufMessage::GLOBAL_CONFIG* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
inline ::ProtobufMessage::GLOBAL_CONFIG* DB_CONFIG::mutable_serverconfig() {
  
  if (serverconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtobufMessage::GLOBAL_CONFIG>(GetArenaNoVirtual());
    serverconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DB_CONFIG.ServerConfig)
  return serverconfig_;
}
inline void DB_CONFIG::set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serverconfig_;
  }
  if (serverconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serverconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serverconfig, submessage_arena);
    }
    
  } else {
    
  }
  serverconfig_ = serverconfig;
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DB_CONFIG.ServerConfig)
}

// -------------------------------------------------------------------

// DATA_CONFIG

// int32 DataReceivePort = 1;
inline void DATA_CONFIG::clear_datareceiveport() {
  datareceiveport_ = 0;
}
inline ::google::protobuf::int32 DATA_CONFIG::datareceiveport() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DATA_CONFIG.DataReceivePort)
  return datareceiveport_;
}
inline void DATA_CONFIG::set_datareceiveport(::google::protobuf::int32 value) {
  
  datareceiveport_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.DATA_CONFIG.DataReceivePort)
}

// int32 DataRecvTime = 2;
inline void DATA_CONFIG::clear_datarecvtime() {
  datarecvtime_ = 0;
}
inline ::google::protobuf::int32 DATA_CONFIG::datarecvtime() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.DATA_CONFIG.DataRecvTime)
  return datarecvtime_;
}
inline void DATA_CONFIG::set_datarecvtime(::google::protobuf::int32 value) {
  
  datarecvtime_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.DATA_CONFIG.DataRecvTime)
}

// .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 3;
inline bool DATA_CONFIG::has_serverconfig() const {
  return this != internal_default_instance() && serverconfig_ != NULL;
}
inline void DATA_CONFIG::clear_serverconfig() {
  if (GetArenaNoVirtual() == NULL && serverconfig_ != NULL) {
    delete serverconfig_;
  }
  serverconfig_ = NULL;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& DATA_CONFIG::_internal_serverconfig() const {
  return *serverconfig_;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& DATA_CONFIG::serverconfig() const {
  const ::ProtobufMessage::GLOBAL_CONFIG* p = serverconfig_;
  // @@protoc_insertion_point(field_get:ProtobufMessage.DATA_CONFIG.ServerConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtobufMessage::GLOBAL_CONFIG*>(
      &::ProtobufMessage::_GLOBAL_CONFIG_default_instance_);
}
inline ::ProtobufMessage::GLOBAL_CONFIG* DATA_CONFIG::release_serverconfig() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.DATA_CONFIG.ServerConfig)
  
  ::ProtobufMessage::GLOBAL_CONFIG* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
inline ::ProtobufMessage::GLOBAL_CONFIG* DATA_CONFIG::mutable_serverconfig() {
  
  if (serverconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtobufMessage::GLOBAL_CONFIG>(GetArenaNoVirtual());
    serverconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.DATA_CONFIG.ServerConfig)
  return serverconfig_;
}
inline void DATA_CONFIG::set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serverconfig_;
  }
  if (serverconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serverconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serverconfig, submessage_arena);
    }
    
  } else {
    
  }
  serverconfig_ = serverconfig;
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.DATA_CONFIG.ServerConfig)
}

// -------------------------------------------------------------------

// PROXY_CONFIG

// int32 ClientCheckTime = 1;
inline void PROXY_CONFIG::clear_clientchecktime() {
  clientchecktime_ = 0;
}
inline ::google::protobuf::int32 PROXY_CONFIG::clientchecktime() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROXY_CONFIG.ClientCheckTime)
  return clientchecktime_;
}
inline void PROXY_CONFIG::set_clientchecktime(::google::protobuf::int32 value) {
  
  clientchecktime_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROXY_CONFIG.ClientCheckTime)
}

// string ClientCheckKey = 2;
inline void PROXY_CONFIG::clear_clientcheckkey() {
  clientcheckkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROXY_CONFIG::clientcheckkey() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
  return clientcheckkey_.GetNoArena();
}
inline void PROXY_CONFIG::set_clientcheckkey(const ::std::string& value) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
}
#if LANG_CXX11
inline void PROXY_CONFIG::set_clientcheckkey(::std::string&& value) {
  
  clientcheckkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
}
#endif
inline void PROXY_CONFIG::set_clientcheckkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
}
inline void PROXY_CONFIG::set_clientcheckkey(const char* value, size_t size) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
}
inline ::std::string* PROXY_CONFIG::mutable_clientcheckkey() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
  return clientcheckkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROXY_CONFIG::release_clientcheckkey() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
  
  return clientcheckkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROXY_CONFIG::set_allocated_clientcheckkey(::std::string* clientcheckkey) {
  if (clientcheckkey != NULL) {
    
  } else {
    
  }
  clientcheckkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientcheckkey);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROXY_CONFIG.ClientCheckKey)
}

// int32 TimeoutCheckInterval = 3;
inline void PROXY_CONFIG::clear_timeoutcheckinterval() {
  timeoutcheckinterval_ = 0;
}
inline ::google::protobuf::int32 PROXY_CONFIG::timeoutcheckinterval() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROXY_CONFIG.TimeoutCheckInterval)
  return timeoutcheckinterval_;
}
inline void PROXY_CONFIG::set_timeoutcheckinterval(::google::protobuf::int32 value) {
  
  timeoutcheckinterval_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROXY_CONFIG.TimeoutCheckInterval)
}

// int32 TimeoutTime = 4;
inline void PROXY_CONFIG::clear_timeouttime() {
  timeouttime_ = 0;
}
inline ::google::protobuf::int32 PROXY_CONFIG::timeouttime() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROXY_CONFIG.TimeoutTime)
  return timeouttime_;
}
inline void PROXY_CONFIG::set_timeouttime(::google::protobuf::int32 value) {
  
  timeouttime_ = value;
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROXY_CONFIG.TimeoutTime)
}

// .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 5;
inline bool PROXY_CONFIG::has_serverconfig() const {
  return this != internal_default_instance() && serverconfig_ != NULL;
}
inline void PROXY_CONFIG::clear_serverconfig() {
  if (GetArenaNoVirtual() == NULL && serverconfig_ != NULL) {
    delete serverconfig_;
  }
  serverconfig_ = NULL;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& PROXY_CONFIG::_internal_serverconfig() const {
  return *serverconfig_;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& PROXY_CONFIG::serverconfig() const {
  const ::ProtobufMessage::GLOBAL_CONFIG* p = serverconfig_;
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROXY_CONFIG.ServerConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtobufMessage::GLOBAL_CONFIG*>(
      &::ProtobufMessage::_GLOBAL_CONFIG_default_instance_);
}
inline ::ProtobufMessage::GLOBAL_CONFIG* PROXY_CONFIG::release_serverconfig() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROXY_CONFIG.ServerConfig)
  
  ::ProtobufMessage::GLOBAL_CONFIG* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
inline ::ProtobufMessage::GLOBAL_CONFIG* PROXY_CONFIG::mutable_serverconfig() {
  
  if (serverconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtobufMessage::GLOBAL_CONFIG>(GetArenaNoVirtual());
    serverconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROXY_CONFIG.ServerConfig)
  return serverconfig_;
}
inline void PROXY_CONFIG::set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serverconfig_;
  }
  if (serverconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serverconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serverconfig, submessage_arena);
    }
    
  } else {
    
  }
  serverconfig_ = serverconfig;
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROXY_CONFIG.ServerConfig)
}

// -------------------------------------------------------------------

// PROCESS_CONFIG

// string LuaContextQuantity = 1;
inline void PROCESS_CONFIG::clear_luacontextquantity() {
  luacontextquantity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luacontextquantity() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
  return luacontextquantity_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luacontextquantity(const ::std::string& value) {
  
  luacontextquantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luacontextquantity(::std::string&& value) {
  
  luacontextquantity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
}
#endif
inline void PROCESS_CONFIG::set_luacontextquantity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luacontextquantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
}
inline void PROCESS_CONFIG::set_luacontextquantity(const char* value, size_t size) {
  
  luacontextquantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
}
inline ::std::string* PROCESS_CONFIG::mutable_luacontextquantity() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
  return luacontextquantity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luacontextquantity() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
  
  return luacontextquantity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luacontextquantity(::std::string* luacontextquantity) {
  if (luacontextquantity != NULL) {
    
  } else {
    
  }
  luacontextquantity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luacontextquantity);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaContextQuantity)
}

// string LuaScriptFolder = 2;
inline void PROCESS_CONFIG::clear_luascriptfolder() {
  luascriptfolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luascriptfolder() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luascriptfolder(const ::std::string& value) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luascriptfolder(::std::string&& value) {
  
  luascriptfolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
}
#endif
inline void PROCESS_CONFIG::set_luascriptfolder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
}
inline void PROCESS_CONFIG::set_luascriptfolder(const char* value, size_t size) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
}
inline ::std::string* PROCESS_CONFIG::mutable_luascriptfolder() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luascriptfolder() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
  
  return luascriptfolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luascriptfolder(::std::string* luascriptfolder) {
  if (luascriptfolder != NULL) {
    
  } else {
    
  }
  luascriptfolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luascriptfolder);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaScriptFolder)
}

// string LuaEntryFile = 3;
inline void PROCESS_CONFIG::clear_luaentryfile() {
  luaentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaentryfile() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luaentryfile(const ::std::string& value) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luaentryfile(::std::string&& value) {
  
  luaentryfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
}
#endif
inline void PROCESS_CONFIG::set_luaentryfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
}
inline void PROCESS_CONFIG::set_luaentryfile(const char* value, size_t size) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaentryfile() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaentryfile() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
  
  return luaentryfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaentryfile(::std::string* luaentryfile) {
  if (luaentryfile != NULL) {
    
  } else {
    
  }
  luaentryfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfile);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaEntryFile)
}

// string LuaEntryFunction = 4;
inline void PROCESS_CONFIG::clear_luaentryfunction() {
  luaentryfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaentryfunction() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luaentryfunction(const ::std::string& value) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luaentryfunction(::std::string&& value) {
  
  luaentryfunction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
}
#endif
inline void PROCESS_CONFIG::set_luaentryfunction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
}
inline void PROCESS_CONFIG::set_luaentryfunction(const char* value, size_t size) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaentryfunction() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaentryfunction() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
  
  return luaentryfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaentryfunction(::std::string* luaentryfunction) {
  if (luaentryfunction != NULL) {
    
  } else {
    
  }
  luaentryfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfunction);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaEntryFunction)
}

// string LuaProcessFunction = 5;
inline void PROCESS_CONFIG::clear_luaprocessfunction() {
  luaprocessfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaprocessfunction() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luaprocessfunction(const ::std::string& value) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luaprocessfunction(::std::string&& value) {
  
  luaprocessfunction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
}
#endif
inline void PROCESS_CONFIG::set_luaprocessfunction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
}
inline void PROCESS_CONFIG::set_luaprocessfunction(const char* value, size_t size) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaprocessfunction() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaprocessfunction() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
  
  return luaprocessfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaprocessfunction(::std::string* luaprocessfunction) {
  if (luaprocessfunction != NULL) {
    
  } else {
    
  }
  luaprocessfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaprocessfunction);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaProcessFunction)
}

// string LuaSocketCloseFunction = 6;
inline void PROCESS_CONFIG::clear_luasocketclosefunction() {
  luasocketclosefunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luasocketclosefunction() const {
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.GetNoArena();
}
inline void PROCESS_CONFIG::set_luasocketclosefunction(const ::std::string& value) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
}
#if LANG_CXX11
inline void PROCESS_CONFIG::set_luasocketclosefunction(::std::string&& value) {
  
  luasocketclosefunction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
}
#endif
inline void PROCESS_CONFIG::set_luasocketclosefunction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
}
inline void PROCESS_CONFIG::set_luasocketclosefunction(const char* value, size_t size) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luasocketclosefunction() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luasocketclosefunction() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
  
  return luasocketclosefunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luasocketclosefunction(::std::string* luasocketclosefunction) {
  if (luasocketclosefunction != NULL) {
    
  } else {
    
  }
  luasocketclosefunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luasocketclosefunction);
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.LuaSocketCloseFunction)
}

// .ProtobufMessage.GLOBAL_CONFIG ServerConfig = 7;
inline bool PROCESS_CONFIG::has_serverconfig() const {
  return this != internal_default_instance() && serverconfig_ != NULL;
}
inline void PROCESS_CONFIG::clear_serverconfig() {
  if (GetArenaNoVirtual() == NULL && serverconfig_ != NULL) {
    delete serverconfig_;
  }
  serverconfig_ = NULL;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& PROCESS_CONFIG::_internal_serverconfig() const {
  return *serverconfig_;
}
inline const ::ProtobufMessage::GLOBAL_CONFIG& PROCESS_CONFIG::serverconfig() const {
  const ::ProtobufMessage::GLOBAL_CONFIG* p = serverconfig_;
  // @@protoc_insertion_point(field_get:ProtobufMessage.PROCESS_CONFIG.ServerConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtobufMessage::GLOBAL_CONFIG*>(
      &::ProtobufMessage::_GLOBAL_CONFIG_default_instance_);
}
inline ::ProtobufMessage::GLOBAL_CONFIG* PROCESS_CONFIG::release_serverconfig() {
  // @@protoc_insertion_point(field_release:ProtobufMessage.PROCESS_CONFIG.ServerConfig)
  
  ::ProtobufMessage::GLOBAL_CONFIG* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
inline ::ProtobufMessage::GLOBAL_CONFIG* PROCESS_CONFIG::mutable_serverconfig() {
  
  if (serverconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtobufMessage::GLOBAL_CONFIG>(GetArenaNoVirtual());
    serverconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtobufMessage.PROCESS_CONFIG.ServerConfig)
  return serverconfig_;
}
inline void PROCESS_CONFIG::set_allocated_serverconfig(::ProtobufMessage::GLOBAL_CONFIG* serverconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serverconfig_;
  }
  if (serverconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serverconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serverconfig, submessage_arena);
    }
    
  } else {
    
  }
  serverconfig_ = serverconfig;
  // @@protoc_insertion_point(field_set_allocated:ProtobufMessage.PROCESS_CONFIG.ServerConfig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtobufMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_config_2eproto
