// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMessage {

  /// <summary>Holder for reflection information generated from config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb25maWcucHJvdG8SD1Byb3RvYnVmTWVzc2FnZSKKAgoOTWVzc2FnZVBh",
            "Y2thZ2USEAoIRnVuY3Rpb24YASABKAUSFQoNUHJpb3JpdHlMZXZlbBgCIAEo",
            "BRIUCgxTZXJpYWxOdW1iZXIYAyABKAUSEwoLQ2hlY2tTdHJpbmcYBCABKAkS",
            "DgoGU2VuZGVyGAUgASgFEhAKCFJlY2VpdmVyGAYgASgFEg8KB0NvbnRleHQY",
            "ByABKAkSEgoKRXh0ZW5kRGF0YRgIIAEoDBI2CgR0eXBlGAkgASgOMiguUHJv",
            "dG9idWZNZXNzYWdlLk1lc3NhZ2VQYWNrYWdlLk1zZ1R5cGVzIiUKCE1zZ1R5",
            "cGVzEgsKB1JlcXVlc3QQABIMCghSZXNwb25zZRABIsECCg1HTE9CQUxfQ09O",
            "RklHEhIKCkxpc3RlblBvcnQYASABKAUSEQoJRW5hYmxlU1NMGAIgASgIEhQK",
            "DENlcnRGaWxlUGF0aBgDIAEoCRITCgtLZXlGaWxlUGF0aBgEIAEoCRISCgpD",
            "ZXJ0UGFzc3dkGAUgASgJEhMKC0Nvbm5lY3RUaW1lGAYgASgFEhMKC1JlY2Vp",
            "dmVUaW1lGAcgASgFEg8KB0xvZ1BhdGgYCCABKAkSEAoITG9nTGV2ZWwYCSAB",
            "KAUSEQoJRGVidWdNb2RlGAogASgIEhgKEE1RVGhyZWFkUXVhbnRpdHkYCyAB",
            "KAUSGwoTRVBvbGxUaHJlYWRRdWFudGl0eRgMIAEoBRIdChVQcm9jZXNzVGhy",
            "ZWFkUXVhbnRpdHkYDSABKAUSFAoMUHJpb3JpdHlTaXplGA4gASgFIiMKDkNP",
            "TlRST0xfQ09ORklHEhEKCUJsb2NrVGltZRgBIAEoBSJmCglEQl9DT05GSUcS",
            "FQoNU2VydmVyQWRkcmVzcxgBIAEoCRISCgpTZXJ2ZXJQb3J0GAIgASgFEgwK",
            "BFVzZXIYAyABKAkSDgoGUGFzc3dkGAQgASgJEhAKCERhdGFiYXNlGAUgASgJ",
            "IjwKC0RBVEFfQ09ORklHEhcKD0RhdGFSZWNlaXZlUG9ydBgBIAEoBRIUCgxE",
            "YXRhUmVjdlRpbWUYAiABKAUiigEKDFBST1hZX0NPTkZJRxIXCg9DbGllbnRD",
            "aGVja1RpbWUYASABKAUSFgoOQ2xpZW50Q2hlY2tLZXkYAiABKAkSHAoUVGlt",
            "ZW91dENoZWNrSW50ZXJ2YWwYAyABKAUSEwoLVGltZW91dFRpbWUYBCABKAUS",
            "FgoOUHJvY2Vzc0FkZHJlc3MYBSABKAkiJAoPRklSRVdBTExfQ09ORklHEhEK",
            "CUJsb2NrVGltZRgBIAEoBSKxAQoOUFJPQ0VTU19DT05GSUcSGgoSTHVhQ29u",
            "dGV4dFF1YW50aXR5GAEgASgFEhcKD0x1YVNjcmlwdEZvbGRlchgCIAEoCRIU",
            "CgxMdWFFbnRyeUZpbGUYAyABKAkSGAoQTHVhRW50cnlGdW5jdGlvbhgEIAEo",
            "CRIaChJMdWFQcm9jZXNzRnVuY3Rpb24YBSABKAkSHgoWTHVhU29ja2V0Q2xv",
            "c2VGdW5jdGlvbhgGIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.MessagePackage), global::ProtobufMessage.MessagePackage.Parser, new[]{ "Function", "PriorityLevel", "SerialNumber", "CheckString", "Sender", "Receiver", "Context", "ExtendData", "Type" }, null, new[]{ typeof(global::ProtobufMessage.MessagePackage.Types.MsgTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.GLOBAL_CONFIG), global::ProtobufMessage.GLOBAL_CONFIG.Parser, new[]{ "ListenPort", "EnableSSL", "CertFilePath", "KeyFilePath", "CertPasswd", "ConnectTime", "ReceiveTime", "LogPath", "LogLevel", "DebugMode", "MQThreadQuantity", "EPollThreadQuantity", "ProcessThreadQuantity", "PrioritySize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.CONTROL_CONFIG), global::ProtobufMessage.CONTROL_CONFIG.Parser, new[]{ "BlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.DB_CONFIG), global::ProtobufMessage.DB_CONFIG.Parser, new[]{ "ServerAddress", "ServerPort", "User", "Passwd", "Database" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.DATA_CONFIG), global::ProtobufMessage.DATA_CONFIG.Parser, new[]{ "DataReceivePort", "DataRecvTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.PROXY_CONFIG), global::ProtobufMessage.PROXY_CONFIG.Parser, new[]{ "ClientCheckTime", "ClientCheckKey", "TimeoutCheckInterval", "TimeoutTime", "ProcessAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.FIREWALL_CONFIG), global::ProtobufMessage.FIREWALL_CONFIG.Parser, new[]{ "BlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMessage.PROCESS_CONFIG), global::ProtobufMessage.PROCESS_CONFIG.Parser, new[]{ "LuaContextQuantity", "LuaScriptFolder", "LuaEntryFile", "LuaEntryFunction", "LuaProcessFunction", "LuaSocketCloseFunction" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MessagePackage : pb::IMessage<MessagePackage> {
    private static readonly pb::MessageParser<MessagePackage> _parser = new pb::MessageParser<MessagePackage>(() => new MessagePackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePackage(MessagePackage other) : this() {
      function_ = other.function_;
      priorityLevel_ = other.priorityLevel_;
      serialNumber_ = other.serialNumber_;
      checkString_ = other.checkString_;
      sender_ = other.sender_;
      receiver_ = other.receiver_;
      context_ = other.context_;
      extendData_ = other.extendData_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePackage Clone() {
      return new MessagePackage(this);
    }

    /// <summary>Field number for the "Function" field.</summary>
    public const int FunctionFieldNumber = 1;
    private int function_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "PriorityLevel" field.</summary>
    public const int PriorityLevelFieldNumber = 2;
    private int priorityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriorityLevel {
      get { return priorityLevel_; }
      set {
        priorityLevel_ = value;
      }
    }

    /// <summary>Field number for the "SerialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 3;
    private int serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "CheckString" field.</summary>
    public const int CheckStringFieldNumber = 4;
    private string checkString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CheckString {
      get { return checkString_; }
      set {
        checkString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private int sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "Receiver" field.</summary>
    public const int ReceiverFieldNumber = 6;
    private int receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "Context" field.</summary>
    public const int ContextFieldNumber = 7;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExtendData" field.</summary>
    public const int ExtendDataFieldNumber = 8;
    private pb::ByteString extendData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtendData {
      get { return extendData_; }
      set {
        extendData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::ProtobufMessage.MessagePackage.Types.MsgTypes type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMessage.MessagePackage.Types.MsgTypes Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Function != other.Function) return false;
      if (PriorityLevel != other.PriorityLevel) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if (CheckString != other.CheckString) return false;
      if (Sender != other.Sender) return false;
      if (Receiver != other.Receiver) return false;
      if (Context != other.Context) return false;
      if (ExtendData != other.ExtendData) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Function != 0) hash ^= Function.GetHashCode();
      if (PriorityLevel != 0) hash ^= PriorityLevel.GetHashCode();
      if (SerialNumber != 0) hash ^= SerialNumber.GetHashCode();
      if (CheckString.Length != 0) hash ^= CheckString.GetHashCode();
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Receiver != 0) hash ^= Receiver.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (ExtendData.Length != 0) hash ^= ExtendData.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Function != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Function);
      }
      if (PriorityLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PriorityLevel);
      }
      if (SerialNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SerialNumber);
      }
      if (CheckString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CheckString);
      }
      if (Sender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sender);
      }
      if (Receiver != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Receiver);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Context);
      }
      if (ExtendData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ExtendData);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Function);
      }
      if (PriorityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriorityLevel);
      }
      if (SerialNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNumber);
      }
      if (CheckString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheckString);
      }
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sender);
      }
      if (Receiver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Receiver);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (ExtendData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtendData);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePackage other) {
      if (other == null) {
        return;
      }
      if (other.Function != 0) {
        Function = other.Function;
      }
      if (other.PriorityLevel != 0) {
        PriorityLevel = other.PriorityLevel;
      }
      if (other.SerialNumber != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.CheckString.Length != 0) {
        CheckString = other.CheckString;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Receiver != 0) {
        Receiver = other.Receiver;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      if (other.ExtendData.Length != 0) {
        ExtendData = other.ExtendData;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Function = input.ReadInt32();
            break;
          }
          case 16: {
            PriorityLevel = input.ReadInt32();
            break;
          }
          case 24: {
            SerialNumber = input.ReadInt32();
            break;
          }
          case 34: {
            CheckString = input.ReadString();
            break;
          }
          case 40: {
            Sender = input.ReadInt32();
            break;
          }
          case 48: {
            Receiver = input.ReadInt32();
            break;
          }
          case 58: {
            Context = input.ReadString();
            break;
          }
          case 66: {
            ExtendData = input.ReadBytes();
            break;
          }
          case 72: {
            type_ = (global::ProtobufMessage.MessagePackage.Types.MsgTypes) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MessagePackage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MsgTypes {
        [pbr::OriginalName("Request")] Request = 0,
        [pbr::OriginalName("Response")] Response = 1,
      }

    }
    #endregion

  }

  public sealed partial class GLOBAL_CONFIG : pb::IMessage<GLOBAL_CONFIG> {
    private static readonly pb::MessageParser<GLOBAL_CONFIG> _parser = new pb::MessageParser<GLOBAL_CONFIG>(() => new GLOBAL_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GLOBAL_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG(GLOBAL_CONFIG other) : this() {
      listenPort_ = other.listenPort_;
      enableSSL_ = other.enableSSL_;
      certFilePath_ = other.certFilePath_;
      keyFilePath_ = other.keyFilePath_;
      certPasswd_ = other.certPasswd_;
      connectTime_ = other.connectTime_;
      receiveTime_ = other.receiveTime_;
      logPath_ = other.logPath_;
      logLevel_ = other.logLevel_;
      debugMode_ = other.debugMode_;
      mQThreadQuantity_ = other.mQThreadQuantity_;
      ePollThreadQuantity_ = other.ePollThreadQuantity_;
      processThreadQuantity_ = other.processThreadQuantity_;
      prioritySize_ = other.prioritySize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG Clone() {
      return new GLOBAL_CONFIG(this);
    }

    /// <summary>Field number for the "ListenPort" field.</summary>
    public const int ListenPortFieldNumber = 1;
    private int listenPort_;
    /// <summary>
    ///  Network 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenPort {
      get { return listenPort_; }
      set {
        listenPort_ = value;
      }
    }

    /// <summary>Field number for the "EnableSSL" field.</summary>
    public const int EnableSSLFieldNumber = 2;
    private bool enableSSL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSSL {
      get { return enableSSL_; }
      set {
        enableSSL_ = value;
      }
    }

    /// <summary>Field number for the "CertFilePath" field.</summary>
    public const int CertFilePathFieldNumber = 3;
    private string certFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertFilePath {
      get { return certFilePath_; }
      set {
        certFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KeyFilePath" field.</summary>
    public const int KeyFilePathFieldNumber = 4;
    private string keyFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyFilePath {
      get { return keyFilePath_; }
      set {
        keyFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertPasswd" field.</summary>
    public const int CertPasswdFieldNumber = 5;
    private string certPasswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertPasswd {
      get { return certPasswd_; }
      set {
        certPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConnectTime" field.</summary>
    public const int ConnectTimeFieldNumber = 6;
    private int connectTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTime {
      get { return connectTime_; }
      set {
        connectTime_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 7;
    private int receiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = value;
      }
    }

    /// <summary>Field number for the "LogPath" field.</summary>
    public const int LogPathFieldNumber = 8;
    private string logPath_ = "";
    /// <summary>
    ///  Log 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogPath {
      get { return logPath_; }
      set {
        logPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogLevel" field.</summary>
    public const int LogLevelFieldNumber = 9;
    private int logLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "DebugMode" field.</summary>
    public const int DebugModeFieldNumber = 10;
    private bool debugMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugMode {
      get { return debugMode_; }
      set {
        debugMode_ = value;
      }
    }

    /// <summary>Field number for the "MQThreadQuantity" field.</summary>
    public const int MQThreadQuantityFieldNumber = 11;
    private int mQThreadQuantity_;
    /// <summary>
    ///  Performance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MQThreadQuantity {
      get { return mQThreadQuantity_; }
      set {
        mQThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "EPollThreadQuantity" field.</summary>
    public const int EPollThreadQuantityFieldNumber = 12;
    private int ePollThreadQuantity_;
    /// <summary>
    ///  EPoll event process thread quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EPollThreadQuantity {
      get { return ePollThreadQuantity_; }
      set {
        ePollThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "ProcessThreadQuantity" field.</summary>
    public const int ProcessThreadQuantityFieldNumber = 13;
    private int processThreadQuantity_;
    /// <summary>
    ///  work thread for DataPackage process quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessThreadQuantity {
      get { return processThreadQuantity_; }
      set {
        processThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "PrioritySize" field.</summary>
    public const int PrioritySizeFieldNumber = 14;
    private int prioritySize_;
    /// <summary>
    ///  Priority Size for the list. the priority level cannot bigger than this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySize {
      get { return prioritySize_; }
      set {
        prioritySize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GLOBAL_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GLOBAL_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListenPort != other.ListenPort) return false;
      if (EnableSSL != other.EnableSSL) return false;
      if (CertFilePath != other.CertFilePath) return false;
      if (KeyFilePath != other.KeyFilePath) return false;
      if (CertPasswd != other.CertPasswd) return false;
      if (ConnectTime != other.ConnectTime) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (LogPath != other.LogPath) return false;
      if (LogLevel != other.LogLevel) return false;
      if (DebugMode != other.DebugMode) return false;
      if (MQThreadQuantity != other.MQThreadQuantity) return false;
      if (EPollThreadQuantity != other.EPollThreadQuantity) return false;
      if (ProcessThreadQuantity != other.ProcessThreadQuantity) return false;
      if (PrioritySize != other.PrioritySize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListenPort != 0) hash ^= ListenPort.GetHashCode();
      if (EnableSSL != false) hash ^= EnableSSL.GetHashCode();
      if (CertFilePath.Length != 0) hash ^= CertFilePath.GetHashCode();
      if (KeyFilePath.Length != 0) hash ^= KeyFilePath.GetHashCode();
      if (CertPasswd.Length != 0) hash ^= CertPasswd.GetHashCode();
      if (ConnectTime != 0) hash ^= ConnectTime.GetHashCode();
      if (ReceiveTime != 0) hash ^= ReceiveTime.GetHashCode();
      if (LogPath.Length != 0) hash ^= LogPath.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (DebugMode != false) hash ^= DebugMode.GetHashCode();
      if (MQThreadQuantity != 0) hash ^= MQThreadQuantity.GetHashCode();
      if (EPollThreadQuantity != 0) hash ^= EPollThreadQuantity.GetHashCode();
      if (ProcessThreadQuantity != 0) hash ^= ProcessThreadQuantity.GetHashCode();
      if (PrioritySize != 0) hash ^= PrioritySize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListenPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ListenPort);
      }
      if (EnableSSL != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableSSL);
      }
      if (CertFilePath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CertFilePath);
      }
      if (KeyFilePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyFilePath);
      }
      if (CertPasswd.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertPasswd);
      }
      if (ConnectTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ConnectTime);
      }
      if (ReceiveTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReceiveTime);
      }
      if (LogPath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LogPath);
      }
      if (LogLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LogLevel);
      }
      if (DebugMode != false) {
        output.WriteRawTag(80);
        output.WriteBool(DebugMode);
      }
      if (MQThreadQuantity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MQThreadQuantity);
      }
      if (EPollThreadQuantity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EPollThreadQuantity);
      }
      if (ProcessThreadQuantity != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ProcessThreadQuantity);
      }
      if (PrioritySize != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PrioritySize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListenPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenPort);
      }
      if (EnableSSL != false) {
        size += 1 + 1;
      }
      if (CertFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertFilePath);
      }
      if (KeyFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyFilePath);
      }
      if (CertPasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertPasswd);
      }
      if (ConnectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectTime);
      }
      if (ReceiveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiveTime);
      }
      if (LogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogPath);
      }
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogLevel);
      }
      if (DebugMode != false) {
        size += 1 + 1;
      }
      if (MQThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MQThreadQuantity);
      }
      if (EPollThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EPollThreadQuantity);
      }
      if (ProcessThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessThreadQuantity);
      }
      if (PrioritySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GLOBAL_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.ListenPort != 0) {
        ListenPort = other.ListenPort;
      }
      if (other.EnableSSL != false) {
        EnableSSL = other.EnableSSL;
      }
      if (other.CertFilePath.Length != 0) {
        CertFilePath = other.CertFilePath;
      }
      if (other.KeyFilePath.Length != 0) {
        KeyFilePath = other.KeyFilePath;
      }
      if (other.CertPasswd.Length != 0) {
        CertPasswd = other.CertPasswd;
      }
      if (other.ConnectTime != 0) {
        ConnectTime = other.ConnectTime;
      }
      if (other.ReceiveTime != 0) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.LogPath.Length != 0) {
        LogPath = other.LogPath;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.DebugMode != false) {
        DebugMode = other.DebugMode;
      }
      if (other.MQThreadQuantity != 0) {
        MQThreadQuantity = other.MQThreadQuantity;
      }
      if (other.EPollThreadQuantity != 0) {
        EPollThreadQuantity = other.EPollThreadQuantity;
      }
      if (other.ProcessThreadQuantity != 0) {
        ProcessThreadQuantity = other.ProcessThreadQuantity;
      }
      if (other.PrioritySize != 0) {
        PrioritySize = other.PrioritySize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ListenPort = input.ReadInt32();
            break;
          }
          case 16: {
            EnableSSL = input.ReadBool();
            break;
          }
          case 26: {
            CertFilePath = input.ReadString();
            break;
          }
          case 34: {
            KeyFilePath = input.ReadString();
            break;
          }
          case 42: {
            CertPasswd = input.ReadString();
            break;
          }
          case 48: {
            ConnectTime = input.ReadInt32();
            break;
          }
          case 56: {
            ReceiveTime = input.ReadInt32();
            break;
          }
          case 66: {
            LogPath = input.ReadString();
            break;
          }
          case 72: {
            LogLevel = input.ReadInt32();
            break;
          }
          case 80: {
            DebugMode = input.ReadBool();
            break;
          }
          case 88: {
            MQThreadQuantity = input.ReadInt32();
            break;
          }
          case 96: {
            EPollThreadQuantity = input.ReadInt32();
            break;
          }
          case 104: {
            ProcessThreadQuantity = input.ReadInt32();
            break;
          }
          case 112: {
            PrioritySize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CONTROL_CONFIG : pb::IMessage<CONTROL_CONFIG> {
    private static readonly pb::MessageParser<CONTROL_CONFIG> _parser = new pb::MessageParser<CONTROL_CONFIG>(() => new CONTROL_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CONTROL_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONTROL_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONTROL_CONFIG(CONTROL_CONFIG other) : this() {
      blockTime_ = other.blockTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CONTROL_CONFIG Clone() {
      return new CONTROL_CONFIG(this);
    }

    /// <summary>Field number for the "BlockTime" field.</summary>
    public const int BlockTimeFieldNumber = 1;
    private int blockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockTime {
      get { return blockTime_; }
      set {
        blockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CONTROL_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CONTROL_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockTime != other.BlockTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockTime != 0) hash ^= BlockTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CONTROL_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.BlockTime != 0) {
        BlockTime = other.BlockTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DB_CONFIG : pb::IMessage<DB_CONFIG> {
    private static readonly pb::MessageParser<DB_CONFIG> _parser = new pb::MessageParser<DB_CONFIG>(() => new DB_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DB_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DB_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DB_CONFIG(DB_CONFIG other) : this() {
      serverAddress_ = other.serverAddress_;
      serverPort_ = other.serverPort_;
      user_ = other.user_;
      passwd_ = other.passwd_;
      database_ = other.database_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DB_CONFIG Clone() {
      return new DB_CONFIG(this);
    }

    /// <summary>Field number for the "ServerAddress" field.</summary>
    public const int ServerAddressFieldNumber = 1;
    private string serverAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerAddress {
      get { return serverAddress_; }
      set {
        serverAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerPort" field.</summary>
    public const int ServerPortFieldNumber = 2;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 3;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Passwd" field.</summary>
    public const int PasswdFieldNumber = 4;
    private string passwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Database" field.</summary>
    public const int DatabaseFieldNumber = 5;
    private string database_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Database {
      get { return database_; }
      set {
        database_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DB_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DB_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerAddress != other.ServerAddress) return false;
      if (ServerPort != other.ServerPort) return false;
      if (User != other.User) return false;
      if (Passwd != other.Passwd) return false;
      if (Database != other.Database) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerAddress.Length != 0) hash ^= ServerAddress.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      if (Database.Length != 0) hash ^= Database.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerAddress);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerPort);
      }
      if (User.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(User);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Passwd);
      }
      if (Database.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Database);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerAddress);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (Database.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Database);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DB_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.ServerAddress.Length != 0) {
        ServerAddress = other.ServerAddress;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
      if (other.Database.Length != 0) {
        Database = other.Database;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerAddress = input.ReadString();
            break;
          }
          case 16: {
            ServerPort = input.ReadInt32();
            break;
          }
          case 26: {
            User = input.ReadString();
            break;
          }
          case 34: {
            Passwd = input.ReadString();
            break;
          }
          case 42: {
            Database = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DATA_CONFIG : pb::IMessage<DATA_CONFIG> {
    private static readonly pb::MessageParser<DATA_CONFIG> _parser = new pb::MessageParser<DATA_CONFIG>(() => new DATA_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DATA_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DATA_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DATA_CONFIG(DATA_CONFIG other) : this() {
      dataReceivePort_ = other.dataReceivePort_;
      dataRecvTime_ = other.dataRecvTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DATA_CONFIG Clone() {
      return new DATA_CONFIG(this);
    }

    /// <summary>Field number for the "DataReceivePort" field.</summary>
    public const int DataReceivePortFieldNumber = 1;
    private int dataReceivePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataReceivePort {
      get { return dataReceivePort_; }
      set {
        dataReceivePort_ = value;
      }
    }

    /// <summary>Field number for the "DataRecvTime" field.</summary>
    public const int DataRecvTimeFieldNumber = 2;
    private int dataRecvTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataRecvTime {
      get { return dataRecvTime_; }
      set {
        dataRecvTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DATA_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DATA_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataReceivePort != other.DataReceivePort) return false;
      if (DataRecvTime != other.DataRecvTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataReceivePort != 0) hash ^= DataReceivePort.GetHashCode();
      if (DataRecvTime != 0) hash ^= DataRecvTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataReceivePort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataReceivePort);
      }
      if (DataRecvTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DataRecvTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataReceivePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataReceivePort);
      }
      if (DataRecvTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataRecvTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DATA_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.DataReceivePort != 0) {
        DataReceivePort = other.DataReceivePort;
      }
      if (other.DataRecvTime != 0) {
        DataRecvTime = other.DataRecvTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataReceivePort = input.ReadInt32();
            break;
          }
          case 16: {
            DataRecvTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PROXY_CONFIG : pb::IMessage<PROXY_CONFIG> {
    private static readonly pb::MessageParser<PROXY_CONFIG> _parser = new pb::MessageParser<PROXY_CONFIG>(() => new PROXY_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PROXY_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROXY_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROXY_CONFIG(PROXY_CONFIG other) : this() {
      clientCheckTime_ = other.clientCheckTime_;
      clientCheckKey_ = other.clientCheckKey_;
      timeoutCheckInterval_ = other.timeoutCheckInterval_;
      timeoutTime_ = other.timeoutTime_;
      processAddress_ = other.processAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROXY_CONFIG Clone() {
      return new PROXY_CONFIG(this);
    }

    /// <summary>Field number for the "ClientCheckTime" field.</summary>
    public const int ClientCheckTimeFieldNumber = 1;
    private int clientCheckTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientCheckTime {
      get { return clientCheckTime_; }
      set {
        clientCheckTime_ = value;
      }
    }

    /// <summary>Field number for the "ClientCheckKey" field.</summary>
    public const int ClientCheckKeyFieldNumber = 2;
    private string clientCheckKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientCheckKey {
      get { return clientCheckKey_; }
      set {
        clientCheckKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeoutCheckInterval" field.</summary>
    public const int TimeoutCheckIntervalFieldNumber = 3;
    private int timeoutCheckInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutCheckInterval {
      get { return timeoutCheckInterval_; }
      set {
        timeoutCheckInterval_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutTime" field.</summary>
    public const int TimeoutTimeFieldNumber = 4;
    private int timeoutTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutTime {
      get { return timeoutTime_; }
      set {
        timeoutTime_ = value;
      }
    }

    /// <summary>Field number for the "ProcessAddress" field.</summary>
    public const int ProcessAddressFieldNumber = 5;
    private string processAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessAddress {
      get { return processAddress_; }
      set {
        processAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PROXY_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PROXY_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientCheckTime != other.ClientCheckTime) return false;
      if (ClientCheckKey != other.ClientCheckKey) return false;
      if (TimeoutCheckInterval != other.TimeoutCheckInterval) return false;
      if (TimeoutTime != other.TimeoutTime) return false;
      if (ProcessAddress != other.ProcessAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientCheckTime != 0) hash ^= ClientCheckTime.GetHashCode();
      if (ClientCheckKey.Length != 0) hash ^= ClientCheckKey.GetHashCode();
      if (TimeoutCheckInterval != 0) hash ^= TimeoutCheckInterval.GetHashCode();
      if (TimeoutTime != 0) hash ^= TimeoutTime.GetHashCode();
      if (ProcessAddress.Length != 0) hash ^= ProcessAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientCheckTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientCheckTime);
      }
      if (ClientCheckKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientCheckKey);
      }
      if (TimeoutCheckInterval != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimeoutCheckInterval);
      }
      if (TimeoutTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeoutTime);
      }
      if (ProcessAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProcessAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientCheckTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientCheckTime);
      }
      if (ClientCheckKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCheckKey);
      }
      if (TimeoutCheckInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutCheckInterval);
      }
      if (TimeoutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutTime);
      }
      if (ProcessAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PROXY_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.ClientCheckTime != 0) {
        ClientCheckTime = other.ClientCheckTime;
      }
      if (other.ClientCheckKey.Length != 0) {
        ClientCheckKey = other.ClientCheckKey;
      }
      if (other.TimeoutCheckInterval != 0) {
        TimeoutCheckInterval = other.TimeoutCheckInterval;
      }
      if (other.TimeoutTime != 0) {
        TimeoutTime = other.TimeoutTime;
      }
      if (other.ProcessAddress.Length != 0) {
        ProcessAddress = other.ProcessAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientCheckTime = input.ReadInt32();
            break;
          }
          case 18: {
            ClientCheckKey = input.ReadString();
            break;
          }
          case 24: {
            TimeoutCheckInterval = input.ReadInt32();
            break;
          }
          case 32: {
            TimeoutTime = input.ReadInt32();
            break;
          }
          case 42: {
            ProcessAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIREWALL_CONFIG : pb::IMessage<FIREWALL_CONFIG> {
    private static readonly pb::MessageParser<FIREWALL_CONFIG> _parser = new pb::MessageParser<FIREWALL_CONFIG>(() => new FIREWALL_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIREWALL_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIREWALL_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIREWALL_CONFIG(FIREWALL_CONFIG other) : this() {
      blockTime_ = other.blockTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIREWALL_CONFIG Clone() {
      return new FIREWALL_CONFIG(this);
    }

    /// <summary>Field number for the "BlockTime" field.</summary>
    public const int BlockTimeFieldNumber = 1;
    private int blockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockTime {
      get { return blockTime_; }
      set {
        blockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIREWALL_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIREWALL_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockTime != other.BlockTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockTime != 0) hash ^= BlockTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIREWALL_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.BlockTime != 0) {
        BlockTime = other.BlockTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PROCESS_CONFIG : pb::IMessage<PROCESS_CONFIG> {
    private static readonly pb::MessageParser<PROCESS_CONFIG> _parser = new pb::MessageParser<PROCESS_CONFIG>(() => new PROCESS_CONFIG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PROCESS_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMessage.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROCESS_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROCESS_CONFIG(PROCESS_CONFIG other) : this() {
      luaContextQuantity_ = other.luaContextQuantity_;
      luaScriptFolder_ = other.luaScriptFolder_;
      luaEntryFile_ = other.luaEntryFile_;
      luaEntryFunction_ = other.luaEntryFunction_;
      luaProcessFunction_ = other.luaProcessFunction_;
      luaSocketCloseFunction_ = other.luaSocketCloseFunction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PROCESS_CONFIG Clone() {
      return new PROCESS_CONFIG(this);
    }

    /// <summary>Field number for the "LuaContextQuantity" field.</summary>
    public const int LuaContextQuantityFieldNumber = 1;
    private int luaContextQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuaContextQuantity {
      get { return luaContextQuantity_; }
      set {
        luaContextQuantity_ = value;
      }
    }

    /// <summary>Field number for the "LuaScriptFolder" field.</summary>
    public const int LuaScriptFolderFieldNumber = 2;
    private string luaScriptFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaScriptFolder {
      get { return luaScriptFolder_; }
      set {
        luaScriptFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LuaEntryFile" field.</summary>
    public const int LuaEntryFileFieldNumber = 3;
    private string luaEntryFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaEntryFile {
      get { return luaEntryFile_; }
      set {
        luaEntryFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LuaEntryFunction" field.</summary>
    public const int LuaEntryFunctionFieldNumber = 4;
    private string luaEntryFunction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaEntryFunction {
      get { return luaEntryFunction_; }
      set {
        luaEntryFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LuaProcessFunction" field.</summary>
    public const int LuaProcessFunctionFieldNumber = 5;
    private string luaProcessFunction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaProcessFunction {
      get { return luaProcessFunction_; }
      set {
        luaProcessFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LuaSocketCloseFunction" field.</summary>
    public const int LuaSocketCloseFunctionFieldNumber = 6;
    private string luaSocketCloseFunction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaSocketCloseFunction {
      get { return luaSocketCloseFunction_; }
      set {
        luaSocketCloseFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PROCESS_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PROCESS_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LuaContextQuantity != other.LuaContextQuantity) return false;
      if (LuaScriptFolder != other.LuaScriptFolder) return false;
      if (LuaEntryFile != other.LuaEntryFile) return false;
      if (LuaEntryFunction != other.LuaEntryFunction) return false;
      if (LuaProcessFunction != other.LuaProcessFunction) return false;
      if (LuaSocketCloseFunction != other.LuaSocketCloseFunction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LuaContextQuantity != 0) hash ^= LuaContextQuantity.GetHashCode();
      if (LuaScriptFolder.Length != 0) hash ^= LuaScriptFolder.GetHashCode();
      if (LuaEntryFile.Length != 0) hash ^= LuaEntryFile.GetHashCode();
      if (LuaEntryFunction.Length != 0) hash ^= LuaEntryFunction.GetHashCode();
      if (LuaProcessFunction.Length != 0) hash ^= LuaProcessFunction.GetHashCode();
      if (LuaSocketCloseFunction.Length != 0) hash ^= LuaSocketCloseFunction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LuaContextQuantity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LuaContextQuantity);
      }
      if (LuaScriptFolder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LuaScriptFolder);
      }
      if (LuaEntryFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LuaEntryFile);
      }
      if (LuaEntryFunction.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LuaEntryFunction);
      }
      if (LuaProcessFunction.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LuaProcessFunction);
      }
      if (LuaSocketCloseFunction.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LuaSocketCloseFunction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LuaContextQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuaContextQuantity);
      }
      if (LuaScriptFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaScriptFolder);
      }
      if (LuaEntryFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaEntryFile);
      }
      if (LuaEntryFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaEntryFunction);
      }
      if (LuaProcessFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaProcessFunction);
      }
      if (LuaSocketCloseFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuaSocketCloseFunction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PROCESS_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.LuaContextQuantity != 0) {
        LuaContextQuantity = other.LuaContextQuantity;
      }
      if (other.LuaScriptFolder.Length != 0) {
        LuaScriptFolder = other.LuaScriptFolder;
      }
      if (other.LuaEntryFile.Length != 0) {
        LuaEntryFile = other.LuaEntryFile;
      }
      if (other.LuaEntryFunction.Length != 0) {
        LuaEntryFunction = other.LuaEntryFunction;
      }
      if (other.LuaProcessFunction.Length != 0) {
        LuaProcessFunction = other.LuaProcessFunction;
      }
      if (other.LuaSocketCloseFunction.Length != 0) {
        LuaSocketCloseFunction = other.LuaSocketCloseFunction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LuaContextQuantity = input.ReadInt32();
            break;
          }
          case 18: {
            LuaScriptFolder = input.ReadString();
            break;
          }
          case 26: {
            LuaEntryFile = input.ReadString();
            break;
          }
          case 34: {
            LuaEntryFunction = input.ReadString();
            break;
          }
          case 42: {
            LuaProcessFunction = input.ReadString();
            break;
          }
          case 50: {
            LuaSocketCloseFunction = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
