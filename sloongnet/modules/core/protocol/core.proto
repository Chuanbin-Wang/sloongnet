syntax = "proto3";
package Core;

// LogLevel
enum LogLevel{
    All = 0;
    Verbos = 1;
    Debug = 2;
    Info = 3;
    Warn = 4;
    Err = 5;
    Assert = 6;
    Fatal = 7;  
}

enum DATA_ITEM
{
    ServerConfiguation=0;
	ModuleConfiguation=1;
	Logger=2;
	RuntimeData=3;
    ReferenceTemplateInfo=4;
}

enum EVENT_TYPE
{
	/*
	由 base_service 发送。程序准备完毕可以运行时发送
	*/
	ProgramStart=0;
    ProgramStop=1;
	// 重新启用
	// 程序将会从加载开始，重新执行获取配置，加载模块等操作
	ProgramRestart=2;


	//////////////////////////////////////////////////////////////////////////
	// 由 * NetworkHub * 模块提供的消息
	//////////////////////////////////////////////////////////////////////////
	// 当连接关闭时会发送该消息
	// 需要在处理完成后调用回调函数以清除连接信息。
	// 参数类型为CNetworkEvent
	SocketClose=3;

	// 需要发送数据给客户端时，使用该消息
	SendPackage=4;

    

	// 需要监听socket的可写状态时，使用该消息
	// 类型为CNetworkEvent.
	MonitorSendStatus=5;

	// 启用超时检查
	// 参数类型为NormalEvent, 
	//   实参为JSON，格式
	// {"TimeoutTime":"", "CheckInterval":""}
	EnableTimeoutCheck=6;

	// 启用连接检查
	// 参数类型为NormalEvent
	//   实参为JSON，格式
	// {"ClientCheckKey":"","ClientCheckTime":""}
	EnableClientCheck=7;
	
	// 请求重新载入Lua环境
	// 当需要重新载入Lua Context的时候发送该请求。
	// 请求类型为CNormalEvent
	ReloadLuaContext=8;

    // 注册一个已经存在的连接到EPOLL
    // 参数类型为类型为CNetworkEvent
    RegisteConnection=9;
	
}

enum PRIORITY_LEVEL{
    HEIGHT_LEVEL=0;
    NORMAL_LEVEL=1;
    LOW_LEVEL=2;
}

enum ControlEvent{
    InvalidEvent=0;
    Restart=1;
    Stop=2;
}

message GLOBAL_CONFIG
{
    // Network 
    string  ListenAddress = 1;
    int32   ListenPort = 2;

    // Log 
    string  LogPath = 3;
    LogLevel   LogLevel =4 ;
    int32    LogOperation = 5;

    // Performance
    int32   MQThreadQuantity =6;// Message queue work thread quantity 
    int32   EPollThreadQuantity=7;// EPoll event process thread quantity
    int32   ProcessThreadQuantity=8;// work thread for DataPackage process quantity
    int32   PrioritySize=9;// Priority Size for the list. the priority level cannot bigger than this value.

    // Timeout
    int32   ConnectTime=10;
    int32   ReceiveTime=11;

    // Module
    string  ModuleName = 12;
    enum MODULE_TYPE
    {
        Manager=0;
        AuthCenter=1;
        DataCenter=2;
        FileCenter=3;
        Firewall=4;
        Gateway=5;
        Processer=6;
    }
    MODULE_TYPE ModuleType = 13;
    string  ModulePath = 14;
    bytes   ModuleConfig = 15;
    // 引用的其他模板，即本节点可能由数据流向引用节点，并且在目标模板节点产生变动的时候会通知引用者。
    string  ModuleReference = 16;
    // 模板提供的功能，可以是多种形式：单功能，功能区（xx-xx），全功能（*）。各种形式之间使用逗号分隔
    string  ModuleFunctoins = 17;

    // SSL
    bool    EnableSSL=18;
    string  CertFilePath=19;
    string  KeyFilePath=20;
    string  CertPasswd=21;

};

message RuntimeDataPackage
{
    string ManagerAddress=1;
	int32 ManagerPort=2;
	int32 TemplateID=3;
    fixed64 NodeUUID=4;
	GLOBAL_CONFIG TemplateConfig=5;
}