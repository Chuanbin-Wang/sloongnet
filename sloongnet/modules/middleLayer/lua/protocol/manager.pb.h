// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manager.proto

#ifndef PROTOBUF_INCLUDED_manager_2eproto
#define PROTOBUF_INCLUDED_manager_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_manager_2eproto 

namespace protobuf_manager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_manager_2eproto
namespace Manager {
class AddTemplateRequest;
class AddTemplateRequestDefaultTypeInternal;
extern AddTemplateRequestDefaultTypeInternal _AddTemplateRequest_default_instance_;
class DeleteTemplateRequest;
class DeleteTemplateRequestDefaultTypeInternal;
extern DeleteTemplateRequestDefaultTypeInternal _DeleteTemplateRequest_default_instance_;
class EventReferenceModuleOffline;
class EventReferenceModuleOfflineDefaultTypeInternal;
extern EventReferenceModuleOfflineDefaultTypeInternal _EventReferenceModuleOffline_default_instance_;
class EventReferenceModuleOnline;
class EventReferenceModuleOnlineDefaultTypeInternal;
extern EventReferenceModuleOnlineDefaultTypeInternal _EventReferenceModuleOnline_default_instance_;
class NodeItem;
class NodeItemDefaultTypeInternal;
extern NodeItemDefaultTypeInternal _NodeItem_default_instance_;
class PostLogMessageRequest;
class PostLogMessageRequestDefaultTypeInternal;
extern PostLogMessageRequestDefaultTypeInternal _PostLogMessageRequest_default_instance_;
class QueryNodeRequest;
class QueryNodeRequestDefaultTypeInternal;
extern QueryNodeRequestDefaultTypeInternal _QueryNodeRequest_default_instance_;
class QueryNodeResponse;
class QueryNodeResponseDefaultTypeInternal;
extern QueryNodeResponseDefaultTypeInternal _QueryNodeResponse_default_instance_;
class QueryReferenceInfoResponse;
class QueryReferenceInfoResponseDefaultTypeInternal;
extern QueryReferenceInfoResponseDefaultTypeInternal _QueryReferenceInfoResponse_default_instance_;
class QueryTemplateRequest;
class QueryTemplateRequestDefaultTypeInternal;
extern QueryTemplateRequestDefaultTypeInternal _QueryTemplateRequest_default_instance_;
class QueryTemplateResponse;
class QueryTemplateResponseDefaultTypeInternal;
extern QueryTemplateResponseDefaultTypeInternal _QueryTemplateResponse_default_instance_;
class ReferenceTemplateInfo;
class ReferenceTemplateInfoDefaultTypeInternal;
extern ReferenceTemplateInfoDefaultTypeInternal _ReferenceTemplateInfo_default_instance_;
class RegisteNodeRequest;
class RegisteNodeRequestDefaultTypeInternal;
extern RegisteNodeRequestDefaultTypeInternal _RegisteNodeRequest_default_instance_;
class RegisteWorkerResponse;
class RegisteWorkerResponseDefaultTypeInternal;
extern RegisteWorkerResponseDefaultTypeInternal _RegisteWorkerResponse_default_instance_;
class RestartNodeRequest;
class RestartNodeRequestDefaultTypeInternal;
extern RestartNodeRequestDefaultTypeInternal _RestartNodeRequest_default_instance_;
class SetTemplateRequest;
class SetTemplateRequestDefaultTypeInternal;
extern SetTemplateRequestDefaultTypeInternal _SetTemplateRequest_default_instance_;
class StopNodeRequest;
class StopNodeRequestDefaultTypeInternal;
extern StopNodeRequestDefaultTypeInternal _StopNodeRequest_default_instance_;
class TemplateItem;
class TemplateItemDefaultTypeInternal;
extern TemplateItemDefaultTypeInternal _TemplateItem_default_instance_;
}  // namespace Manager
namespace google {
namespace protobuf {
template<> ::Manager::AddTemplateRequest* Arena::CreateMaybeMessage<::Manager::AddTemplateRequest>(Arena*);
template<> ::Manager::DeleteTemplateRequest* Arena::CreateMaybeMessage<::Manager::DeleteTemplateRequest>(Arena*);
template<> ::Manager::EventReferenceModuleOffline* Arena::CreateMaybeMessage<::Manager::EventReferenceModuleOffline>(Arena*);
template<> ::Manager::EventReferenceModuleOnline* Arena::CreateMaybeMessage<::Manager::EventReferenceModuleOnline>(Arena*);
template<> ::Manager::NodeItem* Arena::CreateMaybeMessage<::Manager::NodeItem>(Arena*);
template<> ::Manager::PostLogMessageRequest* Arena::CreateMaybeMessage<::Manager::PostLogMessageRequest>(Arena*);
template<> ::Manager::QueryNodeRequest* Arena::CreateMaybeMessage<::Manager::QueryNodeRequest>(Arena*);
template<> ::Manager::QueryNodeResponse* Arena::CreateMaybeMessage<::Manager::QueryNodeResponse>(Arena*);
template<> ::Manager::QueryReferenceInfoResponse* Arena::CreateMaybeMessage<::Manager::QueryReferenceInfoResponse>(Arena*);
template<> ::Manager::QueryTemplateRequest* Arena::CreateMaybeMessage<::Manager::QueryTemplateRequest>(Arena*);
template<> ::Manager::QueryTemplateResponse* Arena::CreateMaybeMessage<::Manager::QueryTemplateResponse>(Arena*);
template<> ::Manager::ReferenceTemplateInfo* Arena::CreateMaybeMessage<::Manager::ReferenceTemplateInfo>(Arena*);
template<> ::Manager::RegisteNodeRequest* Arena::CreateMaybeMessage<::Manager::RegisteNodeRequest>(Arena*);
template<> ::Manager::RegisteWorkerResponse* Arena::CreateMaybeMessage<::Manager::RegisteWorkerResponse>(Arena*);
template<> ::Manager::RestartNodeRequest* Arena::CreateMaybeMessage<::Manager::RestartNodeRequest>(Arena*);
template<> ::Manager::SetTemplateRequest* Arena::CreateMaybeMessage<::Manager::SetTemplateRequest>(Arena*);
template<> ::Manager::StopNodeRequest* Arena::CreateMaybeMessage<::Manager::StopNodeRequest>(Arena*);
template<> ::Manager::TemplateItem* Arena::CreateMaybeMessage<::Manager::TemplateItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Manager {

enum PostLogMessageRequest_PostLogType {
  PostLogMessageRequest_PostLogType_Request = 0,
  PostLogMessageRequest_PostLogType_Response = 1,
  PostLogMessageRequest_PostLogType_PostLogMessageRequest_PostLogType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PostLogMessageRequest_PostLogType_PostLogMessageRequest_PostLogType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PostLogMessageRequest_PostLogType_IsValid(int value);
const PostLogMessageRequest_PostLogType PostLogMessageRequest_PostLogType_PostLogType_MIN = PostLogMessageRequest_PostLogType_Request;
const PostLogMessageRequest_PostLogType PostLogMessageRequest_PostLogType_PostLogType_MAX = PostLogMessageRequest_PostLogType_Response;
const int PostLogMessageRequest_PostLogType_PostLogType_ARRAYSIZE = PostLogMessageRequest_PostLogType_PostLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PostLogMessageRequest_PostLogType_descriptor();
inline const ::std::string& PostLogMessageRequest_PostLogType_Name(PostLogMessageRequest_PostLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PostLogMessageRequest_PostLogType_descriptor(), value);
}
inline bool PostLogMessageRequest_PostLogType_Parse(
    const ::std::string& name, PostLogMessageRequest_PostLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PostLogMessageRequest_PostLogType>(
    PostLogMessageRequest_PostLogType_descriptor(), name, value);
}
enum Events {
  Invalid = 0,
  ReferenceModuleOnline = 10,
  ReferenceModuleOffline = 11,
  Events_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Events_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Events_IsValid(int value);
const Events Events_MIN = Invalid;
const Events Events_MAX = ReferenceModuleOffline;
const int Events_ARRAYSIZE = Events_MAX + 1;

const ::google::protobuf::EnumDescriptor* Events_descriptor();
inline const ::std::string& Events_Name(Events value) {
  return ::google::protobuf::internal::NameOfEnum(
    Events_descriptor(), value);
}
inline bool Events_Parse(
    const ::std::string& name, Events* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Events>(
    Events_descriptor(), name, value);
}
enum Functions {
  PostLog = 0,
  RegisteWorker = 1,
  RegisteNode = 2,
  QueryNode = 3,
  AddTemplate = 4,
  DeleteTemplate = 5,
  SetTemplate = 6,
  QueryTemplate = 7,
  QueryReferenceInfo = 8,
  RestartNode = 9,
  StopNode = 10,
  Functions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Functions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Functions_IsValid(int value);
const Functions Functions_MIN = PostLog;
const Functions Functions_MAX = StopNode;
const int Functions_ARRAYSIZE = Functions_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functions_descriptor();
inline const ::std::string& Functions_Name(Functions value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functions_descriptor(), value);
}
inline bool Functions_Parse(
    const ::std::string& name, Functions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functions>(
    Functions_descriptor(), name, value);
}
// ===================================================================

class EventReferenceModuleOnline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.EventReferenceModuleOnline) */ {
 public:
  EventReferenceModuleOnline();
  virtual ~EventReferenceModuleOnline();

  EventReferenceModuleOnline(const EventReferenceModuleOnline& from);

  inline EventReferenceModuleOnline& operator=(const EventReferenceModuleOnline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventReferenceModuleOnline(EventReferenceModuleOnline&& from) noexcept
    : EventReferenceModuleOnline() {
    *this = ::std::move(from);
  }

  inline EventReferenceModuleOnline& operator=(EventReferenceModuleOnline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventReferenceModuleOnline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventReferenceModuleOnline* internal_default_instance() {
    return reinterpret_cast<const EventReferenceModuleOnline*>(
               &_EventReferenceModuleOnline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventReferenceModuleOnline* other);
  friend void swap(EventReferenceModuleOnline& a, EventReferenceModuleOnline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventReferenceModuleOnline* New() const final {
    return CreateMaybeMessage<EventReferenceModuleOnline>(NULL);
  }

  EventReferenceModuleOnline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventReferenceModuleOnline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventReferenceModuleOnline& from);
  void MergeFrom(const EventReferenceModuleOnline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReferenceModuleOnline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Manager.NodeItem item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  private:
  const ::Manager::NodeItem& _internal_item() const;
  public:
  const ::Manager::NodeItem& item() const;
  ::Manager::NodeItem* release_item();
  ::Manager::NodeItem* mutable_item();
  void set_allocated_item(::Manager::NodeItem* item);

  // @@protoc_insertion_point(class_scope:Manager.EventReferenceModuleOnline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Manager::NodeItem* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventReferenceModuleOffline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.EventReferenceModuleOffline) */ {
 public:
  EventReferenceModuleOffline();
  virtual ~EventReferenceModuleOffline();

  EventReferenceModuleOffline(const EventReferenceModuleOffline& from);

  inline EventReferenceModuleOffline& operator=(const EventReferenceModuleOffline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventReferenceModuleOffline(EventReferenceModuleOffline&& from) noexcept
    : EventReferenceModuleOffline() {
    *this = ::std::move(from);
  }

  inline EventReferenceModuleOffline& operator=(EventReferenceModuleOffline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventReferenceModuleOffline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventReferenceModuleOffline* internal_default_instance() {
    return reinterpret_cast<const EventReferenceModuleOffline*>(
               &_EventReferenceModuleOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventReferenceModuleOffline* other);
  friend void swap(EventReferenceModuleOffline& a, EventReferenceModuleOffline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventReferenceModuleOffline* New() const final {
    return CreateMaybeMessage<EventReferenceModuleOffline>(NULL);
  }

  EventReferenceModuleOffline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventReferenceModuleOffline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventReferenceModuleOffline& from);
  void MergeFrom(const EventReferenceModuleOffline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReferenceModuleOffline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed64 uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Manager.EventReferenceModuleOffline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostLogMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.PostLogMessageRequest) */ {
 public:
  PostLogMessageRequest();
  virtual ~PostLogMessageRequest();

  PostLogMessageRequest(const PostLogMessageRequest& from);

  inline PostLogMessageRequest& operator=(const PostLogMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostLogMessageRequest(PostLogMessageRequest&& from) noexcept
    : PostLogMessageRequest() {
    *this = ::std::move(from);
  }

  inline PostLogMessageRequest& operator=(PostLogMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostLogMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostLogMessageRequest* internal_default_instance() {
    return reinterpret_cast<const PostLogMessageRequest*>(
               &_PostLogMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PostLogMessageRequest* other);
  friend void swap(PostLogMessageRequest& a, PostLogMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostLogMessageRequest* New() const final {
    return CreateMaybeMessage<PostLogMessageRequest>(NULL);
  }

  PostLogMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PostLogMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PostLogMessageRequest& from);
  void MergeFrom(const PostLogMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostLogMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PostLogMessageRequest_PostLogType PostLogType;
  static const PostLogType Request =
    PostLogMessageRequest_PostLogType_Request;
  static const PostLogType Response =
    PostLogMessageRequest_PostLogType_Response;
  static inline bool PostLogType_IsValid(int value) {
    return PostLogMessageRequest_PostLogType_IsValid(value);
  }
  static const PostLogType PostLogType_MIN =
    PostLogMessageRequest_PostLogType_PostLogType_MIN;
  static const PostLogType PostLogType_MAX =
    PostLogMessageRequest_PostLogType_PostLogType_MAX;
  static const int PostLogType_ARRAYSIZE =
    PostLogMessageRequest_PostLogType_PostLogType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PostLogType_descriptor() {
    return PostLogMessageRequest_PostLogType_descriptor();
  }
  static inline const ::std::string& PostLogType_Name(PostLogType value) {
    return PostLogMessageRequest_PostLogType_Name(value);
  }
  static inline bool PostLogType_Parse(const ::std::string& name,
      PostLogType* value) {
    return PostLogMessageRequest_PostLogType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Sender = 3;
  void clear_sender();
  static const int kSenderFieldNumber = 3;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string Receiver = 4;
  void clear_receiver();
  static const int kReceiverFieldNumber = 4;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // string Function = 5;
  void clear_function();
  static const int kFunctionFieldNumber = 5;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // bytes Content = 7;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .Manager.PostLogMessageRequest.PostLogType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Manager::PostLogMessageRequest_PostLogType type() const;
  void set_type(::Manager::PostLogMessageRequest_PostLogType value);

  // .Core.ResultType Result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::Core::ResultType result() const;
  void set_result(::Core::ResultType value);

  // int32 Time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.PostLogMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int type_;
  int result_;
  ::google::protobuf::int32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisteWorkerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.RegisteWorkerResponse) */ {
 public:
  RegisteWorkerResponse();
  virtual ~RegisteWorkerResponse();

  RegisteWorkerResponse(const RegisteWorkerResponse& from);

  inline RegisteWorkerResponse& operator=(const RegisteWorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisteWorkerResponse(RegisteWorkerResponse&& from) noexcept
    : RegisteWorkerResponse() {
    *this = ::std::move(from);
  }

  inline RegisteWorkerResponse& operator=(RegisteWorkerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisteWorkerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteWorkerResponse* internal_default_instance() {
    return reinterpret_cast<const RegisteWorkerResponse*>(
               &_RegisteWorkerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RegisteWorkerResponse* other);
  friend void swap(RegisteWorkerResponse& a, RegisteWorkerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisteWorkerResponse* New() const final {
    return CreateMaybeMessage<RegisteWorkerResponse>(NULL);
  }

  RegisteWorkerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisteWorkerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisteWorkerResponse& from);
  void MergeFrom(const RegisteWorkerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteWorkerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Configuation = 2;
  void clear_configuation();
  static const int kConfiguationFieldNumber = 2;
  const ::std::string& configuation() const;
  void set_configuation(const ::std::string& value);
  #if LANG_CXX11
  void set_configuation(::std::string&& value);
  #endif
  void set_configuation(const char* value);
  void set_configuation(const void* value, size_t size);
  ::std::string* mutable_configuation();
  ::std::string* release_configuation();
  void set_allocated_configuation(::std::string* configuation);

  // int32 TemplateID = 1;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.RegisteWorkerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr configuation_;
  ::google::protobuf::int32 templateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisteNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.RegisteNodeRequest) */ {
 public:
  RegisteNodeRequest();
  virtual ~RegisteNodeRequest();

  RegisteNodeRequest(const RegisteNodeRequest& from);

  inline RegisteNodeRequest& operator=(const RegisteNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisteNodeRequest(RegisteNodeRequest&& from) noexcept
    : RegisteNodeRequest() {
    *this = ::std::move(from);
  }

  inline RegisteNodeRequest& operator=(RegisteNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisteNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RegisteNodeRequest*>(
               &_RegisteNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RegisteNodeRequest* other);
  friend void swap(RegisteNodeRequest& a, RegisteNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisteNodeRequest* New() const final {
    return CreateMaybeMessage<RegisteNodeRequest>(NULL);
  }

  RegisteNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisteNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisteNodeRequest& from);
  void MergeFrom(const RegisteNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 TemplateID = 1;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.RegisteNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 templateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceTemplateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.ReferenceTemplateInfo) */ {
 public:
  ReferenceTemplateInfo();
  virtual ~ReferenceTemplateInfo();

  ReferenceTemplateInfo(const ReferenceTemplateInfo& from);

  inline ReferenceTemplateInfo& operator=(const ReferenceTemplateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferenceTemplateInfo(ReferenceTemplateInfo&& from) noexcept
    : ReferenceTemplateInfo() {
    *this = ::std::move(from);
  }

  inline ReferenceTemplateInfo& operator=(ReferenceTemplateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceTemplateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceTemplateInfo* internal_default_instance() {
    return reinterpret_cast<const ReferenceTemplateInfo*>(
               &_ReferenceTemplateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReferenceTemplateInfo* other);
  friend void swap(ReferenceTemplateInfo& a, ReferenceTemplateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferenceTemplateInfo* New() const final {
    return CreateMaybeMessage<ReferenceTemplateInfo>(NULL);
  }

  ReferenceTemplateInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceTemplateInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferenceTemplateInfo& from);
  void MergeFrom(const ReferenceTemplateInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceTemplateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Manager.NodeItem NodeInfos = 3;
  int nodeinfos_size() const;
  void clear_nodeinfos();
  static const int kNodeInfosFieldNumber = 3;
  ::Manager::NodeItem* mutable_nodeinfos(int index);
  ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >*
      mutable_nodeinfos();
  const ::Manager::NodeItem& nodeinfos(int index) const;
  ::Manager::NodeItem* add_nodeinfos();
  const ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >&
      nodeinfos() const;

  // string ProvideFunctions = 2;
  void clear_providefunctions();
  static const int kProvideFunctionsFieldNumber = 2;
  const ::std::string& providefunctions() const;
  void set_providefunctions(const ::std::string& value);
  #if LANG_CXX11
  void set_providefunctions(::std::string&& value);
  #endif
  void set_providefunctions(const char* value);
  void set_providefunctions(const char* value, size_t size);
  ::std::string* mutable_providefunctions();
  ::std::string* release_providefunctions();
  void set_allocated_providefunctions(::std::string* providefunctions);

  // int32 TemplateID = 1;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.ReferenceTemplateInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem > nodeinfos_;
  ::google::protobuf::internal::ArenaStringPtr providefunctions_;
  ::google::protobuf::int32 templateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryReferenceInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.QueryReferenceInfoResponse) */ {
 public:
  QueryReferenceInfoResponse();
  virtual ~QueryReferenceInfoResponse();

  QueryReferenceInfoResponse(const QueryReferenceInfoResponse& from);

  inline QueryReferenceInfoResponse& operator=(const QueryReferenceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryReferenceInfoResponse(QueryReferenceInfoResponse&& from) noexcept
    : QueryReferenceInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryReferenceInfoResponse& operator=(QueryReferenceInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryReferenceInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryReferenceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryReferenceInfoResponse*>(
               &_QueryReferenceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(QueryReferenceInfoResponse* other);
  friend void swap(QueryReferenceInfoResponse& a, QueryReferenceInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryReferenceInfoResponse* New() const final {
    return CreateMaybeMessage<QueryReferenceInfoResponse>(NULL);
  }

  QueryReferenceInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryReferenceInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryReferenceInfoResponse& from);
  void MergeFrom(const QueryReferenceInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryReferenceInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Manager.ReferenceTemplateInfo TemplateInfos = 1;
  int templateinfos_size() const;
  void clear_templateinfos();
  static const int kTemplateInfosFieldNumber = 1;
  ::Manager::ReferenceTemplateInfo* mutable_templateinfos(int index);
  ::google::protobuf::RepeatedPtrField< ::Manager::ReferenceTemplateInfo >*
      mutable_templateinfos();
  const ::Manager::ReferenceTemplateInfo& templateinfos(int index) const;
  ::Manager::ReferenceTemplateInfo* add_templateinfos();
  const ::google::protobuf::RepeatedPtrField< ::Manager::ReferenceTemplateInfo >&
      templateinfos() const;

  // @@protoc_insertion_point(class_scope:Manager.QueryReferenceInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Manager::ReferenceTemplateInfo > templateinfos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.AddTemplateRequest) */ {
 public:
  AddTemplateRequest();
  virtual ~AddTemplateRequest();

  AddTemplateRequest(const AddTemplateRequest& from);

  inline AddTemplateRequest& operator=(const AddTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTemplateRequest(AddTemplateRequest&& from) noexcept
    : AddTemplateRequest() {
    *this = ::std::move(from);
  }

  inline AddTemplateRequest& operator=(AddTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const AddTemplateRequest*>(
               &_AddTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AddTemplateRequest* other);
  friend void swap(AddTemplateRequest& a, AddTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTemplateRequest* New() const final {
    return CreateMaybeMessage<AddTemplateRequest>(NULL);
  }

  AddTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTemplateRequest& from);
  void MergeFrom(const AddTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Manager.TemplateItem AddInfo = 1;
  bool has_addinfo() const;
  void clear_addinfo();
  static const int kAddInfoFieldNumber = 1;
  private:
  const ::Manager::TemplateItem& _internal_addinfo() const;
  public:
  const ::Manager::TemplateItem& addinfo() const;
  ::Manager::TemplateItem* release_addinfo();
  ::Manager::TemplateItem* mutable_addinfo();
  void set_allocated_addinfo(::Manager::TemplateItem* addinfo);

  // @@protoc_insertion_point(class_scope:Manager.AddTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Manager::TemplateItem* addinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.DeleteTemplateRequest) */ {
 public:
  DeleteTemplateRequest();
  virtual ~DeleteTemplateRequest();

  DeleteTemplateRequest(const DeleteTemplateRequest& from);

  inline DeleteTemplateRequest& operator=(const DeleteTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTemplateRequest(DeleteTemplateRequest&& from) noexcept
    : DeleteTemplateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTemplateRequest& operator=(DeleteTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTemplateRequest*>(
               &_DeleteTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteTemplateRequest* other);
  friend void swap(DeleteTemplateRequest& a, DeleteTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTemplateRequest* New() const final {
    return CreateMaybeMessage<DeleteTemplateRequest>(NULL);
  }

  DeleteTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTemplateRequest& from);
  void MergeFrom(const DeleteTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 TemplateID = 1;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.DeleteTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 templateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.SetTemplateRequest) */ {
 public:
  SetTemplateRequest();
  virtual ~SetTemplateRequest();

  SetTemplateRequest(const SetTemplateRequest& from);

  inline SetTemplateRequest& operator=(const SetTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTemplateRequest(SetTemplateRequest&& from) noexcept
    : SetTemplateRequest() {
    *this = ::std::move(from);
  }

  inline SetTemplateRequest& operator=(SetTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const SetTemplateRequest*>(
               &_SetTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SetTemplateRequest* other);
  friend void swap(SetTemplateRequest& a, SetTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTemplateRequest* New() const final {
    return CreateMaybeMessage<SetTemplateRequest>(NULL);
  }

  SetTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTemplateRequest& from);
  void MergeFrom(const SetTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Manager.TemplateItem SetInfo = 1;
  bool has_setinfo() const;
  void clear_setinfo();
  static const int kSetInfoFieldNumber = 1;
  private:
  const ::Manager::TemplateItem& _internal_setinfo() const;
  public:
  const ::Manager::TemplateItem& setinfo() const;
  ::Manager::TemplateItem* release_setinfo();
  ::Manager::TemplateItem* mutable_setinfo();
  void set_allocated_setinfo(::Manager::TemplateItem* setinfo);

  // @@protoc_insertion_point(class_scope:Manager.SetTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Manager::TemplateItem* setinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.QueryTemplateRequest) */ {
 public:
  QueryTemplateRequest();
  virtual ~QueryTemplateRequest();

  QueryTemplateRequest(const QueryTemplateRequest& from);

  inline QueryTemplateRequest& operator=(const QueryTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTemplateRequest(QueryTemplateRequest&& from) noexcept
    : QueryTemplateRequest() {
    *this = ::std::move(from);
  }

  inline QueryTemplateRequest& operator=(QueryTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTemplateRequest*>(
               &_QueryTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(QueryTemplateRequest* other);
  friend void swap(QueryTemplateRequest& a, QueryTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTemplateRequest* New() const final {
    return CreateMaybeMessage<QueryTemplateRequest>(NULL);
  }

  QueryTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryTemplateRequest& from);
  void MergeFrom(const QueryTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 TemplateID = 1;
  int templateid_size() const;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid(int index) const;
  void set_templateid(int index, ::google::protobuf::int32 value);
  void add_templateid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      templateid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_templateid();

  // @@protoc_insertion_point(class_scope:Manager.QueryTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > templateid_;
  mutable int _templateid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.StopNodeRequest) */ {
 public:
  StopNodeRequest();
  virtual ~StopNodeRequest();

  StopNodeRequest(const StopNodeRequest& from);

  inline StopNodeRequest& operator=(const StopNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopNodeRequest(StopNodeRequest&& from) noexcept
    : StopNodeRequest() {
    *this = ::std::move(from);
  }

  inline StopNodeRequest& operator=(StopNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopNodeRequest* internal_default_instance() {
    return reinterpret_cast<const StopNodeRequest*>(
               &_StopNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StopNodeRequest* other);
  friend void swap(StopNodeRequest& a, StopNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopNodeRequest* New() const final {
    return CreateMaybeMessage<StopNodeRequest>(NULL);
  }

  StopNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopNodeRequest& from);
  void MergeFrom(const StopNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed64 NodeID = 1;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 1;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Manager.StopNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RestartNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.RestartNodeRequest) */ {
 public:
  RestartNodeRequest();
  virtual ~RestartNodeRequest();

  RestartNodeRequest(const RestartNodeRequest& from);

  inline RestartNodeRequest& operator=(const RestartNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RestartNodeRequest(RestartNodeRequest&& from) noexcept
    : RestartNodeRequest() {
    *this = ::std::move(from);
  }

  inline RestartNodeRequest& operator=(RestartNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestartNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RestartNodeRequest*>(
               &_RestartNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RestartNodeRequest* other);
  friend void swap(RestartNodeRequest& a, RestartNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RestartNodeRequest* New() const final {
    return CreateMaybeMessage<RestartNodeRequest>(NULL);
  }

  RestartNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RestartNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RestartNodeRequest& from);
  void MergeFrom(const RestartNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed64 NodeID = 1;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 1;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Manager.RestartNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TemplateItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.TemplateItem) */ {
 public:
  TemplateItem();
  virtual ~TemplateItem();

  TemplateItem(const TemplateItem& from);

  inline TemplateItem& operator=(const TemplateItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TemplateItem(TemplateItem&& from) noexcept
    : TemplateItem() {
    *this = ::std::move(from);
  }

  inline TemplateItem& operator=(TemplateItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemplateItem* internal_default_instance() {
    return reinterpret_cast<const TemplateItem*>(
               &_TemplateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TemplateItem* other);
  friend void swap(TemplateItem& a, TemplateItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemplateItem* New() const final {
    return CreateMaybeMessage<TemplateItem>(NULL);
  }

  TemplateItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TemplateItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TemplateItem& from);
  void MergeFrom(const TemplateItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemplateItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Note = 3;
  void clear_note();
  static const int kNoteFieldNumber = 3;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  #if LANG_CXX11
  void set_note(::std::string&& value);
  #endif
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // bytes Configuation = 6;
  void clear_configuation();
  static const int kConfiguationFieldNumber = 6;
  const ::std::string& configuation() const;
  void set_configuation(const ::std::string& value);
  #if LANG_CXX11
  void set_configuation(::std::string&& value);
  #endif
  void set_configuation(const char* value);
  void set_configuation(const void* value, size_t size);
  ::std::string* mutable_configuation();
  ::std::string* release_configuation();
  void set_allocated_configuation(::std::string* configuation);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Replicas = 4;
  void clear_replicas();
  static const int kReplicasFieldNumber = 4;
  ::google::protobuf::int32 replicas() const;
  void set_replicas(::google::protobuf::int32 value);

  // int32 Created = 5;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  ::google::protobuf::int32 created() const;
  void set_created(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.TemplateItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  ::google::protobuf::internal::ArenaStringPtr configuation_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 replicas_;
  ::google::protobuf::int32 created_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryTemplateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.QueryTemplateResponse) */ {
 public:
  QueryTemplateResponse();
  virtual ~QueryTemplateResponse();

  QueryTemplateResponse(const QueryTemplateResponse& from);

  inline QueryTemplateResponse& operator=(const QueryTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTemplateResponse(QueryTemplateResponse&& from) noexcept
    : QueryTemplateResponse() {
    *this = ::std::move(from);
  }

  inline QueryTemplateResponse& operator=(QueryTemplateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTemplateResponse*>(
               &_QueryTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(QueryTemplateResponse* other);
  friend void swap(QueryTemplateResponse& a, QueryTemplateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTemplateResponse* New() const final {
    return CreateMaybeMessage<QueryTemplateResponse>(NULL);
  }

  QueryTemplateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryTemplateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryTemplateResponse& from);
  void MergeFrom(const QueryTemplateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTemplateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Manager.TemplateItem TemplateInfos = 1;
  int templateinfos_size() const;
  void clear_templateinfos();
  static const int kTemplateInfosFieldNumber = 1;
  ::Manager::TemplateItem* mutable_templateinfos(int index);
  ::google::protobuf::RepeatedPtrField< ::Manager::TemplateItem >*
      mutable_templateinfos();
  const ::Manager::TemplateItem& templateinfos(int index) const;
  ::Manager::TemplateItem* add_templateinfos();
  const ::google::protobuf::RepeatedPtrField< ::Manager::TemplateItem >&
      templateinfos() const;

  // @@protoc_insertion_point(class_scope:Manager.QueryTemplateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Manager::TemplateItem > templateinfos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.QueryNodeRequest) */ {
 public:
  QueryNodeRequest();
  virtual ~QueryNodeRequest();

  QueryNodeRequest(const QueryNodeRequest& from);

  inline QueryNodeRequest& operator=(const QueryNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryNodeRequest(QueryNodeRequest&& from) noexcept
    : QueryNodeRequest() {
    *this = ::std::move(from);
  }

  inline QueryNodeRequest& operator=(QueryNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryNodeRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNodeRequest*>(
               &_QueryNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(QueryNodeRequest* other);
  friend void swap(QueryNodeRequest& a, QueryNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryNodeRequest* New() const final {
    return CreateMaybeMessage<QueryNodeRequest>(NULL);
  }

  QueryNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryNodeRequest& from);
  void MergeFrom(const QueryNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 TemplateID = 1;
  int templateid_size() const;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  ::google::protobuf::int32 templateid(int index) const;
  void set_templateid(int index, ::google::protobuf::int32 value);
  void add_templateid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      templateid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_templateid();

  // @@protoc_insertion_point(class_scope:Manager.QueryNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > templateid_;
  mutable int _templateid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.NodeItem) */ {
 public:
  NodeItem();
  virtual ~NodeItem();

  NodeItem(const NodeItem& from);

  inline NodeItem& operator=(const NodeItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeItem(NodeItem&& from) noexcept
    : NodeItem() {
    *this = ::std::move(from);
  }

  inline NodeItem& operator=(NodeItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeItem* internal_default_instance() {
    return reinterpret_cast<const NodeItem*>(
               &_NodeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(NodeItem* other);
  friend void swap(NodeItem& a, NodeItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeItem* New() const final {
    return CreateMaybeMessage<NodeItem>(NULL);
  }

  NodeItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeItem& from);
  void MergeFrom(const NodeItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string TemplateName = 2;
  void clear_templatename();
  static const int kTemplateNameFieldNumber = 2;
  const ::std::string& templatename() const;
  void set_templatename(const ::std::string& value);
  #if LANG_CXX11
  void set_templatename(::std::string&& value);
  #endif
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  ::std::string* mutable_templatename();
  ::std::string* release_templatename();
  void set_allocated_templatename(::std::string* templatename);

  // string Address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string ActiveTime = 6;
  void clear_activetime();
  static const int kActiveTimeFieldNumber = 6;
  const ::std::string& activetime() const;
  void set_activetime(const ::std::string& value);
  #if LANG_CXX11
  void set_activetime(::std::string&& value);
  #endif
  void set_activetime(const char* value);
  void set_activetime(const char* value, size_t size);
  ::std::string* mutable_activetime();
  ::std::string* release_activetime();
  void set_allocated_activetime(::std::string* activetime);

  // fixed64 UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // int32 TemplateID = 3;
  void clear_templateid();
  static const int kTemplateIDFieldNumber = 3;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // int32 Port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Manager.NodeItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr templatename_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr activetime_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryNodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Manager.QueryNodeResponse) */ {
 public:
  QueryNodeResponse();
  virtual ~QueryNodeResponse();

  QueryNodeResponse(const QueryNodeResponse& from);

  inline QueryNodeResponse& operator=(const QueryNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryNodeResponse(QueryNodeResponse&& from) noexcept
    : QueryNodeResponse() {
    *this = ::std::move(from);
  }

  inline QueryNodeResponse& operator=(QueryNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryNodeResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNodeResponse*>(
               &_QueryNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(QueryNodeResponse* other);
  friend void swap(QueryNodeResponse& a, QueryNodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryNodeResponse* New() const final {
    return CreateMaybeMessage<QueryNodeResponse>(NULL);
  }

  QueryNodeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryNodeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryNodeResponse& from);
  void MergeFrom(const QueryNodeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Manager.NodeItem NodeInfos = 1;
  int nodeinfos_size() const;
  void clear_nodeinfos();
  static const int kNodeInfosFieldNumber = 1;
  ::Manager::NodeItem* mutable_nodeinfos(int index);
  ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >*
      mutable_nodeinfos();
  const ::Manager::NodeItem& nodeinfos(int index) const;
  ::Manager::NodeItem* add_nodeinfos();
  const ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >&
      nodeinfos() const;

  // @@protoc_insertion_point(class_scope:Manager.QueryNodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem > nodeinfos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventReferenceModuleOnline

// .Manager.NodeItem item = 1;
inline bool EventReferenceModuleOnline::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void EventReferenceModuleOnline::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::Manager::NodeItem& EventReferenceModuleOnline::_internal_item() const {
  return *item_;
}
inline const ::Manager::NodeItem& EventReferenceModuleOnline::item() const {
  const ::Manager::NodeItem* p = item_;
  // @@protoc_insertion_point(field_get:Manager.EventReferenceModuleOnline.item)
  return p != NULL ? *p : *reinterpret_cast<const ::Manager::NodeItem*>(
      &::Manager::_NodeItem_default_instance_);
}
inline ::Manager::NodeItem* EventReferenceModuleOnline::release_item() {
  // @@protoc_insertion_point(field_release:Manager.EventReferenceModuleOnline.item)
  
  ::Manager::NodeItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::Manager::NodeItem* EventReferenceModuleOnline::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::Manager::NodeItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Manager.EventReferenceModuleOnline.item)
  return item_;
}
inline void EventReferenceModuleOnline::set_allocated_item(::Manager::NodeItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Manager.EventReferenceModuleOnline.item)
}

// -------------------------------------------------------------------

// EventReferenceModuleOffline

// fixed64 uuid = 1;
inline void EventReferenceModuleOffline::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventReferenceModuleOffline::uuid() const {
  // @@protoc_insertion_point(field_get:Manager.EventReferenceModuleOffline.uuid)
  return uuid_;
}
inline void EventReferenceModuleOffline::set_uuid(::google::protobuf::uint64 value) {
  
  uuid_ = value;
  // @@protoc_insertion_point(field_set:Manager.EventReferenceModuleOffline.uuid)
}

// -------------------------------------------------------------------

// PostLogMessageRequest

// .Manager.PostLogMessageRequest.PostLogType Type = 1;
inline void PostLogMessageRequest::clear_type() {
  type_ = 0;
}
inline ::Manager::PostLogMessageRequest_PostLogType PostLogMessageRequest::type() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Type)
  return static_cast< ::Manager::PostLogMessageRequest_PostLogType >(type_);
}
inline void PostLogMessageRequest::set_type(::Manager::PostLogMessageRequest_PostLogType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Type)
}

// .Core.ResultType Result = 2;
inline void PostLogMessageRequest::clear_result() {
  result_ = 0;
}
inline ::Core::ResultType PostLogMessageRequest::result() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Result)
  return static_cast< ::Core::ResultType >(result_);
}
inline void PostLogMessageRequest::set_result(::Core::ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Result)
}

// string Sender = 3;
inline void PostLogMessageRequest::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostLogMessageRequest::sender() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Sender)
  return sender_.GetNoArena();
}
inline void PostLogMessageRequest::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Sender)
}
#if LANG_CXX11
inline void PostLogMessageRequest::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.PostLogMessageRequest.Sender)
}
#endif
inline void PostLogMessageRequest::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.PostLogMessageRequest.Sender)
}
inline void PostLogMessageRequest::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.PostLogMessageRequest.Sender)
}
inline ::std::string* PostLogMessageRequest::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Manager.PostLogMessageRequest.Sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostLogMessageRequest::release_sender() {
  // @@protoc_insertion_point(field_release:Manager.PostLogMessageRequest.Sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostLogMessageRequest::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Manager.PostLogMessageRequest.Sender)
}

// string Receiver = 4;
inline void PostLogMessageRequest::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostLogMessageRequest::receiver() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Receiver)
  return receiver_.GetNoArena();
}
inline void PostLogMessageRequest::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Receiver)
}
#if LANG_CXX11
inline void PostLogMessageRequest::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.PostLogMessageRequest.Receiver)
}
#endif
inline void PostLogMessageRequest::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.PostLogMessageRequest.Receiver)
}
inline void PostLogMessageRequest::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.PostLogMessageRequest.Receiver)
}
inline ::std::string* PostLogMessageRequest::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:Manager.PostLogMessageRequest.Receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostLogMessageRequest::release_receiver() {
  // @@protoc_insertion_point(field_release:Manager.PostLogMessageRequest.Receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostLogMessageRequest::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:Manager.PostLogMessageRequest.Receiver)
}

// string Function = 5;
inline void PostLogMessageRequest::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostLogMessageRequest::function() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Function)
  return function_.GetNoArena();
}
inline void PostLogMessageRequest::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Function)
}
#if LANG_CXX11
inline void PostLogMessageRequest::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.PostLogMessageRequest.Function)
}
#endif
inline void PostLogMessageRequest::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.PostLogMessageRequest.Function)
}
inline void PostLogMessageRequest::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.PostLogMessageRequest.Function)
}
inline ::std::string* PostLogMessageRequest::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:Manager.PostLogMessageRequest.Function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostLogMessageRequest::release_function() {
  // @@protoc_insertion_point(field_release:Manager.PostLogMessageRequest.Function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostLogMessageRequest::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:Manager.PostLogMessageRequest.Function)
}

// int32 Time = 6;
inline void PostLogMessageRequest::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 PostLogMessageRequest::time() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Time)
  return time_;
}
inline void PostLogMessageRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Time)
}

// bytes Content = 7;
inline void PostLogMessageRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostLogMessageRequest::content() const {
  // @@protoc_insertion_point(field_get:Manager.PostLogMessageRequest.Content)
  return content_.GetNoArena();
}
inline void PostLogMessageRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.PostLogMessageRequest.Content)
}
#if LANG_CXX11
inline void PostLogMessageRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.PostLogMessageRequest.Content)
}
#endif
inline void PostLogMessageRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.PostLogMessageRequest.Content)
}
inline void PostLogMessageRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.PostLogMessageRequest.Content)
}
inline ::std::string* PostLogMessageRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Manager.PostLogMessageRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostLogMessageRequest::release_content() {
  // @@protoc_insertion_point(field_release:Manager.PostLogMessageRequest.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostLogMessageRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Manager.PostLogMessageRequest.Content)
}

// -------------------------------------------------------------------

// RegisteWorkerResponse

// int32 TemplateID = 1;
inline void RegisteWorkerResponse::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 RegisteWorkerResponse::templateid() const {
  // @@protoc_insertion_point(field_get:Manager.RegisteWorkerResponse.TemplateID)
  return templateid_;
}
inline void RegisteWorkerResponse::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Manager.RegisteWorkerResponse.TemplateID)
}

// bytes Configuation = 2;
inline void RegisteWorkerResponse::clear_configuation() {
  configuation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisteWorkerResponse::configuation() const {
  // @@protoc_insertion_point(field_get:Manager.RegisteWorkerResponse.Configuation)
  return configuation_.GetNoArena();
}
inline void RegisteWorkerResponse::set_configuation(const ::std::string& value) {
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.RegisteWorkerResponse.Configuation)
}
#if LANG_CXX11
inline void RegisteWorkerResponse::set_configuation(::std::string&& value) {
  
  configuation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.RegisteWorkerResponse.Configuation)
}
#endif
inline void RegisteWorkerResponse::set_configuation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.RegisteWorkerResponse.Configuation)
}
inline void RegisteWorkerResponse::set_configuation(const void* value, size_t size) {
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.RegisteWorkerResponse.Configuation)
}
inline ::std::string* RegisteWorkerResponse::mutable_configuation() {
  
  // @@protoc_insertion_point(field_mutable:Manager.RegisteWorkerResponse.Configuation)
  return configuation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisteWorkerResponse::release_configuation() {
  // @@protoc_insertion_point(field_release:Manager.RegisteWorkerResponse.Configuation)
  
  return configuation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteWorkerResponse::set_allocated_configuation(::std::string* configuation) {
  if (configuation != NULL) {
    
  } else {
    
  }
  configuation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuation);
  // @@protoc_insertion_point(field_set_allocated:Manager.RegisteWorkerResponse.Configuation)
}

// -------------------------------------------------------------------

// RegisteNodeRequest

// int32 TemplateID = 1;
inline void RegisteNodeRequest::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 RegisteNodeRequest::templateid() const {
  // @@protoc_insertion_point(field_get:Manager.RegisteNodeRequest.TemplateID)
  return templateid_;
}
inline void RegisteNodeRequest::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Manager.RegisteNodeRequest.TemplateID)
}

// -------------------------------------------------------------------

// ReferenceTemplateInfo

// int32 TemplateID = 1;
inline void ReferenceTemplateInfo::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 ReferenceTemplateInfo::templateid() const {
  // @@protoc_insertion_point(field_get:Manager.ReferenceTemplateInfo.TemplateID)
  return templateid_;
}
inline void ReferenceTemplateInfo::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Manager.ReferenceTemplateInfo.TemplateID)
}

// string ProvideFunctions = 2;
inline void ReferenceTemplateInfo::clear_providefunctions() {
  providefunctions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceTemplateInfo::providefunctions() const {
  // @@protoc_insertion_point(field_get:Manager.ReferenceTemplateInfo.ProvideFunctions)
  return providefunctions_.GetNoArena();
}
inline void ReferenceTemplateInfo::set_providefunctions(const ::std::string& value) {
  
  providefunctions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.ReferenceTemplateInfo.ProvideFunctions)
}
#if LANG_CXX11
inline void ReferenceTemplateInfo::set_providefunctions(::std::string&& value) {
  
  providefunctions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.ReferenceTemplateInfo.ProvideFunctions)
}
#endif
inline void ReferenceTemplateInfo::set_providefunctions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  providefunctions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.ReferenceTemplateInfo.ProvideFunctions)
}
inline void ReferenceTemplateInfo::set_providefunctions(const char* value, size_t size) {
  
  providefunctions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.ReferenceTemplateInfo.ProvideFunctions)
}
inline ::std::string* ReferenceTemplateInfo::mutable_providefunctions() {
  
  // @@protoc_insertion_point(field_mutable:Manager.ReferenceTemplateInfo.ProvideFunctions)
  return providefunctions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceTemplateInfo::release_providefunctions() {
  // @@protoc_insertion_point(field_release:Manager.ReferenceTemplateInfo.ProvideFunctions)
  
  return providefunctions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceTemplateInfo::set_allocated_providefunctions(::std::string* providefunctions) {
  if (providefunctions != NULL) {
    
  } else {
    
  }
  providefunctions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), providefunctions);
  // @@protoc_insertion_point(field_set_allocated:Manager.ReferenceTemplateInfo.ProvideFunctions)
}

// repeated .Manager.NodeItem NodeInfos = 3;
inline int ReferenceTemplateInfo::nodeinfos_size() const {
  return nodeinfos_.size();
}
inline void ReferenceTemplateInfo::clear_nodeinfos() {
  nodeinfos_.Clear();
}
inline ::Manager::NodeItem* ReferenceTemplateInfo::mutable_nodeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Manager.ReferenceTemplateInfo.NodeInfos)
  return nodeinfos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >*
ReferenceTemplateInfo::mutable_nodeinfos() {
  // @@protoc_insertion_point(field_mutable_list:Manager.ReferenceTemplateInfo.NodeInfos)
  return &nodeinfos_;
}
inline const ::Manager::NodeItem& ReferenceTemplateInfo::nodeinfos(int index) const {
  // @@protoc_insertion_point(field_get:Manager.ReferenceTemplateInfo.NodeInfos)
  return nodeinfos_.Get(index);
}
inline ::Manager::NodeItem* ReferenceTemplateInfo::add_nodeinfos() {
  // @@protoc_insertion_point(field_add:Manager.ReferenceTemplateInfo.NodeInfos)
  return nodeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >&
ReferenceTemplateInfo::nodeinfos() const {
  // @@protoc_insertion_point(field_list:Manager.ReferenceTemplateInfo.NodeInfos)
  return nodeinfos_;
}

// -------------------------------------------------------------------

// QueryReferenceInfoResponse

// repeated .Manager.ReferenceTemplateInfo TemplateInfos = 1;
inline int QueryReferenceInfoResponse::templateinfos_size() const {
  return templateinfos_.size();
}
inline void QueryReferenceInfoResponse::clear_templateinfos() {
  templateinfos_.Clear();
}
inline ::Manager::ReferenceTemplateInfo* QueryReferenceInfoResponse::mutable_templateinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Manager.QueryReferenceInfoResponse.TemplateInfos)
  return templateinfos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Manager::ReferenceTemplateInfo >*
QueryReferenceInfoResponse::mutable_templateinfos() {
  // @@protoc_insertion_point(field_mutable_list:Manager.QueryReferenceInfoResponse.TemplateInfos)
  return &templateinfos_;
}
inline const ::Manager::ReferenceTemplateInfo& QueryReferenceInfoResponse::templateinfos(int index) const {
  // @@protoc_insertion_point(field_get:Manager.QueryReferenceInfoResponse.TemplateInfos)
  return templateinfos_.Get(index);
}
inline ::Manager::ReferenceTemplateInfo* QueryReferenceInfoResponse::add_templateinfos() {
  // @@protoc_insertion_point(field_add:Manager.QueryReferenceInfoResponse.TemplateInfos)
  return templateinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Manager::ReferenceTemplateInfo >&
QueryReferenceInfoResponse::templateinfos() const {
  // @@protoc_insertion_point(field_list:Manager.QueryReferenceInfoResponse.TemplateInfos)
  return templateinfos_;
}

// -------------------------------------------------------------------

// AddTemplateRequest

// .Manager.TemplateItem AddInfo = 1;
inline bool AddTemplateRequest::has_addinfo() const {
  return this != internal_default_instance() && addinfo_ != NULL;
}
inline void AddTemplateRequest::clear_addinfo() {
  if (GetArenaNoVirtual() == NULL && addinfo_ != NULL) {
    delete addinfo_;
  }
  addinfo_ = NULL;
}
inline const ::Manager::TemplateItem& AddTemplateRequest::_internal_addinfo() const {
  return *addinfo_;
}
inline const ::Manager::TemplateItem& AddTemplateRequest::addinfo() const {
  const ::Manager::TemplateItem* p = addinfo_;
  // @@protoc_insertion_point(field_get:Manager.AddTemplateRequest.AddInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::Manager::TemplateItem*>(
      &::Manager::_TemplateItem_default_instance_);
}
inline ::Manager::TemplateItem* AddTemplateRequest::release_addinfo() {
  // @@protoc_insertion_point(field_release:Manager.AddTemplateRequest.AddInfo)
  
  ::Manager::TemplateItem* temp = addinfo_;
  addinfo_ = NULL;
  return temp;
}
inline ::Manager::TemplateItem* AddTemplateRequest::mutable_addinfo() {
  
  if (addinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::Manager::TemplateItem>(GetArenaNoVirtual());
    addinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Manager.AddTemplateRequest.AddInfo)
  return addinfo_;
}
inline void AddTemplateRequest::set_allocated_addinfo(::Manager::TemplateItem* addinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addinfo_;
  }
  if (addinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addinfo, submessage_arena);
    }
    
  } else {
    
  }
  addinfo_ = addinfo;
  // @@protoc_insertion_point(field_set_allocated:Manager.AddTemplateRequest.AddInfo)
}

// -------------------------------------------------------------------

// DeleteTemplateRequest

// int32 TemplateID = 1;
inline void DeleteTemplateRequest::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 DeleteTemplateRequest::templateid() const {
  // @@protoc_insertion_point(field_get:Manager.DeleteTemplateRequest.TemplateID)
  return templateid_;
}
inline void DeleteTemplateRequest::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Manager.DeleteTemplateRequest.TemplateID)
}

// -------------------------------------------------------------------

// SetTemplateRequest

// .Manager.TemplateItem SetInfo = 1;
inline bool SetTemplateRequest::has_setinfo() const {
  return this != internal_default_instance() && setinfo_ != NULL;
}
inline void SetTemplateRequest::clear_setinfo() {
  if (GetArenaNoVirtual() == NULL && setinfo_ != NULL) {
    delete setinfo_;
  }
  setinfo_ = NULL;
}
inline const ::Manager::TemplateItem& SetTemplateRequest::_internal_setinfo() const {
  return *setinfo_;
}
inline const ::Manager::TemplateItem& SetTemplateRequest::setinfo() const {
  const ::Manager::TemplateItem* p = setinfo_;
  // @@protoc_insertion_point(field_get:Manager.SetTemplateRequest.SetInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::Manager::TemplateItem*>(
      &::Manager::_TemplateItem_default_instance_);
}
inline ::Manager::TemplateItem* SetTemplateRequest::release_setinfo() {
  // @@protoc_insertion_point(field_release:Manager.SetTemplateRequest.SetInfo)
  
  ::Manager::TemplateItem* temp = setinfo_;
  setinfo_ = NULL;
  return temp;
}
inline ::Manager::TemplateItem* SetTemplateRequest::mutable_setinfo() {
  
  if (setinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::Manager::TemplateItem>(GetArenaNoVirtual());
    setinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Manager.SetTemplateRequest.SetInfo)
  return setinfo_;
}
inline void SetTemplateRequest::set_allocated_setinfo(::Manager::TemplateItem* setinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete setinfo_;
  }
  if (setinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      setinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setinfo, submessage_arena);
    }
    
  } else {
    
  }
  setinfo_ = setinfo;
  // @@protoc_insertion_point(field_set_allocated:Manager.SetTemplateRequest.SetInfo)
}

// -------------------------------------------------------------------

// QueryTemplateRequest

// repeated int32 TemplateID = 1;
inline int QueryTemplateRequest::templateid_size() const {
  return templateid_.size();
}
inline void QueryTemplateRequest::clear_templateid() {
  templateid_.Clear();
}
inline ::google::protobuf::int32 QueryTemplateRequest::templateid(int index) const {
  // @@protoc_insertion_point(field_get:Manager.QueryTemplateRequest.TemplateID)
  return templateid_.Get(index);
}
inline void QueryTemplateRequest::set_templateid(int index, ::google::protobuf::int32 value) {
  templateid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Manager.QueryTemplateRequest.TemplateID)
}
inline void QueryTemplateRequest::add_templateid(::google::protobuf::int32 value) {
  templateid_.Add(value);
  // @@protoc_insertion_point(field_add:Manager.QueryTemplateRequest.TemplateID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryTemplateRequest::templateid() const {
  // @@protoc_insertion_point(field_list:Manager.QueryTemplateRequest.TemplateID)
  return templateid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryTemplateRequest::mutable_templateid() {
  // @@protoc_insertion_point(field_mutable_list:Manager.QueryTemplateRequest.TemplateID)
  return &templateid_;
}

// -------------------------------------------------------------------

// StopNodeRequest

// fixed64 NodeID = 1;
inline void StopNodeRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StopNodeRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:Manager.StopNodeRequest.NodeID)
  return nodeid_;
}
inline void StopNodeRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:Manager.StopNodeRequest.NodeID)
}

// -------------------------------------------------------------------

// RestartNodeRequest

// fixed64 NodeID = 1;
inline void RestartNodeRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RestartNodeRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:Manager.RestartNodeRequest.NodeID)
  return nodeid_;
}
inline void RestartNodeRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:Manager.RestartNodeRequest.NodeID)
}

// -------------------------------------------------------------------

// TemplateItem

// int32 ID = 1;
inline void TemplateItem::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TemplateItem::id() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.ID)
  return id_;
}
inline void TemplateItem::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.ID)
}

// string Name = 2;
inline void TemplateItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TemplateItem::name() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.Name)
  return name_.GetNoArena();
}
inline void TemplateItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.Name)
}
#if LANG_CXX11
inline void TemplateItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.TemplateItem.Name)
}
#endif
inline void TemplateItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.TemplateItem.Name)
}
inline void TemplateItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.TemplateItem.Name)
}
inline ::std::string* TemplateItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Manager.TemplateItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TemplateItem::release_name() {
  // @@protoc_insertion_point(field_release:Manager.TemplateItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TemplateItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Manager.TemplateItem.Name)
}

// string Note = 3;
inline void TemplateItem::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TemplateItem::note() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.Note)
  return note_.GetNoArena();
}
inline void TemplateItem::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.Note)
}
#if LANG_CXX11
inline void TemplateItem::set_note(::std::string&& value) {
  
  note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.TemplateItem.Note)
}
#endif
inline void TemplateItem::set_note(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.TemplateItem.Note)
}
inline void TemplateItem::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.TemplateItem.Note)
}
inline ::std::string* TemplateItem::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:Manager.TemplateItem.Note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TemplateItem::release_note() {
  // @@protoc_insertion_point(field_release:Manager.TemplateItem.Note)
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TemplateItem::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:Manager.TemplateItem.Note)
}

// int32 Replicas = 4;
inline void TemplateItem::clear_replicas() {
  replicas_ = 0;
}
inline ::google::protobuf::int32 TemplateItem::replicas() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.Replicas)
  return replicas_;
}
inline void TemplateItem::set_replicas(::google::protobuf::int32 value) {
  
  replicas_ = value;
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.Replicas)
}

// int32 Created = 5;
inline void TemplateItem::clear_created() {
  created_ = 0;
}
inline ::google::protobuf::int32 TemplateItem::created() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.Created)
  return created_;
}
inline void TemplateItem::set_created(::google::protobuf::int32 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.Created)
}

// bytes Configuation = 6;
inline void TemplateItem::clear_configuation() {
  configuation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TemplateItem::configuation() const {
  // @@protoc_insertion_point(field_get:Manager.TemplateItem.Configuation)
  return configuation_.GetNoArena();
}
inline void TemplateItem::set_configuation(const ::std::string& value) {
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.TemplateItem.Configuation)
}
#if LANG_CXX11
inline void TemplateItem::set_configuation(::std::string&& value) {
  
  configuation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.TemplateItem.Configuation)
}
#endif
inline void TemplateItem::set_configuation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.TemplateItem.Configuation)
}
inline void TemplateItem::set_configuation(const void* value, size_t size) {
  
  configuation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.TemplateItem.Configuation)
}
inline ::std::string* TemplateItem::mutable_configuation() {
  
  // @@protoc_insertion_point(field_mutable:Manager.TemplateItem.Configuation)
  return configuation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TemplateItem::release_configuation() {
  // @@protoc_insertion_point(field_release:Manager.TemplateItem.Configuation)
  
  return configuation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TemplateItem::set_allocated_configuation(::std::string* configuation) {
  if (configuation != NULL) {
    
  } else {
    
  }
  configuation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuation);
  // @@protoc_insertion_point(field_set_allocated:Manager.TemplateItem.Configuation)
}

// -------------------------------------------------------------------

// QueryTemplateResponse

// repeated .Manager.TemplateItem TemplateInfos = 1;
inline int QueryTemplateResponse::templateinfos_size() const {
  return templateinfos_.size();
}
inline void QueryTemplateResponse::clear_templateinfos() {
  templateinfos_.Clear();
}
inline ::Manager::TemplateItem* QueryTemplateResponse::mutable_templateinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Manager.QueryTemplateResponse.TemplateInfos)
  return templateinfos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Manager::TemplateItem >*
QueryTemplateResponse::mutable_templateinfos() {
  // @@protoc_insertion_point(field_mutable_list:Manager.QueryTemplateResponse.TemplateInfos)
  return &templateinfos_;
}
inline const ::Manager::TemplateItem& QueryTemplateResponse::templateinfos(int index) const {
  // @@protoc_insertion_point(field_get:Manager.QueryTemplateResponse.TemplateInfos)
  return templateinfos_.Get(index);
}
inline ::Manager::TemplateItem* QueryTemplateResponse::add_templateinfos() {
  // @@protoc_insertion_point(field_add:Manager.QueryTemplateResponse.TemplateInfos)
  return templateinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Manager::TemplateItem >&
QueryTemplateResponse::templateinfos() const {
  // @@protoc_insertion_point(field_list:Manager.QueryTemplateResponse.TemplateInfos)
  return templateinfos_;
}

// -------------------------------------------------------------------

// QueryNodeRequest

// repeated int32 TemplateID = 1;
inline int QueryNodeRequest::templateid_size() const {
  return templateid_.size();
}
inline void QueryNodeRequest::clear_templateid() {
  templateid_.Clear();
}
inline ::google::protobuf::int32 QueryNodeRequest::templateid(int index) const {
  // @@protoc_insertion_point(field_get:Manager.QueryNodeRequest.TemplateID)
  return templateid_.Get(index);
}
inline void QueryNodeRequest::set_templateid(int index, ::google::protobuf::int32 value) {
  templateid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Manager.QueryNodeRequest.TemplateID)
}
inline void QueryNodeRequest::add_templateid(::google::protobuf::int32 value) {
  templateid_.Add(value);
  // @@protoc_insertion_point(field_add:Manager.QueryNodeRequest.TemplateID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryNodeRequest::templateid() const {
  // @@protoc_insertion_point(field_list:Manager.QueryNodeRequest.TemplateID)
  return templateid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryNodeRequest::mutable_templateid() {
  // @@protoc_insertion_point(field_mutable_list:Manager.QueryNodeRequest.TemplateID)
  return &templateid_;
}

// -------------------------------------------------------------------

// NodeItem

// fixed64 UUID = 1;
inline void NodeItem::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeItem::uuid() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.UUID)
  return uuid_;
}
inline void NodeItem::set_uuid(::google::protobuf::uint64 value) {
  
  uuid_ = value;
  // @@protoc_insertion_point(field_set:Manager.NodeItem.UUID)
}

// string TemplateName = 2;
inline void NodeItem::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeItem::templatename() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.TemplateName)
  return templatename_.GetNoArena();
}
inline void NodeItem::set_templatename(const ::std::string& value) {
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.NodeItem.TemplateName)
}
#if LANG_CXX11
inline void NodeItem::set_templatename(::std::string&& value) {
  
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.NodeItem.TemplateName)
}
#endif
inline void NodeItem::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.NodeItem.TemplateName)
}
inline void NodeItem::set_templatename(const char* value, size_t size) {
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.NodeItem.TemplateName)
}
inline ::std::string* NodeItem::mutable_templatename() {
  
  // @@protoc_insertion_point(field_mutable:Manager.NodeItem.TemplateName)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeItem::release_templatename() {
  // @@protoc_insertion_point(field_release:Manager.NodeItem.TemplateName)
  
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeItem::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    
  } else {
    
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:Manager.NodeItem.TemplateName)
}

// int32 TemplateID = 3;
inline void NodeItem::clear_templateid() {
  templateid_ = 0;
}
inline ::google::protobuf::int32 NodeItem::templateid() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.TemplateID)
  return templateid_;
}
inline void NodeItem::set_templateid(::google::protobuf::int32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:Manager.NodeItem.TemplateID)
}

// string Address = 4;
inline void NodeItem::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeItem::address() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.Address)
  return address_.GetNoArena();
}
inline void NodeItem::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.NodeItem.Address)
}
#if LANG_CXX11
inline void NodeItem::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.NodeItem.Address)
}
#endif
inline void NodeItem::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.NodeItem.Address)
}
inline void NodeItem::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.NodeItem.Address)
}
inline ::std::string* NodeItem::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Manager.NodeItem.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeItem::release_address() {
  // @@protoc_insertion_point(field_release:Manager.NodeItem.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeItem::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Manager.NodeItem.Address)
}

// int32 Port = 5;
inline void NodeItem::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 NodeItem::port() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.Port)
  return port_;
}
inline void NodeItem::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Manager.NodeItem.Port)
}

// string ActiveTime = 6;
inline void NodeItem::clear_activetime() {
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeItem::activetime() const {
  // @@protoc_insertion_point(field_get:Manager.NodeItem.ActiveTime)
  return activetime_.GetNoArena();
}
inline void NodeItem::set_activetime(const ::std::string& value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Manager.NodeItem.ActiveTime)
}
#if LANG_CXX11
inline void NodeItem::set_activetime(::std::string&& value) {
  
  activetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Manager.NodeItem.ActiveTime)
}
#endif
inline void NodeItem::set_activetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Manager.NodeItem.ActiveTime)
}
inline void NodeItem::set_activetime(const char* value, size_t size) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Manager.NodeItem.ActiveTime)
}
inline ::std::string* NodeItem::mutable_activetime() {
  
  // @@protoc_insertion_point(field_mutable:Manager.NodeItem.ActiveTime)
  return activetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeItem::release_activetime() {
  // @@protoc_insertion_point(field_release:Manager.NodeItem.ActiveTime)
  
  return activetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeItem::set_allocated_activetime(::std::string* activetime) {
  if (activetime != NULL) {
    
  } else {
    
  }
  activetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetime);
  // @@protoc_insertion_point(field_set_allocated:Manager.NodeItem.ActiveTime)
}

// -------------------------------------------------------------------

// QueryNodeResponse

// repeated .Manager.NodeItem NodeInfos = 1;
inline int QueryNodeResponse::nodeinfos_size() const {
  return nodeinfos_.size();
}
inline void QueryNodeResponse::clear_nodeinfos() {
  nodeinfos_.Clear();
}
inline ::Manager::NodeItem* QueryNodeResponse::mutable_nodeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Manager.QueryNodeResponse.NodeInfos)
  return nodeinfos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >*
QueryNodeResponse::mutable_nodeinfos() {
  // @@protoc_insertion_point(field_mutable_list:Manager.QueryNodeResponse.NodeInfos)
  return &nodeinfos_;
}
inline const ::Manager::NodeItem& QueryNodeResponse::nodeinfos(int index) const {
  // @@protoc_insertion_point(field_get:Manager.QueryNodeResponse.NodeInfos)
  return nodeinfos_.Get(index);
}
inline ::Manager::NodeItem* QueryNodeResponse::add_nodeinfos() {
  // @@protoc_insertion_point(field_add:Manager.QueryNodeResponse.NodeInfos)
  return nodeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Manager::NodeItem >&
QueryNodeResponse::nodeinfos() const {
  // @@protoc_insertion_point(field_list:Manager.QueryNodeResponse.NodeInfos)
  return nodeinfos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Manager

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Manager::PostLogMessageRequest_PostLogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Manager::PostLogMessageRequest_PostLogType>() {
  return ::Manager::PostLogMessageRequest_PostLogType_descriptor();
}
template <> struct is_proto_enum< ::Manager::Events> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Manager::Events>() {
  return ::Manager::Events_descriptor();
}
template <> struct is_proto_enum< ::Manager::Functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Manager::Functions>() {
  return ::Manager::Functions_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_manager_2eproto
