syntax = "proto3";
package Protocol;

// Type
enum ModuleType{
    Unconfigured = 0;
    Control = 1;
    Firewall = 2;
    Gateway = 3;
    Data = 4;
    Process = 5;
    DB = 6;
}

// Result
enum ResultType{    
    Succeed = 0;
    Error = 1;
    Warning = 2;
    Retry = 3;
    Invalid = 4;
}

// LogLevel
enum LogLevel{
    All = 0;
    Verbos = 1;
    Debug = 2;
    Info = 3;
    Warn = 4;
    Err = 5;
    Assert = 6;
    Fatal = 7;  
}


enum Functions{
    /* Flow: Client -> Process
       Response: Content - result with JSON string. 
    */
    ProcessMessage=0;
    /*------------------------------------------------
          Manage function for module to module
    -------------------------------------------------*/
    /* Flow: All -> Control
       Response: post log message to control
    */
    PostLog=1;
    /* Flow:  All -> Control
       Response: Content(string) - the uuid for sender.
                 Extend: config data
    */
    RegisteServer=2;
    /* Flow:  ControlUI -> Control
       Response: Content(JSON) - Config template  list.
                    Format: 
                    {
                      "ServerList": [
                        {
                          "UUID": "",
                          "Type":"",
                          "TemplateID": ""
                        }
                      ]
                    }
    */
    GetServerList=3;
    /* Flow: Control -> All
       Request: 
       Response: NO
    */
    RestartService=4;
    /* Flow: ControlUI -> Control
       Response: Content(JSON) - Config template  list.
                    Format: 
                    {
                      "TemplateList": [
                        {
                          "ID": "",
                          "Name":"",
                          "Note":"",
                          "Replicas":"",
                          "Configuation":""
                        }
                      ]
                    }
    */
    GetTemplateList=5;
    /* Flow: ControlUI -> Control
       Request: Content(JSON) - config info.
                    Format:
                    {
                      "ID":"",
                      "Name":"",
                      "Note":"",
                      "replicas":"",
                      "Configuation":"" //base64
                    }
       Response: Result
    */
    SetTemplateConfig=6; 
}

message DataPackage
{
    // 功能
    Functions Function = 1;
    // 优先级
    int32 PriorityLevel = 2;
    // 流水号
    int64 SerialNumber = 3;
    // 校验串
    string CheckString = 4;
    // 发送者的唯一标识符
    string Sender = 5;
    // 指定接收者为指定类型的所有成员
    int32 Receiver = 6;
    // 结果代码
    ResultType Result = 7;
    // 消息内容
    string Content = 8;
    // 扩展数据
    bytes Extend = 9;
}

message GLOBAL_CONFIG
{
    // Network 
    int32   ListenPort = 1;
    bool    EnableSSL=2;
    string  CertFilePath=3;
    string  KeyFilePath=4;
    string  CertPasswd=5;
    int32   ConnectTime=6;
    int32   ReceiveTime=7;

    // Log 
    string  LogPath = 8;
    LogLevel   LogLevel =9 ;
    bool    DebugMode = 10;

    // Performance
    int32   MQThreadQuantity =11;// Message queue work thread quantity 
    int32   EPollThreadQuantity=12;// EPoll event process thread quantity
    int32   ProcessThreadQuantity=13;// work thread for DataPackage process quantity
    int32   PrioritySize=14;// Priority Size for the list. the priority level cannot bigger than this value.

    // Module
    ModuleType Type = 15;
    string  ModuleName = 16;
    string  ModulePath = 17;
    bytes   ModuleConfig = 18;
};

