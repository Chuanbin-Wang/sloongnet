// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class CONTROL_CONFIG;
class DATA_CONFIG;
class DB_CONFIG;
class DataPackage;
class FIREWALL_CONFIG;
class GATEWAY_CONFIG;
class GLOBAL_CONFIG;
class PROCESS_CONFIG;

enum ModuleType {
  Unconfigured = 0,
  Control = 1,
  Firewall = 2,
  Gateway = 3,
  Data = 4,
  Process = 5,
  DB = 6,
  ModuleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ModuleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ModuleType_IsValid(int value);
const ModuleType ModuleType_MIN = Unconfigured;
const ModuleType ModuleType_MAX = DB;
const int ModuleType_ARRAYSIZE = ModuleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModuleType_descriptor();
inline const ::std::string& ModuleType_Name(ModuleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModuleType_descriptor(), value);
}
inline bool ModuleType_Parse(
    const ::std::string& name, ModuleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModuleType>(
    ModuleType_descriptor(), name, value);
}
enum ResultType {
  Succeed = 0,
  Error = 1,
  Warning = 2,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = Succeed;
const ResultType ResultType_MAX = Warning;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
// ===================================================================

class DataPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.DataPackage) */ {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage& default_instance();

  void Swap(DataPackage* other);

  // implements Message ----------------------------------------------

  inline DataPackage* New() const { return New(NULL); }

  DataPackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  ::google::protobuf::int32 function() const;
  void set_function(::google::protobuf::int32 value);

  // optional int32 PriorityLevel = 2;
  void clear_prioritylevel();
  static const int kPriorityLevelFieldNumber = 2;
  ::google::protobuf::int32 prioritylevel() const;
  void set_prioritylevel(::google::protobuf::int32 value);

  // optional int64 SerialNumber = 3;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 3;
  ::google::protobuf::int64 serialnumber() const;
  void set_serialnumber(::google::protobuf::int64 value);

  // optional string CheckString = 4;
  void clear_checkstring();
  static const int kCheckStringFieldNumber = 4;
  const ::std::string& checkstring() const;
  void set_checkstring(const ::std::string& value);
  void set_checkstring(const char* value);
  void set_checkstring(const char* value, size_t size);
  ::std::string* mutable_checkstring();
  ::std::string* release_checkstring();
  void set_allocated_checkstring(::std::string* checkstring);

  // optional string Sender = 5;
  void clear_sender();
  static const int kSenderFieldNumber = 5;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // optional int32 Receiver = 6;
  void clear_receiver();
  static const int kReceiverFieldNumber = 6;
  ::google::protobuf::int32 receiver() const;
  void set_receiver(::google::protobuf::int32 value);

  // optional .Protocol.ResultType Result = 7;
  void clear_result();
  static const int kResultFieldNumber = 7;
  ::Protocol::ResultType result() const;
  void set_result(::Protocol::ResultType value);

  // optional string Content = 8;
  void clear_content();
  static const int kContentFieldNumber = 8;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional bytes Extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  void set_extend(const char* value);
  void set_extend(const void* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:Protocol.DataPackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 function_;
  ::google::protobuf::int32 prioritylevel_;
  ::google::protobuf::int64 serialnumber_;
  ::google::protobuf::internal::ArenaStringPtr checkstring_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::int32 receiver_;
  int result_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DataPackage* default_instance_;
};
// -------------------------------------------------------------------

class GLOBAL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.GLOBAL_CONFIG) */ {
 public:
  GLOBAL_CONFIG();
  virtual ~GLOBAL_CONFIG();

  GLOBAL_CONFIG(const GLOBAL_CONFIG& from);

  inline GLOBAL_CONFIG& operator=(const GLOBAL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GLOBAL_CONFIG& default_instance();

  void Swap(GLOBAL_CONFIG* other);

  // implements Message ----------------------------------------------

  inline GLOBAL_CONFIG* New() const { return New(NULL); }

  GLOBAL_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLOBAL_CONFIG& from);
  void MergeFrom(const GLOBAL_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GLOBAL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ListenPort = 1;
  void clear_listenport();
  static const int kListenPortFieldNumber = 1;
  ::google::protobuf::int32 listenport() const;
  void set_listenport(::google::protobuf::int32 value);

  // optional bool EnableSSL = 2;
  void clear_enablessl();
  static const int kEnableSSLFieldNumber = 2;
  bool enablessl() const;
  void set_enablessl(bool value);

  // optional string CertFilePath = 3;
  void clear_certfilepath();
  static const int kCertFilePathFieldNumber = 3;
  const ::std::string& certfilepath() const;
  void set_certfilepath(const ::std::string& value);
  void set_certfilepath(const char* value);
  void set_certfilepath(const char* value, size_t size);
  ::std::string* mutable_certfilepath();
  ::std::string* release_certfilepath();
  void set_allocated_certfilepath(::std::string* certfilepath);

  // optional string KeyFilePath = 4;
  void clear_keyfilepath();
  static const int kKeyFilePathFieldNumber = 4;
  const ::std::string& keyfilepath() const;
  void set_keyfilepath(const ::std::string& value);
  void set_keyfilepath(const char* value);
  void set_keyfilepath(const char* value, size_t size);
  ::std::string* mutable_keyfilepath();
  ::std::string* release_keyfilepath();
  void set_allocated_keyfilepath(::std::string* keyfilepath);

  // optional string CertPasswd = 5;
  void clear_certpasswd();
  static const int kCertPasswdFieldNumber = 5;
  const ::std::string& certpasswd() const;
  void set_certpasswd(const ::std::string& value);
  void set_certpasswd(const char* value);
  void set_certpasswd(const char* value, size_t size);
  ::std::string* mutable_certpasswd();
  ::std::string* release_certpasswd();
  void set_allocated_certpasswd(::std::string* certpasswd);

  // optional int32 ConnectTime = 6;
  void clear_connecttime();
  static const int kConnectTimeFieldNumber = 6;
  ::google::protobuf::int32 connecttime() const;
  void set_connecttime(::google::protobuf::int32 value);

  // optional int32 ReceiveTime = 7;
  void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 7;
  ::google::protobuf::int32 receivetime() const;
  void set_receivetime(::google::protobuf::int32 value);

  // optional string LogPath = 8;
  void clear_logpath();
  static const int kLogPathFieldNumber = 8;
  const ::std::string& logpath() const;
  void set_logpath(const ::std::string& value);
  void set_logpath(const char* value);
  void set_logpath(const char* value, size_t size);
  ::std::string* mutable_logpath();
  ::std::string* release_logpath();
  void set_allocated_logpath(::std::string* logpath);

  // optional int32 LogLevel = 9;
  void clear_loglevel();
  static const int kLogLevelFieldNumber = 9;
  ::google::protobuf::int32 loglevel() const;
  void set_loglevel(::google::protobuf::int32 value);

  // optional bool DebugMode = 10;
  void clear_debugmode();
  static const int kDebugModeFieldNumber = 10;
  bool debugmode() const;
  void set_debugmode(bool value);

  // optional int32 MQThreadQuantity = 11;
  void clear_mqthreadquantity();
  static const int kMQThreadQuantityFieldNumber = 11;
  ::google::protobuf::int32 mqthreadquantity() const;
  void set_mqthreadquantity(::google::protobuf::int32 value);

  // optional int32 EPollThreadQuantity = 12;
  void clear_epollthreadquantity();
  static const int kEPollThreadQuantityFieldNumber = 12;
  ::google::protobuf::int32 epollthreadquantity() const;
  void set_epollthreadquantity(::google::protobuf::int32 value);

  // optional int32 ProcessThreadQuantity = 13;
  void clear_processthreadquantity();
  static const int kProcessThreadQuantityFieldNumber = 13;
  ::google::protobuf::int32 processthreadquantity() const;
  void set_processthreadquantity(::google::protobuf::int32 value);

  // optional int32 PrioritySize = 14;
  void clear_prioritysize();
  static const int kPrioritySizeFieldNumber = 14;
  ::google::protobuf::int32 prioritysize() const;
  void set_prioritysize(::google::protobuf::int32 value);

  // optional .Protocol.ModuleType Type = 15;
  void clear_type();
  static const int kTypeFieldNumber = 15;
  ::Protocol::ModuleType type() const;
  void set_type(::Protocol::ModuleType value);

  // optional bytes ExConfig = 16;
  void clear_exconfig();
  static const int kExConfigFieldNumber = 16;
  const ::std::string& exconfig() const;
  void set_exconfig(const ::std::string& value);
  void set_exconfig(const char* value);
  void set_exconfig(const void* value, size_t size);
  ::std::string* mutable_exconfig();
  ::std::string* release_exconfig();
  void set_allocated_exconfig(::std::string* exconfig);

  // @@protoc_insertion_point(class_scope:Protocol.GLOBAL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr certfilepath_;
  ::google::protobuf::int32 listenport_;
  ::google::protobuf::int32 connecttime_;
  ::google::protobuf::internal::ArenaStringPtr keyfilepath_;
  ::google::protobuf::internal::ArenaStringPtr certpasswd_;
  bool enablessl_;
  bool debugmode_;
  ::google::protobuf::int32 receivetime_;
  ::google::protobuf::internal::ArenaStringPtr logpath_;
  ::google::protobuf::int32 loglevel_;
  ::google::protobuf::int32 mqthreadquantity_;
  ::google::protobuf::int32 epollthreadquantity_;
  ::google::protobuf::int32 processthreadquantity_;
  ::google::protobuf::int32 prioritysize_;
  int type_;
  ::google::protobuf::internal::ArenaStringPtr exconfig_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static GLOBAL_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class CONTROL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CONTROL_CONFIG) */ {
 public:
  CONTROL_CONFIG();
  virtual ~CONTROL_CONFIG();

  CONTROL_CONFIG(const CONTROL_CONFIG& from);

  inline CONTROL_CONFIG& operator=(const CONTROL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CONTROL_CONFIG& default_instance();

  void Swap(CONTROL_CONFIG* other);

  // implements Message ----------------------------------------------

  inline CONTROL_CONFIG* New() const { return New(NULL); }

  CONTROL_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CONTROL_CONFIG& from);
  void MergeFrom(const CONTROL_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CONTROL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BlockTime = 1;
  void clear_blocktime();
  static const int kBlockTimeFieldNumber = 1;
  ::google::protobuf::int32 blocktime() const;
  void set_blocktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.CONTROL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 blocktime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static CONTROL_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class DB_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.DB_CONFIG) */ {
 public:
  DB_CONFIG();
  virtual ~DB_CONFIG();

  DB_CONFIG(const DB_CONFIG& from);

  inline DB_CONFIG& operator=(const DB_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CONFIG& default_instance();

  void Swap(DB_CONFIG* other);

  // implements Message ----------------------------------------------

  inline DB_CONFIG* New() const { return New(NULL); }

  DB_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_CONFIG& from);
  void MergeFrom(const DB_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerAddress = 1;
  void clear_serveraddress();
  static const int kServerAddressFieldNumber = 1;
  const ::std::string& serveraddress() const;
  void set_serveraddress(const ::std::string& value);
  void set_serveraddress(const char* value);
  void set_serveraddress(const char* value, size_t size);
  ::std::string* mutable_serveraddress();
  ::std::string* release_serveraddress();
  void set_allocated_serveraddress(::std::string* serveraddress);

  // optional int32 ServerPort = 2;
  void clear_serverport();
  static const int kServerPortFieldNumber = 2;
  ::google::protobuf::int32 serverport() const;
  void set_serverport(::google::protobuf::int32 value);

  // optional string User = 3;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string Passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // optional string Database = 5;
  void clear_database();
  static const int kDatabaseFieldNumber = 5;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // @@protoc_insertion_point(class_scope:Protocol.DB_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serveraddress_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  ::google::protobuf::int32 serverport_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DB_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class DATA_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.DATA_CONFIG) */ {
 public:
  DATA_CONFIG();
  virtual ~DATA_CONFIG();

  DATA_CONFIG(const DATA_CONFIG& from);

  inline DATA_CONFIG& operator=(const DATA_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DATA_CONFIG& default_instance();

  void Swap(DATA_CONFIG* other);

  // implements Message ----------------------------------------------

  inline DATA_CONFIG* New() const { return New(NULL); }

  DATA_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DATA_CONFIG& from);
  void MergeFrom(const DATA_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DATA_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 DataReceivePort = 1;
  void clear_datareceiveport();
  static const int kDataReceivePortFieldNumber = 1;
  ::google::protobuf::int32 datareceiveport() const;
  void set_datareceiveport(::google::protobuf::int32 value);

  // optional int32 DataRecvTime = 2;
  void clear_datarecvtime();
  static const int kDataRecvTimeFieldNumber = 2;
  ::google::protobuf::int32 datarecvtime() const;
  void set_datarecvtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.DATA_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 datareceiveport_;
  ::google::protobuf::int32 datarecvtime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DATA_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class GATEWAY_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.GATEWAY_CONFIG) */ {
 public:
  GATEWAY_CONFIG();
  virtual ~GATEWAY_CONFIG();

  GATEWAY_CONFIG(const GATEWAY_CONFIG& from);

  inline GATEWAY_CONFIG& operator=(const GATEWAY_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GATEWAY_CONFIG& default_instance();

  void Swap(GATEWAY_CONFIG* other);

  // implements Message ----------------------------------------------

  inline GATEWAY_CONFIG* New() const { return New(NULL); }

  GATEWAY_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GATEWAY_CONFIG& from);
  void MergeFrom(const GATEWAY_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GATEWAY_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ClientCheckTime = 1;
  void clear_clientchecktime();
  static const int kClientCheckTimeFieldNumber = 1;
  ::google::protobuf::int32 clientchecktime() const;
  void set_clientchecktime(::google::protobuf::int32 value);

  // optional string ClientCheckKey = 2;
  void clear_clientcheckkey();
  static const int kClientCheckKeyFieldNumber = 2;
  const ::std::string& clientcheckkey() const;
  void set_clientcheckkey(const ::std::string& value);
  void set_clientcheckkey(const char* value);
  void set_clientcheckkey(const char* value, size_t size);
  ::std::string* mutable_clientcheckkey();
  ::std::string* release_clientcheckkey();
  void set_allocated_clientcheckkey(::std::string* clientcheckkey);

  // optional int32 TimeoutCheckInterval = 3;
  void clear_timeoutcheckinterval();
  static const int kTimeoutCheckIntervalFieldNumber = 3;
  ::google::protobuf::int32 timeoutcheckinterval() const;
  void set_timeoutcheckinterval(::google::protobuf::int32 value);

  // optional int32 TimeoutTime = 4;
  void clear_timeouttime();
  static const int kTimeoutTimeFieldNumber = 4;
  ::google::protobuf::int32 timeouttime() const;
  void set_timeouttime(::google::protobuf::int32 value);

  // optional string ProcessAddress = 5;
  void clear_processaddress();
  static const int kProcessAddressFieldNumber = 5;
  const ::std::string& processaddress() const;
  void set_processaddress(const ::std::string& value);
  void set_processaddress(const char* value);
  void set_processaddress(const char* value, size_t size);
  ::std::string* mutable_processaddress();
  ::std::string* release_processaddress();
  void set_allocated_processaddress(::std::string* processaddress);

  // @@protoc_insertion_point(class_scope:Protocol.GATEWAY_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientcheckkey_;
  ::google::protobuf::int32 clientchecktime_;
  ::google::protobuf::int32 timeoutcheckinterval_;
  ::google::protobuf::internal::ArenaStringPtr processaddress_;
  ::google::protobuf::int32 timeouttime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static GATEWAY_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class FIREWALL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.FIREWALL_CONFIG) */ {
 public:
  FIREWALL_CONFIG();
  virtual ~FIREWALL_CONFIG();

  FIREWALL_CONFIG(const FIREWALL_CONFIG& from);

  inline FIREWALL_CONFIG& operator=(const FIREWALL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FIREWALL_CONFIG& default_instance();

  void Swap(FIREWALL_CONFIG* other);

  // implements Message ----------------------------------------------

  inline FIREWALL_CONFIG* New() const { return New(NULL); }

  FIREWALL_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FIREWALL_CONFIG& from);
  void MergeFrom(const FIREWALL_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FIREWALL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BlockTime = 1;
  void clear_blocktime();
  static const int kBlockTimeFieldNumber = 1;
  ::google::protobuf::int32 blocktime() const;
  void set_blocktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.FIREWALL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 blocktime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static FIREWALL_CONFIG* default_instance_;
};
// -------------------------------------------------------------------

class PROCESS_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.PROCESS_CONFIG) */ {
 public:
  PROCESS_CONFIG();
  virtual ~PROCESS_CONFIG();

  PROCESS_CONFIG(const PROCESS_CONFIG& from);

  inline PROCESS_CONFIG& operator=(const PROCESS_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PROCESS_CONFIG& default_instance();

  void Swap(PROCESS_CONFIG* other);

  // implements Message ----------------------------------------------

  inline PROCESS_CONFIG* New() const { return New(NULL); }

  PROCESS_CONFIG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PROCESS_CONFIG& from);
  void MergeFrom(const PROCESS_CONFIG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PROCESS_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LuaContextQuantity = 1;
  void clear_luacontextquantity();
  static const int kLuaContextQuantityFieldNumber = 1;
  ::google::protobuf::int32 luacontextquantity() const;
  void set_luacontextquantity(::google::protobuf::int32 value);

  // optional string LuaScriptFolder = 2;
  void clear_luascriptfolder();
  static const int kLuaScriptFolderFieldNumber = 2;
  const ::std::string& luascriptfolder() const;
  void set_luascriptfolder(const ::std::string& value);
  void set_luascriptfolder(const char* value);
  void set_luascriptfolder(const char* value, size_t size);
  ::std::string* mutable_luascriptfolder();
  ::std::string* release_luascriptfolder();
  void set_allocated_luascriptfolder(::std::string* luascriptfolder);

  // optional string LuaEntryFile = 3;
  void clear_luaentryfile();
  static const int kLuaEntryFileFieldNumber = 3;
  const ::std::string& luaentryfile() const;
  void set_luaentryfile(const ::std::string& value);
  void set_luaentryfile(const char* value);
  void set_luaentryfile(const char* value, size_t size);
  ::std::string* mutable_luaentryfile();
  ::std::string* release_luaentryfile();
  void set_allocated_luaentryfile(::std::string* luaentryfile);

  // optional string LuaEntryFunction = 4;
  void clear_luaentryfunction();
  static const int kLuaEntryFunctionFieldNumber = 4;
  const ::std::string& luaentryfunction() const;
  void set_luaentryfunction(const ::std::string& value);
  void set_luaentryfunction(const char* value);
  void set_luaentryfunction(const char* value, size_t size);
  ::std::string* mutable_luaentryfunction();
  ::std::string* release_luaentryfunction();
  void set_allocated_luaentryfunction(::std::string* luaentryfunction);

  // optional string LuaProcessFunction = 5;
  void clear_luaprocessfunction();
  static const int kLuaProcessFunctionFieldNumber = 5;
  const ::std::string& luaprocessfunction() const;
  void set_luaprocessfunction(const ::std::string& value);
  void set_luaprocessfunction(const char* value);
  void set_luaprocessfunction(const char* value, size_t size);
  ::std::string* mutable_luaprocessfunction();
  ::std::string* release_luaprocessfunction();
  void set_allocated_luaprocessfunction(::std::string* luaprocessfunction);

  // optional string LuaSocketCloseFunction = 6;
  void clear_luasocketclosefunction();
  static const int kLuaSocketCloseFunctionFieldNumber = 6;
  const ::std::string& luasocketclosefunction() const;
  void set_luasocketclosefunction(const ::std::string& value);
  void set_luasocketclosefunction(const char* value);
  void set_luasocketclosefunction(const char* value, size_t size);
  ::std::string* mutable_luasocketclosefunction();
  ::std::string* release_luasocketclosefunction();
  void set_allocated_luasocketclosefunction(::std::string* luasocketclosefunction);

  // @@protoc_insertion_point(class_scope:Protocol.PROCESS_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr luascriptfolder_;
  ::google::protobuf::internal::ArenaStringPtr luaentryfile_;
  ::google::protobuf::internal::ArenaStringPtr luaentryfunction_;
  ::google::protobuf::internal::ArenaStringPtr luaprocessfunction_;
  ::google::protobuf::internal::ArenaStringPtr luasocketclosefunction_;
  ::google::protobuf::int32 luacontextquantity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static PROCESS_CONFIG* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DataPackage

// optional int32 Function = 1;
inline void DataPackage::clear_function() {
  function_ = 0;
}
inline ::google::protobuf::int32 DataPackage::function() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Function)
  return function_;
}
inline void DataPackage::set_function(::google::protobuf::int32 value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Function)
}

// optional int32 PriorityLevel = 2;
inline void DataPackage::clear_prioritylevel() {
  prioritylevel_ = 0;
}
inline ::google::protobuf::int32 DataPackage::prioritylevel() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.PriorityLevel)
  return prioritylevel_;
}
inline void DataPackage::set_prioritylevel(::google::protobuf::int32 value) {
  
  prioritylevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.PriorityLevel)
}

// optional int64 SerialNumber = 3;
inline void DataPackage::clear_serialnumber() {
  serialnumber_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataPackage::serialnumber() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.SerialNumber)
  return serialnumber_;
}
inline void DataPackage::set_serialnumber(::google::protobuf::int64 value) {
  
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.SerialNumber)
}

// optional string CheckString = 4;
inline void DataPackage::clear_checkstring() {
  checkstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::checkstring() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.CheckString)
  return checkstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_checkstring(const ::std::string& value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.CheckString)
}
inline void DataPackage::set_checkstring(const char* value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.CheckString)
}
inline void DataPackage::set_checkstring(const char* value, size_t size) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.CheckString)
}
inline ::std::string* DataPackage::mutable_checkstring() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.CheckString)
  return checkstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_checkstring() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.CheckString)
  
  return checkstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_checkstring(::std::string* checkstring) {
  if (checkstring != NULL) {
    
  } else {
    
  }
  checkstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkstring);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.CheckString)
}

// optional string Sender = 5;
inline void DataPackage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Sender)
  return sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Sender)
}
inline void DataPackage::set_sender(const char* value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Sender)
}
inline void DataPackage::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Sender)
}
inline ::std::string* DataPackage::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Sender)
}

// optional int32 Receiver = 6;
inline void DataPackage::clear_receiver() {
  receiver_ = 0;
}
inline ::google::protobuf::int32 DataPackage::receiver() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Receiver)
  return receiver_;
}
inline void DataPackage::set_receiver(::google::protobuf::int32 value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Receiver)
}

// optional .Protocol.ResultType Result = 7;
inline void DataPackage::clear_result() {
  result_ = 0;
}
inline ::Protocol::ResultType DataPackage::result() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Result)
  return static_cast< ::Protocol::ResultType >(result_);
}
inline void DataPackage::set_result(::Protocol::ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Result)
}

// optional string Content = 8;
inline void DataPackage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Content)
}
inline void DataPackage::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Content)
}
inline void DataPackage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Content)
}
inline ::std::string* DataPackage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Content)
}

// optional bytes Extend = 9;
inline void DataPackage::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::extend() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Extend)
}
inline void DataPackage::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Extend)
}
inline void DataPackage::set_extend(const void* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Extend)
}
inline ::std::string* DataPackage::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_extend() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Extend)
}

// -------------------------------------------------------------------

// GLOBAL_CONFIG

// optional int32 ListenPort = 1;
inline void GLOBAL_CONFIG::clear_listenport() {
  listenport_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::listenport() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ListenPort)
  return listenport_;
}
inline void GLOBAL_CONFIG::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ListenPort)
}

// optional bool EnableSSL = 2;
inline void GLOBAL_CONFIG::clear_enablessl() {
  enablessl_ = false;
}
inline bool GLOBAL_CONFIG::enablessl() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EnableSSL)
  return enablessl_;
}
inline void GLOBAL_CONFIG::set_enablessl(bool value) {
  
  enablessl_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EnableSSL)
}

// optional string CertFilePath = 3;
inline void GLOBAL_CONFIG::clear_certfilepath() {
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_certfilepath(const ::std::string& value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertFilePath)
}
inline void GLOBAL_CONFIG::set_certfilepath(const char* value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertFilePath)
}
inline void GLOBAL_CONFIG::set_certfilepath(const char* value, size_t size) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertFilePath)
  
  return certfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certfilepath(::std::string* certfilepath) {
  if (certfilepath != NULL) {
    
  } else {
    
  }
  certfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertFilePath)
}

// optional string KeyFilePath = 4;
inline void GLOBAL_CONFIG::clear_keyfilepath() {
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::keyfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_keyfilepath(const ::std::string& value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value, size_t size) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_keyfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_keyfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.KeyFilePath)
  
  return keyfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_keyfilepath(::std::string* keyfilepath) {
  if (keyfilepath != NULL) {
    
  } else {
    
  }
  keyfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.KeyFilePath)
}

// optional string CertPasswd = 5;
inline void GLOBAL_CONFIG::clear_certpasswd() {
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certpasswd() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_certpasswd(const ::std::string& value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertPasswd)
}
inline void GLOBAL_CONFIG::set_certpasswd(const char* value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertPasswd)
}
inline void GLOBAL_CONFIG::set_certpasswd(const char* value, size_t size) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertPasswd)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certpasswd() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certpasswd() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertPasswd)
  
  return certpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certpasswd(::std::string* certpasswd) {
  if (certpasswd != NULL) {
    
  } else {
    
  }
  certpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certpasswd);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertPasswd)
}

// optional int32 ConnectTime = 6;
inline void GLOBAL_CONFIG::clear_connecttime() {
  connecttime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::connecttime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ConnectTime)
  return connecttime_;
}
inline void GLOBAL_CONFIG::set_connecttime(::google::protobuf::int32 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ConnectTime)
}

// optional int32 ReceiveTime = 7;
inline void GLOBAL_CONFIG::clear_receivetime() {
  receivetime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::receivetime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ReceiveTime)
  return receivetime_;
}
inline void GLOBAL_CONFIG::set_receivetime(::google::protobuf::int32 value) {
  
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ReceiveTime)
}

// optional string LogPath = 8;
inline void GLOBAL_CONFIG::clear_logpath() {
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::logpath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_logpath(const ::std::string& value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogPath)
}
inline void GLOBAL_CONFIG::set_logpath(const char* value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.LogPath)
}
inline void GLOBAL_CONFIG::set_logpath(const char* value, size_t size) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.LogPath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_logpath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_logpath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.LogPath)
  
  return logpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_logpath(::std::string* logpath) {
  if (logpath != NULL) {
    
  } else {
    
  }
  logpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logpath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.LogPath)
}

// optional int32 LogLevel = 9;
inline void GLOBAL_CONFIG::clear_loglevel() {
  loglevel_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::loglevel() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogLevel)
  return loglevel_;
}
inline void GLOBAL_CONFIG::set_loglevel(::google::protobuf::int32 value) {
  
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogLevel)
}

// optional bool DebugMode = 10;
inline void GLOBAL_CONFIG::clear_debugmode() {
  debugmode_ = false;
}
inline bool GLOBAL_CONFIG::debugmode() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.DebugMode)
  return debugmode_;
}
inline void GLOBAL_CONFIG::set_debugmode(bool value) {
  
  debugmode_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.DebugMode)
}

// optional int32 MQThreadQuantity = 11;
inline void GLOBAL_CONFIG::clear_mqthreadquantity() {
  mqthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::mqthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
  return mqthreadquantity_;
}
inline void GLOBAL_CONFIG::set_mqthreadquantity(::google::protobuf::int32 value) {
  
  mqthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
}

// optional int32 EPollThreadQuantity = 12;
inline void GLOBAL_CONFIG::clear_epollthreadquantity() {
  epollthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::epollthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
  return epollthreadquantity_;
}
inline void GLOBAL_CONFIG::set_epollthreadquantity(::google::protobuf::int32 value) {
  
  epollthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
}

// optional int32 ProcessThreadQuantity = 13;
inline void GLOBAL_CONFIG::clear_processthreadquantity() {
  processthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::processthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
  return processthreadquantity_;
}
inline void GLOBAL_CONFIG::set_processthreadquantity(::google::protobuf::int32 value) {
  
  processthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
}

// optional int32 PrioritySize = 14;
inline void GLOBAL_CONFIG::clear_prioritysize() {
  prioritysize_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::prioritysize() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.PrioritySize)
  return prioritysize_;
}
inline void GLOBAL_CONFIG::set_prioritysize(::google::protobuf::int32 value) {
  
  prioritysize_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.PrioritySize)
}

// optional .Protocol.ModuleType Type = 15;
inline void GLOBAL_CONFIG::clear_type() {
  type_ = 0;
}
inline ::Protocol::ModuleType GLOBAL_CONFIG::type() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.Type)
  return static_cast< ::Protocol::ModuleType >(type_);
}
inline void GLOBAL_CONFIG::set_type(::Protocol::ModuleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.Type)
}

// optional bytes ExConfig = 16;
inline void GLOBAL_CONFIG::clear_exconfig() {
  exconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::exconfig() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ExConfig)
  return exconfig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_exconfig(const ::std::string& value) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ExConfig)
}
inline void GLOBAL_CONFIG::set_exconfig(const char* value) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.ExConfig)
}
inline void GLOBAL_CONFIG::set_exconfig(const void* value, size_t size) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.ExConfig)
}
inline ::std::string* GLOBAL_CONFIG::mutable_exconfig() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.ExConfig)
  return exconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_exconfig() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.ExConfig)
  
  return exconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_exconfig(::std::string* exconfig) {
  if (exconfig != NULL) {
    
  } else {
    
  }
  exconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exconfig);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.ExConfig)
}

// -------------------------------------------------------------------

// CONTROL_CONFIG

// optional int32 BlockTime = 1;
inline void CONTROL_CONFIG::clear_blocktime() {
  blocktime_ = 0;
}
inline ::google::protobuf::int32 CONTROL_CONFIG::blocktime() const {
  // @@protoc_insertion_point(field_get:Protocol.CONTROL_CONFIG.BlockTime)
  return blocktime_;
}
inline void CONTROL_CONFIG::set_blocktime(::google::protobuf::int32 value) {
  
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.CONTROL_CONFIG.BlockTime)
}

// -------------------------------------------------------------------

// DB_CONFIG

// optional string ServerAddress = 1;
inline void DB_CONFIG::clear_serveraddress() {
  serveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::serveraddress() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.ServerAddress)
  return serveraddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_serveraddress(const ::std::string& value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.ServerAddress)
}
inline void DB_CONFIG::set_serveraddress(const char* value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.ServerAddress)
}
inline void DB_CONFIG::set_serveraddress(const char* value, size_t size) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.ServerAddress)
}
inline ::std::string* DB_CONFIG::mutable_serveraddress() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.ServerAddress)
  return serveraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_serveraddress() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.ServerAddress)
  
  return serveraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_serveraddress(::std::string* serveraddress) {
  if (serveraddress != NULL) {
    
  } else {
    
  }
  serveraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serveraddress);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.ServerAddress)
}

// optional int32 ServerPort = 2;
inline void DB_CONFIG::clear_serverport() {
  serverport_ = 0;
}
inline ::google::protobuf::int32 DB_CONFIG::serverport() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.ServerPort)
  return serverport_;
}
inline void DB_CONFIG::set_serverport(::google::protobuf::int32 value) {
  
  serverport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.ServerPort)
}

// optional string User = 3;
inline void DB_CONFIG::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::user() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.User)
}
inline void DB_CONFIG::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.User)
}
inline void DB_CONFIG::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.User)
}
inline ::std::string* DB_CONFIG::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_user() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.User)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.User)
}

// optional string Passwd = 4;
inline void DB_CONFIG::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::passwd() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.Passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.Passwd)
}
inline void DB_CONFIG::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.Passwd)
}
inline void DB_CONFIG::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.Passwd)
}
inline ::std::string* DB_CONFIG::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_passwd() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.Passwd)
}

// optional string Database = 5;
inline void DB_CONFIG::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB_CONFIG::database() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.Database)
  return database_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.Database)
}
inline void DB_CONFIG::set_database(const char* value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.Database)
}
inline void DB_CONFIG::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.Database)
}
inline ::std::string* DB_CONFIG::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.Database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CONFIG::release_database() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.Database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CONFIG::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.Database)
}

// -------------------------------------------------------------------

// DATA_CONFIG

// optional int32 DataReceivePort = 1;
inline void DATA_CONFIG::clear_datareceiveport() {
  datareceiveport_ = 0;
}
inline ::google::protobuf::int32 DATA_CONFIG::datareceiveport() const {
  // @@protoc_insertion_point(field_get:Protocol.DATA_CONFIG.DataReceivePort)
  return datareceiveport_;
}
inline void DATA_CONFIG::set_datareceiveport(::google::protobuf::int32 value) {
  
  datareceiveport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DATA_CONFIG.DataReceivePort)
}

// optional int32 DataRecvTime = 2;
inline void DATA_CONFIG::clear_datarecvtime() {
  datarecvtime_ = 0;
}
inline ::google::protobuf::int32 DATA_CONFIG::datarecvtime() const {
  // @@protoc_insertion_point(field_get:Protocol.DATA_CONFIG.DataRecvTime)
  return datarecvtime_;
}
inline void DATA_CONFIG::set_datarecvtime(::google::protobuf::int32 value) {
  
  datarecvtime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DATA_CONFIG.DataRecvTime)
}

// -------------------------------------------------------------------

// GATEWAY_CONFIG

// optional int32 ClientCheckTime = 1;
inline void GATEWAY_CONFIG::clear_clientchecktime() {
  clientchecktime_ = 0;
}
inline ::google::protobuf::int32 GATEWAY_CONFIG::clientchecktime() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ClientCheckTime)
  return clientchecktime_;
}
inline void GATEWAY_CONFIG::set_clientchecktime(::google::protobuf::int32 value) {
  
  clientchecktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ClientCheckTime)
}

// optional string ClientCheckKey = 2;
inline void GATEWAY_CONFIG::clear_clientcheckkey() {
  clientcheckkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GATEWAY_CONFIG::clientcheckkey() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  return clientcheckkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATEWAY_CONFIG::set_clientcheckkey(const ::std::string& value) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
inline void GATEWAY_CONFIG::set_clientcheckkey(const char* value) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
inline void GATEWAY_CONFIG::set_clientcheckkey(const char* value, size_t size) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
inline ::std::string* GATEWAY_CONFIG::mutable_clientcheckkey() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  return clientcheckkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GATEWAY_CONFIG::release_clientcheckkey() {
  // @@protoc_insertion_point(field_release:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  
  return clientcheckkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATEWAY_CONFIG::set_allocated_clientcheckkey(::std::string* clientcheckkey) {
  if (clientcheckkey != NULL) {
    
  } else {
    
  }
  clientcheckkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientcheckkey);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}

// optional int32 TimeoutCheckInterval = 3;
inline void GATEWAY_CONFIG::clear_timeoutcheckinterval() {
  timeoutcheckinterval_ = 0;
}
inline ::google::protobuf::int32 GATEWAY_CONFIG::timeoutcheckinterval() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.TimeoutCheckInterval)
  return timeoutcheckinterval_;
}
inline void GATEWAY_CONFIG::set_timeoutcheckinterval(::google::protobuf::int32 value) {
  
  timeoutcheckinterval_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.TimeoutCheckInterval)
}

// optional int32 TimeoutTime = 4;
inline void GATEWAY_CONFIG::clear_timeouttime() {
  timeouttime_ = 0;
}
inline ::google::protobuf::int32 GATEWAY_CONFIG::timeouttime() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.TimeoutTime)
  return timeouttime_;
}
inline void GATEWAY_CONFIG::set_timeouttime(::google::protobuf::int32 value) {
  
  timeouttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.TimeoutTime)
}

// optional string ProcessAddress = 5;
inline void GATEWAY_CONFIG::clear_processaddress() {
  processaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GATEWAY_CONFIG::processaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ProcessAddress)
  return processaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATEWAY_CONFIG::set_processaddress(const ::std::string& value) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
inline void GATEWAY_CONFIG::set_processaddress(const char* value) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
inline void GATEWAY_CONFIG::set_processaddress(const char* value, size_t size) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
inline ::std::string* GATEWAY_CONFIG::mutable_processaddress() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GATEWAY_CONFIG.ProcessAddress)
  return processaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GATEWAY_CONFIG::release_processaddress() {
  // @@protoc_insertion_point(field_release:Protocol.GATEWAY_CONFIG.ProcessAddress)
  
  return processaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATEWAY_CONFIG::set_allocated_processaddress(::std::string* processaddress) {
  if (processaddress != NULL) {
    
  } else {
    
  }
  processaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processaddress);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GATEWAY_CONFIG.ProcessAddress)
}

// -------------------------------------------------------------------

// FIREWALL_CONFIG

// optional int32 BlockTime = 1;
inline void FIREWALL_CONFIG::clear_blocktime() {
  blocktime_ = 0;
}
inline ::google::protobuf::int32 FIREWALL_CONFIG::blocktime() const {
  // @@protoc_insertion_point(field_get:Protocol.FIREWALL_CONFIG.BlockTime)
  return blocktime_;
}
inline void FIREWALL_CONFIG::set_blocktime(::google::protobuf::int32 value) {
  
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.FIREWALL_CONFIG.BlockTime)
}

// -------------------------------------------------------------------

// PROCESS_CONFIG

// optional int32 LuaContextQuantity = 1;
inline void PROCESS_CONFIG::clear_luacontextquantity() {
  luacontextquantity_ = 0;
}
inline ::google::protobuf::int32 PROCESS_CONFIG::luacontextquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaContextQuantity)
  return luacontextquantity_;
}
inline void PROCESS_CONFIG::set_luacontextquantity(::google::protobuf::int32 value) {
  
  luacontextquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaContextQuantity)
}

// optional string LuaScriptFolder = 2;
inline void PROCESS_CONFIG::clear_luascriptfolder() {
  luascriptfolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luascriptfolder() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_luascriptfolder(const ::std::string& value) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
inline void PROCESS_CONFIG::set_luascriptfolder(const char* value) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
inline void PROCESS_CONFIG::set_luascriptfolder(const char* value, size_t size) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
inline ::std::string* PROCESS_CONFIG::mutable_luascriptfolder() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luascriptfolder() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  
  return luascriptfolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luascriptfolder(::std::string* luascriptfolder) {
  if (luascriptfolder != NULL) {
    
  } else {
    
  }
  luascriptfolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luascriptfolder);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}

// optional string LuaEntryFile = 3;
inline void PROCESS_CONFIG::clear_luaentryfile() {
  luaentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaentryfile() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_luaentryfile(const ::std::string& value) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
inline void PROCESS_CONFIG::set_luaentryfile(const char* value) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
inline void PROCESS_CONFIG::set_luaentryfile(const char* value, size_t size) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaentryfile() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaentryfile() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaEntryFile)
  
  return luaentryfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaentryfile(::std::string* luaentryfile) {
  if (luaentryfile != NULL) {
    
  } else {
    
  }
  luaentryfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfile);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaEntryFile)
}

// optional string LuaEntryFunction = 4;
inline void PROCESS_CONFIG::clear_luaentryfunction() {
  luaentryfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaentryfunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_luaentryfunction(const ::std::string& value) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
inline void PROCESS_CONFIG::set_luaentryfunction(const char* value) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
inline void PROCESS_CONFIG::set_luaentryfunction(const char* value, size_t size) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaentryfunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaentryfunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  
  return luaentryfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaentryfunction(::std::string* luaentryfunction) {
  if (luaentryfunction != NULL) {
    
  } else {
    
  }
  luaentryfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}

// optional string LuaProcessFunction = 5;
inline void PROCESS_CONFIG::clear_luaprocessfunction() {
  luaprocessfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luaprocessfunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_luaprocessfunction(const ::std::string& value) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
inline void PROCESS_CONFIG::set_luaprocessfunction(const char* value) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
inline void PROCESS_CONFIG::set_luaprocessfunction(const char* value, size_t size) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luaprocessfunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luaprocessfunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  
  return luaprocessfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luaprocessfunction(::std::string* luaprocessfunction) {
  if (luaprocessfunction != NULL) {
    
  } else {
    
  }
  luaprocessfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaprocessfunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}

// optional string LuaSocketCloseFunction = 6;
inline void PROCESS_CONFIG::clear_luasocketclosefunction() {
  luasocketclosefunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PROCESS_CONFIG::luasocketclosefunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_luasocketclosefunction(const ::std::string& value) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
inline void PROCESS_CONFIG::set_luasocketclosefunction(const char* value) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
inline void PROCESS_CONFIG::set_luasocketclosefunction(const char* value, size_t size) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
inline ::std::string* PROCESS_CONFIG::mutable_luasocketclosefunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PROCESS_CONFIG::release_luasocketclosefunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  
  return luasocketclosefunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PROCESS_CONFIG::set_allocated_luasocketclosefunction(::std::string* luasocketclosefunction) {
  if (luasocketclosefunction != NULL) {
    
  } else {
    
  }
  luasocketclosefunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luasocketclosefunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protocol::ModuleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ModuleType>() {
  return ::Protocol::ModuleType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ResultType>() {
  return ::Protocol::ResultType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
