// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_INCLUDED_protocol_2eproto
#define PROTOBUF_INCLUDED_protocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto 

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2eproto
namespace Protocol {
class DataPackage;
class DataPackageDefaultTypeInternal;
extern DataPackageDefaultTypeInternal _DataPackage_default_instance_;
class GLOBAL_CONFIG;
class GLOBAL_CONFIGDefaultTypeInternal;
extern GLOBAL_CONFIGDefaultTypeInternal _GLOBAL_CONFIG_default_instance_;
}  // namespace Protocol
namespace google {
namespace protobuf {
template<> ::Protocol::DataPackage* Arena::CreateMaybeMessage<::Protocol::DataPackage>(Arena*);
template<> ::Protocol::GLOBAL_CONFIG* Arena::CreateMaybeMessage<::Protocol::GLOBAL_CONFIG>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Protocol {

enum ModuleType {
  Unconfigured = 0,
  Control = 1,
  Firewall = 2,
  Gateway = 3,
  Data = 4,
  Process = 5,
  DB = 6,
  ModuleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ModuleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ModuleType_IsValid(int value);
const ModuleType ModuleType_MIN = Unconfigured;
const ModuleType ModuleType_MAX = DB;
const int ModuleType_ARRAYSIZE = ModuleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModuleType_descriptor();
inline const ::std::string& ModuleType_Name(ModuleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModuleType_descriptor(), value);
}
inline bool ModuleType_Parse(
    const ::std::string& name, ModuleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModuleType>(
    ModuleType_descriptor(), name, value);
}
enum ResultType {
  Succeed = 0,
  Error = 1,
  Warning = 2,
  Retry = 3,
  Invalid = 4,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = Succeed;
const ResultType ResultType_MAX = Invalid;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
enum LogLevel {
  All = 0,
  Verbos = 1,
  Debug = 2,
  Info = 3,
  Warn = 4,
  Err = 5,
  Assert = 6,
  Fatal = 7,
  LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogLevel_IsValid(int value);
const LogLevel LogLevel_MIN = All;
const LogLevel LogLevel_MAX = Fatal;
const int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor();
inline const ::std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogLevel_descriptor(), value);
}
inline bool LogLevel_Parse(
    const ::std::string& name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
enum Functions {
  ProcessMessage = 0,
  PostLog = 1,
  RegisteServer = 2,
  GetServerList = 3,
  RestartService = 4,
  GetTemplateList = 5,
  SetTemplateConfig = 6,
  Functions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Functions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Functions_IsValid(int value);
const Functions Functions_MIN = ProcessMessage;
const Functions Functions_MAX = SetTemplateConfig;
const int Functions_ARRAYSIZE = Functions_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functions_descriptor();
inline const ::std::string& Functions_Name(Functions value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functions_descriptor(), value);
}
inline bool Functions_Parse(
    const ::std::string& name, Functions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functions>(
    Functions_descriptor(), name, value);
}
// ===================================================================

class DataPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.DataPackage) */ {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataPackage(DataPackage&& from) noexcept
    : DataPackage() {
    *this = ::std::move(from);
  }

  inline DataPackage& operator=(DataPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataPackage* internal_default_instance() {
    return reinterpret_cast<const DataPackage*>(
               &_DataPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataPackage* other);
  friend void swap(DataPackage& a, DataPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataPackage* New() const final {
    return CreateMaybeMessage<DataPackage>(NULL);
  }

  DataPackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataPackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CheckString = 4;
  void clear_checkstring();
  static const int kCheckStringFieldNumber = 4;
  const ::std::string& checkstring() const;
  void set_checkstring(const ::std::string& value);
  #if LANG_CXX11
  void set_checkstring(::std::string&& value);
  #endif
  void set_checkstring(const char* value);
  void set_checkstring(const char* value, size_t size);
  ::std::string* mutable_checkstring();
  ::std::string* release_checkstring();
  void set_allocated_checkstring(::std::string* checkstring);

  // string Sender = 5;
  void clear_sender();
  static const int kSenderFieldNumber = 5;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string Content = 8;
  void clear_content();
  static const int kContentFieldNumber = 8;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes Extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const void* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // .Protocol.Functions Function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  ::Protocol::Functions function() const;
  void set_function(::Protocol::Functions value);

  // int32 PriorityLevel = 2;
  void clear_prioritylevel();
  static const int kPriorityLevelFieldNumber = 2;
  ::google::protobuf::int32 prioritylevel() const;
  void set_prioritylevel(::google::protobuf::int32 value);

  // int64 SerialNumber = 3;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 3;
  ::google::protobuf::int64 serialnumber() const;
  void set_serialnumber(::google::protobuf::int64 value);

  // int32 Receiver = 6;
  void clear_receiver();
  static const int kReceiverFieldNumber = 6;
  ::google::protobuf::int32 receiver() const;
  void set_receiver(::google::protobuf::int32 value);

  // .Protocol.ResultType Result = 7;
  void clear_result();
  static const int kResultFieldNumber = 7;
  ::Protocol::ResultType result() const;
  void set_result(::Protocol::ResultType value);

  // @@protoc_insertion_point(class_scope:Protocol.DataPackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checkstring_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  int function_;
  ::google::protobuf::int32 prioritylevel_;
  ::google::protobuf::int64 serialnumber_;
  ::google::protobuf::int32 receiver_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GLOBAL_CONFIG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.GLOBAL_CONFIG) */ {
 public:
  GLOBAL_CONFIG();
  virtual ~GLOBAL_CONFIG();

  GLOBAL_CONFIG(const GLOBAL_CONFIG& from);

  inline GLOBAL_CONFIG& operator=(const GLOBAL_CONFIG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GLOBAL_CONFIG(GLOBAL_CONFIG&& from) noexcept
    : GLOBAL_CONFIG() {
    *this = ::std::move(from);
  }

  inline GLOBAL_CONFIG& operator=(GLOBAL_CONFIG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLOBAL_CONFIG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GLOBAL_CONFIG* internal_default_instance() {
    return reinterpret_cast<const GLOBAL_CONFIG*>(
               &_GLOBAL_CONFIG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GLOBAL_CONFIG* other);
  friend void swap(GLOBAL_CONFIG& a, GLOBAL_CONFIG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GLOBAL_CONFIG* New() const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(NULL);
  }

  GLOBAL_CONFIG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GLOBAL_CONFIG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GLOBAL_CONFIG& from);
  void MergeFrom(const GLOBAL_CONFIG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GLOBAL_CONFIG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CertFilePath = 3;
  void clear_certfilepath();
  static const int kCertFilePathFieldNumber = 3;
  const ::std::string& certfilepath() const;
  void set_certfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_certfilepath(::std::string&& value);
  #endif
  void set_certfilepath(const char* value);
  void set_certfilepath(const char* value, size_t size);
  ::std::string* mutable_certfilepath();
  ::std::string* release_certfilepath();
  void set_allocated_certfilepath(::std::string* certfilepath);

  // string KeyFilePath = 4;
  void clear_keyfilepath();
  static const int kKeyFilePathFieldNumber = 4;
  const ::std::string& keyfilepath() const;
  void set_keyfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_keyfilepath(::std::string&& value);
  #endif
  void set_keyfilepath(const char* value);
  void set_keyfilepath(const char* value, size_t size);
  ::std::string* mutable_keyfilepath();
  ::std::string* release_keyfilepath();
  void set_allocated_keyfilepath(::std::string* keyfilepath);

  // string CertPasswd = 5;
  void clear_certpasswd();
  static const int kCertPasswdFieldNumber = 5;
  const ::std::string& certpasswd() const;
  void set_certpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_certpasswd(::std::string&& value);
  #endif
  void set_certpasswd(const char* value);
  void set_certpasswd(const char* value, size_t size);
  ::std::string* mutable_certpasswd();
  ::std::string* release_certpasswd();
  void set_allocated_certpasswd(::std::string* certpasswd);

  // string LogPath = 8;
  void clear_logpath();
  static const int kLogPathFieldNumber = 8;
  const ::std::string& logpath() const;
  void set_logpath(const ::std::string& value);
  #if LANG_CXX11
  void set_logpath(::std::string&& value);
  #endif
  void set_logpath(const char* value);
  void set_logpath(const char* value, size_t size);
  ::std::string* mutable_logpath();
  ::std::string* release_logpath();
  void set_allocated_logpath(::std::string* logpath);

  // string ModuleName = 16;
  void clear_modulename();
  static const int kModuleNameFieldNumber = 16;
  const ::std::string& modulename() const;
  void set_modulename(const ::std::string& value);
  #if LANG_CXX11
  void set_modulename(::std::string&& value);
  #endif
  void set_modulename(const char* value);
  void set_modulename(const char* value, size_t size);
  ::std::string* mutable_modulename();
  ::std::string* release_modulename();
  void set_allocated_modulename(::std::string* modulename);

  // string ModulePath = 17;
  void clear_modulepath();
  static const int kModulePathFieldNumber = 17;
  const ::std::string& modulepath() const;
  void set_modulepath(const ::std::string& value);
  #if LANG_CXX11
  void set_modulepath(::std::string&& value);
  #endif
  void set_modulepath(const char* value);
  void set_modulepath(const char* value, size_t size);
  ::std::string* mutable_modulepath();
  ::std::string* release_modulepath();
  void set_allocated_modulepath(::std::string* modulepath);

  // bytes ModuleConfig = 18;
  void clear_moduleconfig();
  static const int kModuleConfigFieldNumber = 18;
  const ::std::string& moduleconfig() const;
  void set_moduleconfig(const ::std::string& value);
  #if LANG_CXX11
  void set_moduleconfig(::std::string&& value);
  #endif
  void set_moduleconfig(const char* value);
  void set_moduleconfig(const void* value, size_t size);
  ::std::string* mutable_moduleconfig();
  ::std::string* release_moduleconfig();
  void set_allocated_moduleconfig(::std::string* moduleconfig);

  // int32 ListenPort = 1;
  void clear_listenport();
  static const int kListenPortFieldNumber = 1;
  ::google::protobuf::int32 listenport() const;
  void set_listenport(::google::protobuf::int32 value);

  // int32 ConnectTime = 6;
  void clear_connecttime();
  static const int kConnectTimeFieldNumber = 6;
  ::google::protobuf::int32 connecttime() const;
  void set_connecttime(::google::protobuf::int32 value);

  // bool EnableSSL = 2;
  void clear_enablessl();
  static const int kEnableSSLFieldNumber = 2;
  bool enablessl() const;
  void set_enablessl(bool value);

  // bool DebugMode = 10;
  void clear_debugmode();
  static const int kDebugModeFieldNumber = 10;
  bool debugmode() const;
  void set_debugmode(bool value);

  // int32 ReceiveTime = 7;
  void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 7;
  ::google::protobuf::int32 receivetime() const;
  void set_receivetime(::google::protobuf::int32 value);

  // .Protocol.LogLevel LogLevel = 9;
  void clear_loglevel();
  static const int kLogLevelFieldNumber = 9;
  ::Protocol::LogLevel loglevel() const;
  void set_loglevel(::Protocol::LogLevel value);

  // int32 MQThreadQuantity = 11;
  void clear_mqthreadquantity();
  static const int kMQThreadQuantityFieldNumber = 11;
  ::google::protobuf::int32 mqthreadquantity() const;
  void set_mqthreadquantity(::google::protobuf::int32 value);

  // int32 EPollThreadQuantity = 12;
  void clear_epollthreadquantity();
  static const int kEPollThreadQuantityFieldNumber = 12;
  ::google::protobuf::int32 epollthreadquantity() const;
  void set_epollthreadquantity(::google::protobuf::int32 value);

  // int32 ProcessThreadQuantity = 13;
  void clear_processthreadquantity();
  static const int kProcessThreadQuantityFieldNumber = 13;
  ::google::protobuf::int32 processthreadquantity() const;
  void set_processthreadquantity(::google::protobuf::int32 value);

  // int32 PrioritySize = 14;
  void clear_prioritysize();
  static const int kPrioritySizeFieldNumber = 14;
  ::google::protobuf::int32 prioritysize() const;
  void set_prioritysize(::google::protobuf::int32 value);

  // .Protocol.ModuleType Type = 15;
  void clear_type();
  static const int kTypeFieldNumber = 15;
  ::Protocol::ModuleType type() const;
  void set_type(::Protocol::ModuleType value);

  // @@protoc_insertion_point(class_scope:Protocol.GLOBAL_CONFIG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr certfilepath_;
  ::google::protobuf::internal::ArenaStringPtr keyfilepath_;
  ::google::protobuf::internal::ArenaStringPtr certpasswd_;
  ::google::protobuf::internal::ArenaStringPtr logpath_;
  ::google::protobuf::internal::ArenaStringPtr modulename_;
  ::google::protobuf::internal::ArenaStringPtr modulepath_;
  ::google::protobuf::internal::ArenaStringPtr moduleconfig_;
  ::google::protobuf::int32 listenport_;
  ::google::protobuf::int32 connecttime_;
  bool enablessl_;
  bool debugmode_;
  ::google::protobuf::int32 receivetime_;
  int loglevel_;
  ::google::protobuf::int32 mqthreadquantity_;
  ::google::protobuf::int32 epollthreadquantity_;
  ::google::protobuf::int32 processthreadquantity_;
  ::google::protobuf::int32 prioritysize_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataPackage

// .Protocol.Functions Function = 1;
inline void DataPackage::clear_function() {
  function_ = 0;
}
inline ::Protocol::Functions DataPackage::function() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Function)
  return static_cast< ::Protocol::Functions >(function_);
}
inline void DataPackage::set_function(::Protocol::Functions value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Function)
}

// int32 PriorityLevel = 2;
inline void DataPackage::clear_prioritylevel() {
  prioritylevel_ = 0;
}
inline ::google::protobuf::int32 DataPackage::prioritylevel() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.PriorityLevel)
  return prioritylevel_;
}
inline void DataPackage::set_prioritylevel(::google::protobuf::int32 value) {
  
  prioritylevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.PriorityLevel)
}

// int64 SerialNumber = 3;
inline void DataPackage::clear_serialnumber() {
  serialnumber_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataPackage::serialnumber() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.SerialNumber)
  return serialnumber_;
}
inline void DataPackage::set_serialnumber(::google::protobuf::int64 value) {
  
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.SerialNumber)
}

// string CheckString = 4;
inline void DataPackage::clear_checkstring() {
  checkstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::checkstring() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.CheckString)
  return checkstring_.GetNoArena();
}
inline void DataPackage::set_checkstring(const ::std::string& value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.CheckString)
}
#if LANG_CXX11
inline void DataPackage::set_checkstring(::std::string&& value) {
  
  checkstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DataPackage.CheckString)
}
#endif
inline void DataPackage::set_checkstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.CheckString)
}
inline void DataPackage::set_checkstring(const char* value, size_t size) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.CheckString)
}
inline ::std::string* DataPackage::mutable_checkstring() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.CheckString)
  return checkstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_checkstring() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.CheckString)
  
  return checkstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_checkstring(::std::string* checkstring) {
  if (checkstring != NULL) {
    
  } else {
    
  }
  checkstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkstring);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.CheckString)
}

// string Sender = 5;
inline void DataPackage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Sender)
  return sender_.GetNoArena();
}
inline void DataPackage::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Sender)
}
#if LANG_CXX11
inline void DataPackage::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DataPackage.Sender)
}
#endif
inline void DataPackage::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Sender)
}
inline void DataPackage::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Sender)
}
inline ::std::string* DataPackage::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Sender)
}

// int32 Receiver = 6;
inline void DataPackage::clear_receiver() {
  receiver_ = 0;
}
inline ::google::protobuf::int32 DataPackage::receiver() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Receiver)
  return receiver_;
}
inline void DataPackage::set_receiver(::google::protobuf::int32 value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Receiver)
}

// .Protocol.ResultType Result = 7;
inline void DataPackage::clear_result() {
  result_ = 0;
}
inline ::Protocol::ResultType DataPackage::result() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Result)
  return static_cast< ::Protocol::ResultType >(result_);
}
inline void DataPackage::set_result(::Protocol::ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Result)
}

// string Content = 8;
inline void DataPackage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Content)
  return content_.GetNoArena();
}
inline void DataPackage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Content)
}
#if LANG_CXX11
inline void DataPackage::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DataPackage.Content)
}
#endif
inline void DataPackage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Content)
}
inline void DataPackage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Content)
}
inline ::std::string* DataPackage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Content)
}

// bytes Extend = 9;
inline void DataPackage::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataPackage::extend() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Extend)
  return extend_.GetNoArena();
}
inline void DataPackage::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Extend)
}
#if LANG_CXX11
inline void DataPackage::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DataPackage.Extend)
}
#endif
inline void DataPackage::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Extend)
}
inline void DataPackage::set_extend(const void* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Extend)
}
inline ::std::string* DataPackage::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataPackage::release_extend() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataPackage::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Extend)
}

// -------------------------------------------------------------------

// GLOBAL_CONFIG

// int32 ListenPort = 1;
inline void GLOBAL_CONFIG::clear_listenport() {
  listenport_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::listenport() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ListenPort)
  return listenport_;
}
inline void GLOBAL_CONFIG::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ListenPort)
}

// bool EnableSSL = 2;
inline void GLOBAL_CONFIG::clear_enablessl() {
  enablessl_ = false;
}
inline bool GLOBAL_CONFIG::enablessl() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EnableSSL)
  return enablessl_;
}
inline void GLOBAL_CONFIG::set_enablessl(bool value) {
  
  enablessl_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EnableSSL)
}

// string CertFilePath = 3;
inline void GLOBAL_CONFIG::clear_certfilepath() {
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certfilepath(const ::std::string& value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certfilepath(::std::string&& value) {
  
  certfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.CertFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_certfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertFilePath)
}
inline void GLOBAL_CONFIG::set_certfilepath(const char* value, size_t size) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertFilePath)
  
  return certfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certfilepath(::std::string* certfilepath) {
  if (certfilepath != NULL) {
    
  } else {
    
  }
  certfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertFilePath)
}

// string KeyFilePath = 4;
inline void GLOBAL_CONFIG::clear_keyfilepath() {
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::keyfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_keyfilepath(const ::std::string& value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_keyfilepath(::std::string&& value) {
  
  keyfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
#endif
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
inline void GLOBAL_CONFIG::set_keyfilepath(const char* value, size_t size) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_keyfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_keyfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.KeyFilePath)
  
  return keyfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_keyfilepath(::std::string* keyfilepath) {
  if (keyfilepath != NULL) {
    
  } else {
    
  }
  keyfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.KeyFilePath)
}

// string CertPasswd = 5;
inline void GLOBAL_CONFIG::clear_certpasswd() {
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::certpasswd() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_certpasswd(const ::std::string& value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertPasswd)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_certpasswd(::std::string&& value) {
  
  certpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.CertPasswd)
}
#endif
inline void GLOBAL_CONFIG::set_certpasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertPasswd)
}
inline void GLOBAL_CONFIG::set_certpasswd(const char* value, size_t size) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertPasswd)
}
inline ::std::string* GLOBAL_CONFIG::mutable_certpasswd() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_certpasswd() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertPasswd)
  
  return certpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_certpasswd(::std::string* certpasswd) {
  if (certpasswd != NULL) {
    
  } else {
    
  }
  certpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certpasswd);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertPasswd)
}

// int32 ConnectTime = 6;
inline void GLOBAL_CONFIG::clear_connecttime() {
  connecttime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::connecttime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ConnectTime)
  return connecttime_;
}
inline void GLOBAL_CONFIG::set_connecttime(::google::protobuf::int32 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ConnectTime)
}

// int32 ReceiveTime = 7;
inline void GLOBAL_CONFIG::clear_receivetime() {
  receivetime_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::receivetime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ReceiveTime)
  return receivetime_;
}
inline void GLOBAL_CONFIG::set_receivetime(::google::protobuf::int32 value) {
  
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ReceiveTime)
}

// string LogPath = 8;
inline void GLOBAL_CONFIG::clear_logpath() {
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::logpath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_logpath(const ::std::string& value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogPath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_logpath(::std::string&& value) {
  
  logpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.LogPath)
}
#endif
inline void GLOBAL_CONFIG::set_logpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.LogPath)
}
inline void GLOBAL_CONFIG::set_logpath(const char* value, size_t size) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.LogPath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_logpath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_logpath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.LogPath)
  
  return logpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_logpath(::std::string* logpath) {
  if (logpath != NULL) {
    
  } else {
    
  }
  logpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logpath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.LogPath)
}

// .Protocol.LogLevel LogLevel = 9;
inline void GLOBAL_CONFIG::clear_loglevel() {
  loglevel_ = 0;
}
inline ::Protocol::LogLevel GLOBAL_CONFIG::loglevel() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogLevel)
  return static_cast< ::Protocol::LogLevel >(loglevel_);
}
inline void GLOBAL_CONFIG::set_loglevel(::Protocol::LogLevel value) {
  
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogLevel)
}

// bool DebugMode = 10;
inline void GLOBAL_CONFIG::clear_debugmode() {
  debugmode_ = false;
}
inline bool GLOBAL_CONFIG::debugmode() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.DebugMode)
  return debugmode_;
}
inline void GLOBAL_CONFIG::set_debugmode(bool value) {
  
  debugmode_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.DebugMode)
}

// int32 MQThreadQuantity = 11;
inline void GLOBAL_CONFIG::clear_mqthreadquantity() {
  mqthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::mqthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
  return mqthreadquantity_;
}
inline void GLOBAL_CONFIG::set_mqthreadquantity(::google::protobuf::int32 value) {
  
  mqthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
}

// int32 EPollThreadQuantity = 12;
inline void GLOBAL_CONFIG::clear_epollthreadquantity() {
  epollthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::epollthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
  return epollthreadquantity_;
}
inline void GLOBAL_CONFIG::set_epollthreadquantity(::google::protobuf::int32 value) {
  
  epollthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
}

// int32 ProcessThreadQuantity = 13;
inline void GLOBAL_CONFIG::clear_processthreadquantity() {
  processthreadquantity_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::processthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
  return processthreadquantity_;
}
inline void GLOBAL_CONFIG::set_processthreadquantity(::google::protobuf::int32 value) {
  
  processthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
}

// int32 PrioritySize = 14;
inline void GLOBAL_CONFIG::clear_prioritysize() {
  prioritysize_ = 0;
}
inline ::google::protobuf::int32 GLOBAL_CONFIG::prioritysize() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.PrioritySize)
  return prioritysize_;
}
inline void GLOBAL_CONFIG::set_prioritysize(::google::protobuf::int32 value) {
  
  prioritysize_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.PrioritySize)
}

// .Protocol.ModuleType Type = 15;
inline void GLOBAL_CONFIG::clear_type() {
  type_ = 0;
}
inline ::Protocol::ModuleType GLOBAL_CONFIG::type() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.Type)
  return static_cast< ::Protocol::ModuleType >(type_);
}
inline void GLOBAL_CONFIG::set_type(::Protocol::ModuleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.Type)
}

// string ModuleName = 16;
inline void GLOBAL_CONFIG::clear_modulename() {
  modulename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulename() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ModuleName)
  return modulename_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulename(const ::std::string& value) {
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ModuleName)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulename(::std::string&& value) {
  
  modulename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.ModuleName)
}
#endif
inline void GLOBAL_CONFIG::set_modulename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.ModuleName)
}
inline void GLOBAL_CONFIG::set_modulename(const char* value, size_t size) {
  
  modulename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.ModuleName)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulename() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.ModuleName)
  return modulename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulename() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.ModuleName)
  
  return modulename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulename(::std::string* modulename) {
  if (modulename != NULL) {
    
  } else {
    
  }
  modulename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulename);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.ModuleName)
}

// string ModulePath = 17;
inline void GLOBAL_CONFIG::clear_modulepath() {
  modulepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::modulepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ModulePath)
  return modulepath_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_modulepath(const ::std::string& value) {
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ModulePath)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_modulepath(::std::string&& value) {
  
  modulepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.ModulePath)
}
#endif
inline void GLOBAL_CONFIG::set_modulepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.ModulePath)
}
inline void GLOBAL_CONFIG::set_modulepath(const char* value, size_t size) {
  
  modulepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.ModulePath)
}
inline ::std::string* GLOBAL_CONFIG::mutable_modulepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.ModulePath)
  return modulepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_modulepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.ModulePath)
  
  return modulepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_modulepath(::std::string* modulepath) {
  if (modulepath != NULL) {
    
  } else {
    
  }
  modulepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.ModulePath)
}

// bytes ModuleConfig = 18;
inline void GLOBAL_CONFIG::clear_moduleconfig() {
  moduleconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GLOBAL_CONFIG::moduleconfig() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ModuleConfig)
  return moduleconfig_.GetNoArena();
}
inline void GLOBAL_CONFIG::set_moduleconfig(const ::std::string& value) {
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ModuleConfig)
}
#if LANG_CXX11
inline void GLOBAL_CONFIG::set_moduleconfig(::std::string&& value) {
  
  moduleconfig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.GLOBAL_CONFIG.ModuleConfig)
}
#endif
inline void GLOBAL_CONFIG::set_moduleconfig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.ModuleConfig)
}
inline void GLOBAL_CONFIG::set_moduleconfig(const void* value, size_t size) {
  
  moduleconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.ModuleConfig)
}
inline ::std::string* GLOBAL_CONFIG::mutable_moduleconfig() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.ModuleConfig)
  return moduleconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GLOBAL_CONFIG::release_moduleconfig() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.ModuleConfig)
  
  return moduleconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GLOBAL_CONFIG::set_allocated_moduleconfig(::std::string* moduleconfig) {
  if (moduleconfig != NULL) {
    
  } else {
    
  }
  moduleconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleconfig);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.ModuleConfig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protocol::ModuleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ModuleType>() {
  return ::Protocol::ModuleType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ResultType>() {
  return ::Protocol::ResultType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LogLevel>() {
  return ::Protocol::LogLevel_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Functions>() {
  return ::Protocol::Functions_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2eproto
