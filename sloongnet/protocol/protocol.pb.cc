// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* DataPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLOBAL_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLOBAL_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* CONTROL_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CONTROL_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* DATA_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DATA_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* GATEWAY_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GATEWAY_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* FIREWALL_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FIREWALL_CONFIG_reflection_ = NULL;
const ::google::protobuf::Descriptor* PROCESS_CONFIG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PROCESS_CONFIG_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModuleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Functions_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  DataPackage_descriptor_ = file->message_type(0);
  static const int DataPackage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, prioritylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, checkstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, extend_),
  };
  DataPackage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataPackage_descriptor_,
      DataPackage::default_instance_,
      DataPackage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataPackage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, _is_default_instance_));
  GLOBAL_CONFIG_descriptor_ = file->message_type(1);
  static const int GLOBAL_CONFIG_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, listenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, enablessl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, certfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, keyfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, certpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, connecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, logpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, loglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, debugmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, mqthreadquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, epollthreadquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, processthreadquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, prioritysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, exconfig_),
  };
  GLOBAL_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GLOBAL_CONFIG_descriptor_,
      GLOBAL_CONFIG::default_instance_,
      GLOBAL_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(GLOBAL_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLOBAL_CONFIG, _is_default_instance_));
  CONTROL_CONFIG_descriptor_ = file->message_type(2);
  static const int CONTROL_CONFIG_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONTROL_CONFIG, blocktime_),
  };
  CONTROL_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CONTROL_CONFIG_descriptor_,
      CONTROL_CONFIG::default_instance_,
      CONTROL_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(CONTROL_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONTROL_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONTROL_CONFIG, _is_default_instance_));
  DB_CONFIG_descriptor_ = file->message_type(3);
  static const int DB_CONFIG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, serveraddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, serverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, database_),
  };
  DB_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_CONFIG_descriptor_,
      DB_CONFIG::default_instance_,
      DB_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(DB_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CONFIG, _is_default_instance_));
  DATA_CONFIG_descriptor_ = file->message_type(4);
  static const int DATA_CONFIG_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATA_CONFIG, datareceiveport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATA_CONFIG, datarecvtime_),
  };
  DATA_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DATA_CONFIG_descriptor_,
      DATA_CONFIG::default_instance_,
      DATA_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(DATA_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATA_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATA_CONFIG, _is_default_instance_));
  GATEWAY_CONFIG_descriptor_ = file->message_type(5);
  static const int GATEWAY_CONFIG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, clientchecktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, clientcheckkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, timeoutcheckinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, timeouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, processaddress_),
  };
  GATEWAY_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GATEWAY_CONFIG_descriptor_,
      GATEWAY_CONFIG::default_instance_,
      GATEWAY_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(GATEWAY_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATEWAY_CONFIG, _is_default_instance_));
  FIREWALL_CONFIG_descriptor_ = file->message_type(6);
  static const int FIREWALL_CONFIG_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIREWALL_CONFIG, blocktime_),
  };
  FIREWALL_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FIREWALL_CONFIG_descriptor_,
      FIREWALL_CONFIG::default_instance_,
      FIREWALL_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(FIREWALL_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIREWALL_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIREWALL_CONFIG, _is_default_instance_));
  PROCESS_CONFIG_descriptor_ = file->message_type(7);
  static const int PROCESS_CONFIG_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luacontextquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luascriptfolder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luaentryfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luaentryfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luaprocessfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, luasocketclosefunction_),
  };
  PROCESS_CONFIG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PROCESS_CONFIG_descriptor_,
      PROCESS_CONFIG::default_instance_,
      PROCESS_CONFIG_offsets_,
      -1,
      -1,
      -1,
      sizeof(PROCESS_CONFIG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PROCESS_CONFIG, _is_default_instance_));
  ModuleType_descriptor_ = file->enum_type(0);
  ResultType_descriptor_ = file->enum_type(1);
  LogLevel_descriptor_ = file->enum_type(2);
  Functions_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataPackage_descriptor_, &DataPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GLOBAL_CONFIG_descriptor_, &GLOBAL_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CONTROL_CONFIG_descriptor_, &CONTROL_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_CONFIG_descriptor_, &DB_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DATA_CONFIG_descriptor_, &DATA_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GATEWAY_CONFIG_descriptor_, &GATEWAY_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FIREWALL_CONFIG_descriptor_, &FIREWALL_CONFIG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PROCESS_CONFIG_descriptor_, &PROCESS_CONFIG::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete DataPackage::default_instance_;
  delete DataPackage_reflection_;
  delete GLOBAL_CONFIG::default_instance_;
  delete GLOBAL_CONFIG_reflection_;
  delete CONTROL_CONFIG::default_instance_;
  delete CONTROL_CONFIG_reflection_;
  delete DB_CONFIG::default_instance_;
  delete DB_CONFIG_reflection_;
  delete DATA_CONFIG::default_instance_;
  delete DATA_CONFIG_reflection_;
  delete GATEWAY_CONFIG::default_instance_;
  delete GATEWAY_CONFIG_reflection_;
  delete FIREWALL_CONFIG::default_instance_;
  delete FIREWALL_CONFIG_reflection_;
  delete PROCESS_CONFIG::default_instance_;
  delete PROCESS_CONFIG_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\010Protocol\"\337\001\n\013DataPacka"
    "ge\022%\n\010Function\030\001 \001(\0162\023.Protocol.Function"
    "s\022\025\n\rPriorityLevel\030\002 \001(\005\022\024\n\014SerialNumber"
    "\030\003 \001(\003\022\023\n\013CheckString\030\004 \001(\t\022\016\n\006Sender\030\005 "
    "\001(\t\022\020\n\010Receiver\030\006 \001(\005\022$\n\006Result\030\007 \001(\0162\024."
    "Protocol.ResultType\022\017\n\007Content\030\010 \001(\t\022\016\n\006"
    "Extend\030\t \001(\014\"\213\003\n\rGLOBAL_CONFIG\022\022\n\nListen"
    "Port\030\001 \001(\005\022\021\n\tEnableSSL\030\002 \001(\010\022\024\n\014CertFil"
    "ePath\030\003 \001(\t\022\023\n\013KeyFilePath\030\004 \001(\t\022\022\n\nCert"
    "Passwd\030\005 \001(\t\022\023\n\013ConnectTime\030\006 \001(\005\022\023\n\013Rec"
    "eiveTime\030\007 \001(\005\022\017\n\007LogPath\030\010 \001(\t\022$\n\010LogLe"
    "vel\030\t \001(\0162\022.Protocol.LogLevel\022\021\n\tDebugMo"
    "de\030\n \001(\010\022\030\n\020MQThreadQuantity\030\013 \001(\005\022\033\n\023EP"
    "ollThreadQuantity\030\014 \001(\005\022\035\n\025ProcessThread"
    "Quantity\030\r \001(\005\022\024\n\014PrioritySize\030\016 \001(\005\022\"\n\004"
    "Type\030\017 \001(\0162\024.Protocol.ModuleType\022\020\n\010ExCo"
    "nfig\030\020 \001(\014\"#\n\016CONTROL_CONFIG\022\021\n\tBlockTim"
    "e\030\001 \001(\005\"f\n\tDB_CONFIG\022\025\n\rServerAddress\030\001 "
    "\001(\t\022\022\n\nServerPort\030\002 \001(\005\022\014\n\004User\030\003 \001(\t\022\016\n"
    "\006Passwd\030\004 \001(\t\022\020\n\010Database\030\005 \001(\t\"<\n\013DATA_"
    "CONFIG\022\027\n\017DataReceivePort\030\001 \001(\005\022\024\n\014DataR"
    "ecvTime\030\002 \001(\005\"\214\001\n\016GATEWAY_CONFIG\022\027\n\017Clie"
    "ntCheckTime\030\001 \001(\005\022\026\n\016ClientCheckKey\030\002 \001("
    "\t\022\034\n\024TimeoutCheckInterval\030\003 \001(\005\022\023\n\013Timeo"
    "utTime\030\004 \001(\005\022\026\n\016ProcessAddress\030\005 \001(\t\"$\n\017"
    "FIREWALL_CONFIG\022\021\n\tBlockTime\030\001 \001(\005\"\261\001\n\016P"
    "ROCESS_CONFIG\022\032\n\022LuaContextQuantity\030\001 \001("
    "\005\022\027\n\017LuaScriptFolder\030\002 \001(\t\022\024\n\014LuaEntryFi"
    "le\030\003 \001(\t\022\030\n\020LuaEntryFunction\030\004 \001(\t\022\032\n\022Lu"
    "aProcessFunction\030\005 \001(\t\022\036\n\026LuaSocketClose"
    "Function\030\006 \001(\t*e\n\nModuleType\022\020\n\014Unconfig"
    "ured\020\000\022\013\n\007Control\020\001\022\014\n\010Firewall\020\002\022\013\n\007Gat"
    "eway\020\003\022\010\n\004Data\020\004\022\013\n\007Process\020\005\022\006\n\002DB\020\006*I\n"
    "\nResultType\022\013\n\007Succeed\020\000\022\t\n\005Error\020\001\022\013\n\007W"
    "arning\020\002\022\t\n\005Retry\020\003\022\013\n\007Invalid\020\004*^\n\010LogL"
    "evel\022\007\n\003All\020\000\022\n\n\006Verbos\020\001\022\t\n\005Debug\020\002\022\010\n\004"
    "Info\020\003\022\010\n\004Warn\020\004\022\007\n\003Err\020\005\022\n\n\006Assert\020\006\022\t\n"
    "\005Fatal\020\007*\307\001\n\tFunctions\022\022\n\016ProcessMessage"
    "\020\000\022\013\n\007PostLog\020\001\022\021\n\rRegisteServer\020\002\022\022\n\016Re"
    "startService\020\003\022\030\n\024GetAllConfigTemplate\020\004"
    "\022\025\n\021SetConfigTemplate\020\005\022\023\n\017GetServerConf"
    "ig\020\006\022\023\n\017SetServerConfig\020\007\022\027\n\023SetServerTo"
    "Template\020\010b\006proto3", 1698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  DataPackage::default_instance_ = new DataPackage();
  GLOBAL_CONFIG::default_instance_ = new GLOBAL_CONFIG();
  CONTROL_CONFIG::default_instance_ = new CONTROL_CONFIG();
  DB_CONFIG::default_instance_ = new DB_CONFIG();
  DATA_CONFIG::default_instance_ = new DATA_CONFIG();
  GATEWAY_CONFIG::default_instance_ = new GATEWAY_CONFIG();
  FIREWALL_CONFIG::default_instance_ = new FIREWALL_CONFIG();
  PROCESS_CONFIG::default_instance_ = new PROCESS_CONFIG();
  DataPackage::default_instance_->InitAsDefaultInstance();
  GLOBAL_CONFIG::default_instance_->InitAsDefaultInstance();
  CONTROL_CONFIG::default_instance_->InitAsDefaultInstance();
  DB_CONFIG::default_instance_->InitAsDefaultInstance();
  DATA_CONFIG::default_instance_->InitAsDefaultInstance();
  GATEWAY_CONFIG::default_instance_->InitAsDefaultInstance();
  FIREWALL_CONFIG::default_instance_->InitAsDefaultInstance();
  PROCESS_CONFIG::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;
const ::google::protobuf::EnumDescriptor* ModuleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleType_descriptor_;
}
bool ModuleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLevel_descriptor_;
}
bool LogLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Functions_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Functions_descriptor_;
}
bool Functions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataPackage::kFunctionFieldNumber;
const int DataPackage::kPriorityLevelFieldNumber;
const int DataPackage::kSerialNumberFieldNumber;
const int DataPackage::kCheckStringFieldNumber;
const int DataPackage::kSenderFieldNumber;
const int DataPackage::kReceiverFieldNumber;
const int DataPackage::kResultFieldNumber;
const int DataPackage::kContentFieldNumber;
const int DataPackage::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataPackage::DataPackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.DataPackage)
}

void DataPackage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataPackage::DataPackage(const DataPackage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.DataPackage)
}

void DataPackage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  function_ = 0;
  prioritylevel_ = 0;
  serialnumber_ = GOOGLE_LONGLONG(0);
  checkstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_ = 0;
  result_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataPackage::~DataPackage() {
  // @@protoc_insertion_point(destructor:Protocol.DataPackage)
  SharedDtor();
}

void DataPackage::SharedDtor() {
  checkstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_descriptor_;
}

const DataPackage& DataPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

DataPackage* DataPackage::default_instance_ = NULL;

DataPackage* DataPackage::New(::google::protobuf::Arena* arena) const {
  DataPackage* n = new DataPackage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.DataPackage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataPackage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataPackage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(function_, serialnumber_);
  ZR_(receiver_, result_);
  checkstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DataPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.DataPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.Functions Function = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_function(static_cast< ::Protocol::Functions >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PriorityLevel;
        break;
      }

      // optional int32 PriorityLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_PriorityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prioritylevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SerialNumber;
        break;
      }

      // optional int64 SerialNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_SerialNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialnumber_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CheckString;
        break;
      }

      // optional string CheckString = 4;
      case 4: {
        if (tag == 34) {
         parse_CheckString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checkstring().data(), this->checkstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DataPackage.CheckString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Sender;
        break;
      }

      // optional string Sender = 5;
      case 5: {
        if (tag == 42) {
         parse_Sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DataPackage.Sender"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Receiver;
        break;
      }

      // optional int32 Receiver = 6;
      case 6: {
        if (tag == 48) {
         parse_Receiver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Result;
        break;
      }

      // optional .Protocol.ResultType Result = 7;
      case 7: {
        if (tag == 56) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::Protocol::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Content;
        break;
      }

      // optional string Content = 8;
      case 8: {
        if (tag == 66) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DataPackage.Content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Extend;
        break;
      }

      // optional bytes Extend = 9;
      case 9: {
        if (tag == 74) {
         parse_Extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.DataPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.DataPackage)
  return false;
#undef DO_
}

void DataPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.DataPackage)
  // optional .Protocol.Functions Function = 1;
  if (this->function() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->function(), output);
  }

  // optional int32 PriorityLevel = 2;
  if (this->prioritylevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prioritylevel(), output);
  }

  // optional int64 SerialNumber = 3;
  if (this->serialnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->serialnumber(), output);
  }

  // optional string CheckString = 4;
  if (this->checkstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkstring().data(), this->checkstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.CheckString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->checkstring(), output);
  }

  // optional string Sender = 5;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.Sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender(), output);
  }

  // optional int32 Receiver = 6;
  if (this->receiver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->receiver(), output);
  }

  // optional .Protocol.ResultType Result = 7;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional string Content = 8;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  // optional bytes Extend = 9;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.DataPackage)
}

::google::protobuf::uint8* DataPackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.DataPackage)
  // optional .Protocol.Functions Function = 1;
  if (this->function() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->function(), target);
  }

  // optional int32 PriorityLevel = 2;
  if (this->prioritylevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prioritylevel(), target);
  }

  // optional int64 SerialNumber = 3;
  if (this->serialnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->serialnumber(), target);
  }

  // optional string CheckString = 4;
  if (this->checkstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkstring().data(), this->checkstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.CheckString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->checkstring(), target);
  }

  // optional string Sender = 5;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.Sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender(), target);
  }

  // optional int32 Receiver = 6;
  if (this->receiver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->receiver(), target);
  }

  // optional .Protocol.ResultType Result = 7;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  // optional string Content = 8;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DataPackage.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  // optional bytes Extend = 9;
  if (this->extend().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->extend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.DataPackage)
  return target;
}

int DataPackage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.DataPackage)
  int total_size = 0;

  // optional .Protocol.Functions Function = 1;
  if (this->function() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->function());
  }

  // optional int32 PriorityLevel = 2;
  if (this->prioritylevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prioritylevel());
  }

  // optional int64 SerialNumber = 3;
  if (this->serialnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serialnumber());
  }

  // optional string CheckString = 4;
  if (this->checkstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkstring());
  }

  // optional string Sender = 5;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // optional int32 Receiver = 6;
  if (this->receiver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receiver());
  }

  // optional .Protocol.ResultType Result = 7;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional string Content = 8;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional bytes Extend = 9;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.DataPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataPackage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataPackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.DataPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.DataPackage)
    MergeFrom(*source);
  }
}

void DataPackage::MergeFrom(const DataPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.DataPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.function() != 0) {
    set_function(from.function());
  }
  if (from.prioritylevel() != 0) {
    set_prioritylevel(from.prioritylevel());
  }
  if (from.serialnumber() != 0) {
    set_serialnumber(from.serialnumber());
  }
  if (from.checkstring().size() > 0) {

    checkstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkstring_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.receiver() != 0) {
    set_receiver(from.receiver());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void DataPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.DataPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage::CopyFrom(const DataPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.DataPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage::IsInitialized() const {

  return true;
}

void DataPackage::Swap(DataPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataPackage::InternalSwap(DataPackage* other) {
  std::swap(function_, other->function_);
  std::swap(prioritylevel_, other->prioritylevel_);
  std::swap(serialnumber_, other->serialnumber_);
  checkstring_.Swap(&other->checkstring_);
  sender_.Swap(&other->sender_);
  std::swap(receiver_, other->receiver_);
  std::swap(result_, other->result_);
  content_.Swap(&other->content_);
  extend_.Swap(&other->extend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_descriptor_;
  metadata.reflection = DataPackage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataPackage

// optional .Protocol.Functions Function = 1;
void DataPackage::clear_function() {
  function_ = 0;
}
 ::Protocol::Functions DataPackage::function() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Function)
  return static_cast< ::Protocol::Functions >(function_);
}
 void DataPackage::set_function(::Protocol::Functions value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Function)
}

// optional int32 PriorityLevel = 2;
void DataPackage::clear_prioritylevel() {
  prioritylevel_ = 0;
}
 ::google::protobuf::int32 DataPackage::prioritylevel() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.PriorityLevel)
  return prioritylevel_;
}
 void DataPackage::set_prioritylevel(::google::protobuf::int32 value) {
  
  prioritylevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.PriorityLevel)
}

// optional int64 SerialNumber = 3;
void DataPackage::clear_serialnumber() {
  serialnumber_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DataPackage::serialnumber() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.SerialNumber)
  return serialnumber_;
}
 void DataPackage::set_serialnumber(::google::protobuf::int64 value) {
  
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.SerialNumber)
}

// optional string CheckString = 4;
void DataPackage::clear_checkstring() {
  checkstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataPackage::checkstring() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.CheckString)
  return checkstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_checkstring(const ::std::string& value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.CheckString)
}
 void DataPackage::set_checkstring(const char* value) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.CheckString)
}
 void DataPackage::set_checkstring(const char* value, size_t size) {
  
  checkstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.CheckString)
}
 ::std::string* DataPackage::mutable_checkstring() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.CheckString)
  return checkstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataPackage::release_checkstring() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.CheckString)
  
  return checkstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_allocated_checkstring(::std::string* checkstring) {
  if (checkstring != NULL) {
    
  } else {
    
  }
  checkstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkstring);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.CheckString)
}

// optional string Sender = 5;
void DataPackage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataPackage::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Sender)
  return sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Sender)
}
 void DataPackage::set_sender(const char* value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Sender)
}
 void DataPackage::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Sender)
}
 ::std::string* DataPackage::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataPackage::release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Sender)
}

// optional int32 Receiver = 6;
void DataPackage::clear_receiver() {
  receiver_ = 0;
}
 ::google::protobuf::int32 DataPackage::receiver() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Receiver)
  return receiver_;
}
 void DataPackage::set_receiver(::google::protobuf::int32 value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Receiver)
}

// optional .Protocol.ResultType Result = 7;
void DataPackage::clear_result() {
  result_ = 0;
}
 ::Protocol::ResultType DataPackage::result() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Result)
  return static_cast< ::Protocol::ResultType >(result_);
}
 void DataPackage::set_result(::Protocol::ResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Result)
}

// optional string Content = 8;
void DataPackage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataPackage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Content)
}
 void DataPackage::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Content)
}
 void DataPackage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Content)
}
 ::std::string* DataPackage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataPackage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Content)
}

// optional bytes Extend = 9;
void DataPackage::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataPackage::extend() const {
  // @@protoc_insertion_point(field_get:Protocol.DataPackage.Extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DataPackage.Extend)
}
 void DataPackage::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DataPackage.Extend)
}
 void DataPackage::set_extend(const void* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DataPackage.Extend)
}
 ::std::string* DataPackage::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DataPackage.Extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataPackage::release_extend() {
  // @@protoc_insertion_point(field_release:Protocol.DataPackage.Extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataPackage::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DataPackage.Extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GLOBAL_CONFIG::kListenPortFieldNumber;
const int GLOBAL_CONFIG::kEnableSSLFieldNumber;
const int GLOBAL_CONFIG::kCertFilePathFieldNumber;
const int GLOBAL_CONFIG::kKeyFilePathFieldNumber;
const int GLOBAL_CONFIG::kCertPasswdFieldNumber;
const int GLOBAL_CONFIG::kConnectTimeFieldNumber;
const int GLOBAL_CONFIG::kReceiveTimeFieldNumber;
const int GLOBAL_CONFIG::kLogPathFieldNumber;
const int GLOBAL_CONFIG::kLogLevelFieldNumber;
const int GLOBAL_CONFIG::kDebugModeFieldNumber;
const int GLOBAL_CONFIG::kMQThreadQuantityFieldNumber;
const int GLOBAL_CONFIG::kEPollThreadQuantityFieldNumber;
const int GLOBAL_CONFIG::kProcessThreadQuantityFieldNumber;
const int GLOBAL_CONFIG::kPrioritySizeFieldNumber;
const int GLOBAL_CONFIG::kTypeFieldNumber;
const int GLOBAL_CONFIG::kExConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GLOBAL_CONFIG::GLOBAL_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.GLOBAL_CONFIG)
}

void GLOBAL_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GLOBAL_CONFIG::GLOBAL_CONFIG(const GLOBAL_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.GLOBAL_CONFIG)
}

void GLOBAL_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  listenport_ = 0;
  enablessl_ = false;
  certfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connecttime_ = 0;
  receivetime_ = 0;
  logpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loglevel_ = 0;
  debugmode_ = false;
  mqthreadquantity_ = 0;
  epollthreadquantity_ = 0;
  processthreadquantity_ = 0;
  prioritysize_ = 0;
  type_ = 0;
  exconfig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GLOBAL_CONFIG::~GLOBAL_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.GLOBAL_CONFIG)
  SharedDtor();
}

void GLOBAL_CONFIG::SharedDtor() {
  certfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exconfig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GLOBAL_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLOBAL_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLOBAL_CONFIG_descriptor_;
}

const GLOBAL_CONFIG& GLOBAL_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

GLOBAL_CONFIG* GLOBAL_CONFIG::default_instance_ = NULL;

GLOBAL_CONFIG* GLOBAL_CONFIG::New(::google::protobuf::Arena* arena) const {
  GLOBAL_CONFIG* n = new GLOBAL_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GLOBAL_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GLOBAL_CONFIG)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GLOBAL_CONFIG, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GLOBAL_CONFIG*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(listenport_, connecttime_);
  enablessl_ = false;
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivetime_ = 0;
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(loglevel_, type_);
  debugmode_ = false;
  exconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GLOBAL_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.GLOBAL_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ListenPort = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnableSSL;
        break;
      }

      // optional bool EnableSSL = 2;
      case 2: {
        if (tag == 16) {
         parse_EnableSSL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablessl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CertFilePath;
        break;
      }

      // optional string CertFilePath = 3;
      case 3: {
        if (tag == 26) {
         parse_CertFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certfilepath().data(), this->certfilepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GLOBAL_CONFIG.CertFilePath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_KeyFilePath;
        break;
      }

      // optional string KeyFilePath = 4;
      case 4: {
        if (tag == 34) {
         parse_KeyFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keyfilepath().data(), this->keyfilepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GLOBAL_CONFIG.KeyFilePath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CertPasswd;
        break;
      }

      // optional string CertPasswd = 5;
      case 5: {
        if (tag == 42) {
         parse_CertPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certpasswd().data(), this->certpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GLOBAL_CONFIG.CertPasswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ConnectTime;
        break;
      }

      // optional int32 ConnectTime = 6;
      case 6: {
        if (tag == 48) {
         parse_ConnectTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connecttime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ReceiveTime;
        break;
      }

      // optional int32 ReceiveTime = 7;
      case 7: {
        if (tag == 56) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LogPath;
        break;
      }

      // optional string LogPath = 8;
      case 8: {
        if (tag == 66) {
         parse_LogPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logpath().data(), this->logpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GLOBAL_CONFIG.LogPath"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LogLevel;
        break;
      }

      // optional .Protocol.LogLevel LogLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_LogLevel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loglevel(static_cast< ::Protocol::LogLevel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DebugMode;
        break;
      }

      // optional bool DebugMode = 10;
      case 10: {
        if (tag == 80) {
         parse_DebugMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debugmode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MQThreadQuantity;
        break;
      }

      // optional int32 MQThreadQuantity = 11;
      case 11: {
        if (tag == 88) {
         parse_MQThreadQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mqthreadquantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_EPollThreadQuantity;
        break;
      }

      // optional int32 EPollThreadQuantity = 12;
      case 12: {
        if (tag == 96) {
         parse_EPollThreadQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epollthreadquantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ProcessThreadQuantity;
        break;
      }

      // optional int32 ProcessThreadQuantity = 13;
      case 13: {
        if (tag == 104) {
         parse_ProcessThreadQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processthreadquantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_PrioritySize;
        break;
      }

      // optional int32 PrioritySize = 14;
      case 14: {
        if (tag == 112) {
         parse_PrioritySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prioritysize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Type;
        break;
      }

      // optional .Protocol.ModuleType Type = 15;
      case 15: {
        if (tag == 120) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Protocol::ModuleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ExConfig;
        break;
      }

      // optional bytes ExConfig = 16;
      case 16: {
        if (tag == 130) {
         parse_ExConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.GLOBAL_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.GLOBAL_CONFIG)
  return false;
#undef DO_
}

void GLOBAL_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.GLOBAL_CONFIG)
  // optional int32 ListenPort = 1;
  if (this->listenport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->listenport(), output);
  }

  // optional bool EnableSSL = 2;
  if (this->enablessl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enablessl(), output);
  }

  // optional string CertFilePath = 3;
  if (this->certfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certfilepath().data(), this->certfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.CertFilePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->certfilepath(), output);
  }

  // optional string KeyFilePath = 4;
  if (this->keyfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyfilepath().data(), this->keyfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.KeyFilePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->keyfilepath(), output);
  }

  // optional string CertPasswd = 5;
  if (this->certpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certpasswd().data(), this->certpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.CertPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->certpasswd(), output);
  }

  // optional int32 ConnectTime = 6;
  if (this->connecttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->connecttime(), output);
  }

  // optional int32 ReceiveTime = 7;
  if (this->receivetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->receivetime(), output);
  }

  // optional string LogPath = 8;
  if (this->logpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpath().data(), this->logpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.LogPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->logpath(), output);
  }

  // optional .Protocol.LogLevel LogLevel = 9;
  if (this->loglevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->loglevel(), output);
  }

  // optional bool DebugMode = 10;
  if (this->debugmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->debugmode(), output);
  }

  // optional int32 MQThreadQuantity = 11;
  if (this->mqthreadquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mqthreadquantity(), output);
  }

  // optional int32 EPollThreadQuantity = 12;
  if (this->epollthreadquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->epollthreadquantity(), output);
  }

  // optional int32 ProcessThreadQuantity = 13;
  if (this->processthreadquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->processthreadquantity(), output);
  }

  // optional int32 PrioritySize = 14;
  if (this->prioritysize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->prioritysize(), output);
  }

  // optional .Protocol.ModuleType Type = 15;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->type(), output);
  }

  // optional bytes ExConfig = 16;
  if (this->exconfig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->exconfig(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.GLOBAL_CONFIG)
}

::google::protobuf::uint8* GLOBAL_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GLOBAL_CONFIG)
  // optional int32 ListenPort = 1;
  if (this->listenport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->listenport(), target);
  }

  // optional bool EnableSSL = 2;
  if (this->enablessl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enablessl(), target);
  }

  // optional string CertFilePath = 3;
  if (this->certfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certfilepath().data(), this->certfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.CertFilePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->certfilepath(), target);
  }

  // optional string KeyFilePath = 4;
  if (this->keyfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keyfilepath().data(), this->keyfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.KeyFilePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keyfilepath(), target);
  }

  // optional string CertPasswd = 5;
  if (this->certpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certpasswd().data(), this->certpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.CertPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->certpasswd(), target);
  }

  // optional int32 ConnectTime = 6;
  if (this->connecttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->connecttime(), target);
  }

  // optional int32 ReceiveTime = 7;
  if (this->receivetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->receivetime(), target);
  }

  // optional string LogPath = 8;
  if (this->logpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpath().data(), this->logpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GLOBAL_CONFIG.LogPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->logpath(), target);
  }

  // optional .Protocol.LogLevel LogLevel = 9;
  if (this->loglevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->loglevel(), target);
  }

  // optional bool DebugMode = 10;
  if (this->debugmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->debugmode(), target);
  }

  // optional int32 MQThreadQuantity = 11;
  if (this->mqthreadquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mqthreadquantity(), target);
  }

  // optional int32 EPollThreadQuantity = 12;
  if (this->epollthreadquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->epollthreadquantity(), target);
  }

  // optional int32 ProcessThreadQuantity = 13;
  if (this->processthreadquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->processthreadquantity(), target);
  }

  // optional int32 PrioritySize = 14;
  if (this->prioritysize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->prioritysize(), target);
  }

  // optional .Protocol.ModuleType Type = 15;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->type(), target);
  }

  // optional bytes ExConfig = 16;
  if (this->exconfig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->exconfig(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GLOBAL_CONFIG)
  return target;
}

int GLOBAL_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GLOBAL_CONFIG)
  int total_size = 0;

  // optional int32 ListenPort = 1;
  if (this->listenport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listenport());
  }

  // optional bool EnableSSL = 2;
  if (this->enablessl() != 0) {
    total_size += 1 + 1;
  }

  // optional string CertFilePath = 3;
  if (this->certfilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certfilepath());
  }

  // optional string KeyFilePath = 4;
  if (this->keyfilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyfilepath());
  }

  // optional string CertPasswd = 5;
  if (this->certpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certpasswd());
  }

  // optional int32 ConnectTime = 6;
  if (this->connecttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->connecttime());
  }

  // optional int32 ReceiveTime = 7;
  if (this->receivetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receivetime());
  }

  // optional string LogPath = 8;
  if (this->logpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logpath());
  }

  // optional .Protocol.LogLevel LogLevel = 9;
  if (this->loglevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loglevel());
  }

  // optional bool DebugMode = 10;
  if (this->debugmode() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 MQThreadQuantity = 11;
  if (this->mqthreadquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mqthreadquantity());
  }

  // optional int32 EPollThreadQuantity = 12;
  if (this->epollthreadquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epollthreadquantity());
  }

  // optional int32 ProcessThreadQuantity = 13;
  if (this->processthreadquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->processthreadquantity());
  }

  // optional int32 PrioritySize = 14;
  if (this->prioritysize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prioritysize());
  }

  // optional .Protocol.ModuleType Type = 15;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes ExConfig = 16;
  if (this->exconfig().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exconfig());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLOBAL_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GLOBAL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GLOBAL_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GLOBAL_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GLOBAL_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GLOBAL_CONFIG)
    MergeFrom(*source);
  }
}

void GLOBAL_CONFIG::MergeFrom(const GLOBAL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GLOBAL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.listenport() != 0) {
    set_listenport(from.listenport());
  }
  if (from.enablessl() != 0) {
    set_enablessl(from.enablessl());
  }
  if (from.certfilepath().size() > 0) {

    certfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certfilepath_);
  }
  if (from.keyfilepath().size() > 0) {

    keyfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyfilepath_);
  }
  if (from.certpasswd().size() > 0) {

    certpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certpasswd_);
  }
  if (from.connecttime() != 0) {
    set_connecttime(from.connecttime());
  }
  if (from.receivetime() != 0) {
    set_receivetime(from.receivetime());
  }
  if (from.logpath().size() > 0) {

    logpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logpath_);
  }
  if (from.loglevel() != 0) {
    set_loglevel(from.loglevel());
  }
  if (from.debugmode() != 0) {
    set_debugmode(from.debugmode());
  }
  if (from.mqthreadquantity() != 0) {
    set_mqthreadquantity(from.mqthreadquantity());
  }
  if (from.epollthreadquantity() != 0) {
    set_epollthreadquantity(from.epollthreadquantity());
  }
  if (from.processthreadquantity() != 0) {
    set_processthreadquantity(from.processthreadquantity());
  }
  if (from.prioritysize() != 0) {
    set_prioritysize(from.prioritysize());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.exconfig().size() > 0) {

    exconfig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exconfig_);
  }
}

void GLOBAL_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GLOBAL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLOBAL_CONFIG::CopyFrom(const GLOBAL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GLOBAL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLOBAL_CONFIG::IsInitialized() const {

  return true;
}

void GLOBAL_CONFIG::Swap(GLOBAL_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GLOBAL_CONFIG::InternalSwap(GLOBAL_CONFIG* other) {
  std::swap(listenport_, other->listenport_);
  std::swap(enablessl_, other->enablessl_);
  certfilepath_.Swap(&other->certfilepath_);
  keyfilepath_.Swap(&other->keyfilepath_);
  certpasswd_.Swap(&other->certpasswd_);
  std::swap(connecttime_, other->connecttime_);
  std::swap(receivetime_, other->receivetime_);
  logpath_.Swap(&other->logpath_);
  std::swap(loglevel_, other->loglevel_);
  std::swap(debugmode_, other->debugmode_);
  std::swap(mqthreadquantity_, other->mqthreadquantity_);
  std::swap(epollthreadquantity_, other->epollthreadquantity_);
  std::swap(processthreadquantity_, other->processthreadquantity_);
  std::swap(prioritysize_, other->prioritysize_);
  std::swap(type_, other->type_);
  exconfig_.Swap(&other->exconfig_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GLOBAL_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLOBAL_CONFIG_descriptor_;
  metadata.reflection = GLOBAL_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GLOBAL_CONFIG

// optional int32 ListenPort = 1;
void GLOBAL_CONFIG::clear_listenport() {
  listenport_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::listenport() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ListenPort)
  return listenport_;
}
 void GLOBAL_CONFIG::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ListenPort)
}

// optional bool EnableSSL = 2;
void GLOBAL_CONFIG::clear_enablessl() {
  enablessl_ = false;
}
 bool GLOBAL_CONFIG::enablessl() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EnableSSL)
  return enablessl_;
}
 void GLOBAL_CONFIG::set_enablessl(bool value) {
  
  enablessl_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EnableSSL)
}

// optional string CertFilePath = 3;
void GLOBAL_CONFIG::clear_certfilepath() {
  certfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GLOBAL_CONFIG::certfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_certfilepath(const ::std::string& value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertFilePath)
}
 void GLOBAL_CONFIG::set_certfilepath(const char* value) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertFilePath)
}
 void GLOBAL_CONFIG::set_certfilepath(const char* value, size_t size) {
  
  certfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertFilePath)
}
 ::std::string* GLOBAL_CONFIG::mutable_certfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertFilePath)
  return certfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GLOBAL_CONFIG::release_certfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertFilePath)
  
  return certfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_allocated_certfilepath(::std::string* certfilepath) {
  if (certfilepath != NULL) {
    
  } else {
    
  }
  certfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertFilePath)
}

// optional string KeyFilePath = 4;
void GLOBAL_CONFIG::clear_keyfilepath() {
  keyfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GLOBAL_CONFIG::keyfilepath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_keyfilepath(const ::std::string& value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
 void GLOBAL_CONFIG::set_keyfilepath(const char* value) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
 void GLOBAL_CONFIG::set_keyfilepath(const char* value, size_t size) {
  
  keyfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.KeyFilePath)
}
 ::std::string* GLOBAL_CONFIG::mutable_keyfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.KeyFilePath)
  return keyfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GLOBAL_CONFIG::release_keyfilepath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.KeyFilePath)
  
  return keyfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_allocated_keyfilepath(::std::string* keyfilepath) {
  if (keyfilepath != NULL) {
    
  } else {
    
  }
  keyfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfilepath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.KeyFilePath)
}

// optional string CertPasswd = 5;
void GLOBAL_CONFIG::clear_certpasswd() {
  certpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GLOBAL_CONFIG::certpasswd() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_certpasswd(const ::std::string& value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.CertPasswd)
}
 void GLOBAL_CONFIG::set_certpasswd(const char* value) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.CertPasswd)
}
 void GLOBAL_CONFIG::set_certpasswd(const char* value, size_t size) {
  
  certpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.CertPasswd)
}
 ::std::string* GLOBAL_CONFIG::mutable_certpasswd() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.CertPasswd)
  return certpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GLOBAL_CONFIG::release_certpasswd() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.CertPasswd)
  
  return certpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_allocated_certpasswd(::std::string* certpasswd) {
  if (certpasswd != NULL) {
    
  } else {
    
  }
  certpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certpasswd);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.CertPasswd)
}

// optional int32 ConnectTime = 6;
void GLOBAL_CONFIG::clear_connecttime() {
  connecttime_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::connecttime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ConnectTime)
  return connecttime_;
}
 void GLOBAL_CONFIG::set_connecttime(::google::protobuf::int32 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ConnectTime)
}

// optional int32 ReceiveTime = 7;
void GLOBAL_CONFIG::clear_receivetime() {
  receivetime_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::receivetime() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ReceiveTime)
  return receivetime_;
}
 void GLOBAL_CONFIG::set_receivetime(::google::protobuf::int32 value) {
  
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ReceiveTime)
}

// optional string LogPath = 8;
void GLOBAL_CONFIG::clear_logpath() {
  logpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GLOBAL_CONFIG::logpath() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_logpath(const ::std::string& value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogPath)
}
 void GLOBAL_CONFIG::set_logpath(const char* value) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.LogPath)
}
 void GLOBAL_CONFIG::set_logpath(const char* value, size_t size) {
  
  logpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.LogPath)
}
 ::std::string* GLOBAL_CONFIG::mutable_logpath() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.LogPath)
  return logpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GLOBAL_CONFIG::release_logpath() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.LogPath)
  
  return logpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_allocated_logpath(::std::string* logpath) {
  if (logpath != NULL) {
    
  } else {
    
  }
  logpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logpath);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.LogPath)
}

// optional .Protocol.LogLevel LogLevel = 9;
void GLOBAL_CONFIG::clear_loglevel() {
  loglevel_ = 0;
}
 ::Protocol::LogLevel GLOBAL_CONFIG::loglevel() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.LogLevel)
  return static_cast< ::Protocol::LogLevel >(loglevel_);
}
 void GLOBAL_CONFIG::set_loglevel(::Protocol::LogLevel value) {
  
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.LogLevel)
}

// optional bool DebugMode = 10;
void GLOBAL_CONFIG::clear_debugmode() {
  debugmode_ = false;
}
 bool GLOBAL_CONFIG::debugmode() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.DebugMode)
  return debugmode_;
}
 void GLOBAL_CONFIG::set_debugmode(bool value) {
  
  debugmode_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.DebugMode)
}

// optional int32 MQThreadQuantity = 11;
void GLOBAL_CONFIG::clear_mqthreadquantity() {
  mqthreadquantity_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::mqthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
  return mqthreadquantity_;
}
 void GLOBAL_CONFIG::set_mqthreadquantity(::google::protobuf::int32 value) {
  
  mqthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.MQThreadQuantity)
}

// optional int32 EPollThreadQuantity = 12;
void GLOBAL_CONFIG::clear_epollthreadquantity() {
  epollthreadquantity_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::epollthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
  return epollthreadquantity_;
}
 void GLOBAL_CONFIG::set_epollthreadquantity(::google::protobuf::int32 value) {
  
  epollthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.EPollThreadQuantity)
}

// optional int32 ProcessThreadQuantity = 13;
void GLOBAL_CONFIG::clear_processthreadquantity() {
  processthreadquantity_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::processthreadquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
  return processthreadquantity_;
}
 void GLOBAL_CONFIG::set_processthreadquantity(::google::protobuf::int32 value) {
  
  processthreadquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ProcessThreadQuantity)
}

// optional int32 PrioritySize = 14;
void GLOBAL_CONFIG::clear_prioritysize() {
  prioritysize_ = 0;
}
 ::google::protobuf::int32 GLOBAL_CONFIG::prioritysize() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.PrioritySize)
  return prioritysize_;
}
 void GLOBAL_CONFIG::set_prioritysize(::google::protobuf::int32 value) {
  
  prioritysize_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.PrioritySize)
}

// optional .Protocol.ModuleType Type = 15;
void GLOBAL_CONFIG::clear_type() {
  type_ = 0;
}
 ::Protocol::ModuleType GLOBAL_CONFIG::type() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.Type)
  return static_cast< ::Protocol::ModuleType >(type_);
}
 void GLOBAL_CONFIG::set_type(::Protocol::ModuleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.Type)
}

// optional bytes ExConfig = 16;
void GLOBAL_CONFIG::clear_exconfig() {
  exconfig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GLOBAL_CONFIG::exconfig() const {
  // @@protoc_insertion_point(field_get:Protocol.GLOBAL_CONFIG.ExConfig)
  return exconfig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_exconfig(const ::std::string& value) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GLOBAL_CONFIG.ExConfig)
}
 void GLOBAL_CONFIG::set_exconfig(const char* value) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GLOBAL_CONFIG.ExConfig)
}
 void GLOBAL_CONFIG::set_exconfig(const void* value, size_t size) {
  
  exconfig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GLOBAL_CONFIG.ExConfig)
}
 ::std::string* GLOBAL_CONFIG::mutable_exconfig() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GLOBAL_CONFIG.ExConfig)
  return exconfig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GLOBAL_CONFIG::release_exconfig() {
  // @@protoc_insertion_point(field_release:Protocol.GLOBAL_CONFIG.ExConfig)
  
  return exconfig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GLOBAL_CONFIG::set_allocated_exconfig(::std::string* exconfig) {
  if (exconfig != NULL) {
    
  } else {
    
  }
  exconfig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exconfig);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GLOBAL_CONFIG.ExConfig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CONTROL_CONFIG::kBlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CONTROL_CONFIG::CONTROL_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.CONTROL_CONFIG)
}

void CONTROL_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CONTROL_CONFIG::CONTROL_CONFIG(const CONTROL_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.CONTROL_CONFIG)
}

void CONTROL_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  blocktime_ = 0;
}

CONTROL_CONFIG::~CONTROL_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.CONTROL_CONFIG)
  SharedDtor();
}

void CONTROL_CONFIG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CONTROL_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CONTROL_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONTROL_CONFIG_descriptor_;
}

const CONTROL_CONFIG& CONTROL_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

CONTROL_CONFIG* CONTROL_CONFIG::default_instance_ = NULL;

CONTROL_CONFIG* CONTROL_CONFIG::New(::google::protobuf::Arena* arena) const {
  CONTROL_CONFIG* n = new CONTROL_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CONTROL_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.CONTROL_CONFIG)
  blocktime_ = 0;
}

bool CONTROL_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.CONTROL_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BlockTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocktime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.CONTROL_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.CONTROL_CONFIG)
  return false;
#undef DO_
}

void CONTROL_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.CONTROL_CONFIG)
  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blocktime(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.CONTROL_CONFIG)
}

::google::protobuf::uint8* CONTROL_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.CONTROL_CONFIG)
  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blocktime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.CONTROL_CONFIG)
  return target;
}

int CONTROL_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.CONTROL_CONFIG)
  int total_size = 0;

  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blocktime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CONTROL_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.CONTROL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CONTROL_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CONTROL_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.CONTROL_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.CONTROL_CONFIG)
    MergeFrom(*source);
  }
}

void CONTROL_CONFIG::MergeFrom(const CONTROL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.CONTROL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.blocktime() != 0) {
    set_blocktime(from.blocktime());
  }
}

void CONTROL_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.CONTROL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONTROL_CONFIG::CopyFrom(const CONTROL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.CONTROL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROL_CONFIG::IsInitialized() const {

  return true;
}

void CONTROL_CONFIG::Swap(CONTROL_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CONTROL_CONFIG::InternalSwap(CONTROL_CONFIG* other) {
  std::swap(blocktime_, other->blocktime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CONTROL_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CONTROL_CONFIG_descriptor_;
  metadata.reflection = CONTROL_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CONTROL_CONFIG

// optional int32 BlockTime = 1;
void CONTROL_CONFIG::clear_blocktime() {
  blocktime_ = 0;
}
 ::google::protobuf::int32 CONTROL_CONFIG::blocktime() const {
  // @@protoc_insertion_point(field_get:Protocol.CONTROL_CONFIG.BlockTime)
  return blocktime_;
}
 void CONTROL_CONFIG::set_blocktime(::google::protobuf::int32 value) {
  
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.CONTROL_CONFIG.BlockTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DB_CONFIG::kServerAddressFieldNumber;
const int DB_CONFIG::kServerPortFieldNumber;
const int DB_CONFIG::kUserFieldNumber;
const int DB_CONFIG::kPasswdFieldNumber;
const int DB_CONFIG::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DB_CONFIG::DB_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.DB_CONFIG)
}

void DB_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DB_CONFIG::DB_CONFIG(const DB_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.DB_CONFIG)
}

void DB_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serveraddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DB_CONFIG::~DB_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.DB_CONFIG)
  SharedDtor();
}

void DB_CONFIG::SharedDtor() {
  serveraddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CONFIG_descriptor_;
}

const DB_CONFIG& DB_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

DB_CONFIG* DB_CONFIG::default_instance_ = NULL;

DB_CONFIG* DB_CONFIG::New(::google::protobuf::Arena* arena) const {
  DB_CONFIG* n = new DB_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.DB_CONFIG)
  serveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_ = 0;
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DB_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.DB_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerAddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveraddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serveraddress().data(), this->serveraddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DB_CONFIG.ServerAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerPort;
        break;
      }

      // optional int32 ServerPort = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_User;
        break;
      }

      // optional string User = 3;
      case 3: {
        if (tag == 26) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DB_CONFIG.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Passwd;
        break;
      }

      // optional string Passwd = 4;
      case 4: {
        if (tag == 34) {
         parse_Passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DB_CONFIG.Passwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Database;
        break;
      }

      // optional string Database = 5;
      case 5: {
        if (tag == 42) {
         parse_Database:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.DB_CONFIG.Database"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.DB_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.DB_CONFIG)
  return false;
#undef DO_
}

void DB_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.DB_CONFIG)
  // optional string ServerAddress = 1;
  if (this->serveraddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serveraddress().data(), this->serveraddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.ServerAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serveraddress(), output);
  }

  // optional int32 ServerPort = 2;
  if (this->serverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverport(), output);
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // optional string Passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.Passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  // optional string Database = 5;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.Database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->database(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.DB_CONFIG)
}

::google::protobuf::uint8* DB_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.DB_CONFIG)
  // optional string ServerAddress = 1;
  if (this->serveraddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serveraddress().data(), this->serveraddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.ServerAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serveraddress(), target);
  }

  // optional int32 ServerPort = 2;
  if (this->serverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverport(), target);
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // optional string Passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.Passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  // optional string Database = 5;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.DB_CONFIG.Database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->database(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.DB_CONFIG)
  return target;
}

int DB_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.DB_CONFIG)
  int total_size = 0;

  // optional string ServerAddress = 1;
  if (this->serveraddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serveraddress());
  }

  // optional int32 ServerPort = 2;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverport());
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string Passwd = 4;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // optional string Database = 5;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.DB_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DB_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DB_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.DB_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.DB_CONFIG)
    MergeFrom(*source);
  }
}

void DB_CONFIG::MergeFrom(const DB_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.DB_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serveraddress().size() > 0) {

    serveraddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serveraddress_);
  }
  if (from.serverport() != 0) {
    set_serverport(from.serverport());
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void DB_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.DB_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CONFIG::CopyFrom(const DB_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.DB_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CONFIG::IsInitialized() const {

  return true;
}

void DB_CONFIG::Swap(DB_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_CONFIG::InternalSwap(DB_CONFIG* other) {
  serveraddress_.Swap(&other->serveraddress_);
  std::swap(serverport_, other->serverport_);
  user_.Swap(&other->user_);
  passwd_.Swap(&other->passwd_);
  database_.Swap(&other->database_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CONFIG_descriptor_;
  metadata.reflection = DB_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_CONFIG

// optional string ServerAddress = 1;
void DB_CONFIG::clear_serveraddress() {
  serveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DB_CONFIG::serveraddress() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.ServerAddress)
  return serveraddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_serveraddress(const ::std::string& value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.ServerAddress)
}
 void DB_CONFIG::set_serveraddress(const char* value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.ServerAddress)
}
 void DB_CONFIG::set_serveraddress(const char* value, size_t size) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.ServerAddress)
}
 ::std::string* DB_CONFIG::mutable_serveraddress() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.ServerAddress)
  return serveraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CONFIG::release_serveraddress() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.ServerAddress)
  
  return serveraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_allocated_serveraddress(::std::string* serveraddress) {
  if (serveraddress != NULL) {
    
  } else {
    
  }
  serveraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serveraddress);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.ServerAddress)
}

// optional int32 ServerPort = 2;
void DB_CONFIG::clear_serverport() {
  serverport_ = 0;
}
 ::google::protobuf::int32 DB_CONFIG::serverport() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.ServerPort)
  return serverport_;
}
 void DB_CONFIG::set_serverport(::google::protobuf::int32 value) {
  
  serverport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.ServerPort)
}

// optional string User = 3;
void DB_CONFIG::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DB_CONFIG::user() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.User)
}
 void DB_CONFIG::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.User)
}
 void DB_CONFIG::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.User)
}
 ::std::string* DB_CONFIG::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CONFIG::release_user() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.User)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.User)
}

// optional string Passwd = 4;
void DB_CONFIG::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DB_CONFIG::passwd() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.Passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.Passwd)
}
 void DB_CONFIG::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.Passwd)
}
 void DB_CONFIG::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.Passwd)
}
 ::std::string* DB_CONFIG::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CONFIG::release_passwd() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.Passwd)
}

// optional string Database = 5;
void DB_CONFIG::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DB_CONFIG::database() const {
  // @@protoc_insertion_point(field_get:Protocol.DB_CONFIG.Database)
  return database_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.DB_CONFIG.Database)
}
 void DB_CONFIG::set_database(const char* value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DB_CONFIG.Database)
}
 void DB_CONFIG::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DB_CONFIG.Database)
}
 ::std::string* DB_CONFIG::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.DB_CONFIG.Database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CONFIG::release_database() {
  // @@protoc_insertion_point(field_release:Protocol.DB_CONFIG.Database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CONFIG::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DB_CONFIG.Database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DATA_CONFIG::kDataReceivePortFieldNumber;
const int DATA_CONFIG::kDataRecvTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DATA_CONFIG::DATA_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.DATA_CONFIG)
}

void DATA_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DATA_CONFIG::DATA_CONFIG(const DATA_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.DATA_CONFIG)
}

void DATA_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  datareceiveport_ = 0;
  datarecvtime_ = 0;
}

DATA_CONFIG::~DATA_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.DATA_CONFIG)
  SharedDtor();
}

void DATA_CONFIG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DATA_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DATA_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATA_CONFIG_descriptor_;
}

const DATA_CONFIG& DATA_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

DATA_CONFIG* DATA_CONFIG::default_instance_ = NULL;

DATA_CONFIG* DATA_CONFIG::New(::google::protobuf::Arena* arena) const {
  DATA_CONFIG* n = new DATA_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DATA_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.DATA_CONFIG)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DATA_CONFIG, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DATA_CONFIG*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(datareceiveport_, datarecvtime_);

#undef ZR_HELPER_
#undef ZR_

}

bool DATA_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.DATA_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DataReceivePort = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datareceiveport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DataRecvTime;
        break;
      }

      // optional int32 DataRecvTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DataRecvTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datarecvtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.DATA_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.DATA_CONFIG)
  return false;
#undef DO_
}

void DATA_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.DATA_CONFIG)
  // optional int32 DataReceivePort = 1;
  if (this->datareceiveport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datareceiveport(), output);
  }

  // optional int32 DataRecvTime = 2;
  if (this->datarecvtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datarecvtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.DATA_CONFIG)
}

::google::protobuf::uint8* DATA_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.DATA_CONFIG)
  // optional int32 DataReceivePort = 1;
  if (this->datareceiveport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datareceiveport(), target);
  }

  // optional int32 DataRecvTime = 2;
  if (this->datarecvtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datarecvtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.DATA_CONFIG)
  return target;
}

int DATA_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.DATA_CONFIG)
  int total_size = 0;

  // optional int32 DataReceivePort = 1;
  if (this->datareceiveport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datareceiveport());
  }

  // optional int32 DataRecvTime = 2;
  if (this->datarecvtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datarecvtime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DATA_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.DATA_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DATA_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DATA_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.DATA_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.DATA_CONFIG)
    MergeFrom(*source);
  }
}

void DATA_CONFIG::MergeFrom(const DATA_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.DATA_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.datareceiveport() != 0) {
    set_datareceiveport(from.datareceiveport());
  }
  if (from.datarecvtime() != 0) {
    set_datarecvtime(from.datarecvtime());
  }
}

void DATA_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.DATA_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATA_CONFIG::CopyFrom(const DATA_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.DATA_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATA_CONFIG::IsInitialized() const {

  return true;
}

void DATA_CONFIG::Swap(DATA_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DATA_CONFIG::InternalSwap(DATA_CONFIG* other) {
  std::swap(datareceiveport_, other->datareceiveport_);
  std::swap(datarecvtime_, other->datarecvtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DATA_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DATA_CONFIG_descriptor_;
  metadata.reflection = DATA_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DATA_CONFIG

// optional int32 DataReceivePort = 1;
void DATA_CONFIG::clear_datareceiveport() {
  datareceiveport_ = 0;
}
 ::google::protobuf::int32 DATA_CONFIG::datareceiveport() const {
  // @@protoc_insertion_point(field_get:Protocol.DATA_CONFIG.DataReceivePort)
  return datareceiveport_;
}
 void DATA_CONFIG::set_datareceiveport(::google::protobuf::int32 value) {
  
  datareceiveport_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DATA_CONFIG.DataReceivePort)
}

// optional int32 DataRecvTime = 2;
void DATA_CONFIG::clear_datarecvtime() {
  datarecvtime_ = 0;
}
 ::google::protobuf::int32 DATA_CONFIG::datarecvtime() const {
  // @@protoc_insertion_point(field_get:Protocol.DATA_CONFIG.DataRecvTime)
  return datarecvtime_;
}
 void DATA_CONFIG::set_datarecvtime(::google::protobuf::int32 value) {
  
  datarecvtime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.DATA_CONFIG.DataRecvTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GATEWAY_CONFIG::kClientCheckTimeFieldNumber;
const int GATEWAY_CONFIG::kClientCheckKeyFieldNumber;
const int GATEWAY_CONFIG::kTimeoutCheckIntervalFieldNumber;
const int GATEWAY_CONFIG::kTimeoutTimeFieldNumber;
const int GATEWAY_CONFIG::kProcessAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GATEWAY_CONFIG::GATEWAY_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.GATEWAY_CONFIG)
}

void GATEWAY_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GATEWAY_CONFIG::GATEWAY_CONFIG(const GATEWAY_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.GATEWAY_CONFIG)
}

void GATEWAY_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientchecktime_ = 0;
  clientcheckkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeoutcheckinterval_ = 0;
  timeouttime_ = 0;
  processaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GATEWAY_CONFIG::~GATEWAY_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.GATEWAY_CONFIG)
  SharedDtor();
}

void GATEWAY_CONFIG::SharedDtor() {
  clientcheckkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GATEWAY_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GATEWAY_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GATEWAY_CONFIG_descriptor_;
}

const GATEWAY_CONFIG& GATEWAY_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

GATEWAY_CONFIG* GATEWAY_CONFIG::default_instance_ = NULL;

GATEWAY_CONFIG* GATEWAY_CONFIG::New(::google::protobuf::Arena* arena) const {
  GATEWAY_CONFIG* n = new GATEWAY_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GATEWAY_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GATEWAY_CONFIG)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GATEWAY_CONFIG, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GATEWAY_CONFIG*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(clientchecktime_, timeoutcheckinterval_);
  clientcheckkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeouttime_ = 0;
  processaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GATEWAY_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.GATEWAY_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ClientCheckTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientchecktime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ClientCheckKey;
        break;
      }

      // optional string ClientCheckKey = 2;
      case 2: {
        if (tag == 18) {
         parse_ClientCheckKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientcheckkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientcheckkey().data(), this->clientcheckkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GATEWAY_CONFIG.ClientCheckKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TimeoutCheckInterval;
        break;
      }

      // optional int32 TimeoutCheckInterval = 3;
      case 3: {
        if (tag == 24) {
         parse_TimeoutCheckInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeoutcheckinterval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TimeoutTime;
        break;
      }

      // optional int32 TimeoutTime = 4;
      case 4: {
        if (tag == 32) {
         parse_TimeoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeouttime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ProcessAddress;
        break;
      }

      // optional string ProcessAddress = 5;
      case 5: {
        if (tag == 42) {
         parse_ProcessAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processaddress().data(), this->processaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.GATEWAY_CONFIG.ProcessAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.GATEWAY_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.GATEWAY_CONFIG)
  return false;
#undef DO_
}

void GATEWAY_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.GATEWAY_CONFIG)
  // optional int32 ClientCheckTime = 1;
  if (this->clientchecktime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientchecktime(), output);
  }

  // optional string ClientCheckKey = 2;
  if (this->clientcheckkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientcheckkey().data(), this->clientcheckkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GATEWAY_CONFIG.ClientCheckKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientcheckkey(), output);
  }

  // optional int32 TimeoutCheckInterval = 3;
  if (this->timeoutcheckinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeoutcheckinterval(), output);
  }

  // optional int32 TimeoutTime = 4;
  if (this->timeouttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeouttime(), output);
  }

  // optional string ProcessAddress = 5;
  if (this->processaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processaddress().data(), this->processaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GATEWAY_CONFIG.ProcessAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->processaddress(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.GATEWAY_CONFIG)
}

::google::protobuf::uint8* GATEWAY_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GATEWAY_CONFIG)
  // optional int32 ClientCheckTime = 1;
  if (this->clientchecktime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientchecktime(), target);
  }

  // optional string ClientCheckKey = 2;
  if (this->clientcheckkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientcheckkey().data(), this->clientcheckkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GATEWAY_CONFIG.ClientCheckKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientcheckkey(), target);
  }

  // optional int32 TimeoutCheckInterval = 3;
  if (this->timeoutcheckinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeoutcheckinterval(), target);
  }

  // optional int32 TimeoutTime = 4;
  if (this->timeouttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeouttime(), target);
  }

  // optional string ProcessAddress = 5;
  if (this->processaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processaddress().data(), this->processaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.GATEWAY_CONFIG.ProcessAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->processaddress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GATEWAY_CONFIG)
  return target;
}

int GATEWAY_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GATEWAY_CONFIG)
  int total_size = 0;

  // optional int32 ClientCheckTime = 1;
  if (this->clientchecktime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientchecktime());
  }

  // optional string ClientCheckKey = 2;
  if (this->clientcheckkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientcheckkey());
  }

  // optional int32 TimeoutCheckInterval = 3;
  if (this->timeoutcheckinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeoutcheckinterval());
  }

  // optional int32 TimeoutTime = 4;
  if (this->timeouttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeouttime());
  }

  // optional string ProcessAddress = 5;
  if (this->processaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processaddress());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GATEWAY_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GATEWAY_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GATEWAY_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GATEWAY_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GATEWAY_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GATEWAY_CONFIG)
    MergeFrom(*source);
  }
}

void GATEWAY_CONFIG::MergeFrom(const GATEWAY_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GATEWAY_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.clientchecktime() != 0) {
    set_clientchecktime(from.clientchecktime());
  }
  if (from.clientcheckkey().size() > 0) {

    clientcheckkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientcheckkey_);
  }
  if (from.timeoutcheckinterval() != 0) {
    set_timeoutcheckinterval(from.timeoutcheckinterval());
  }
  if (from.timeouttime() != 0) {
    set_timeouttime(from.timeouttime());
  }
  if (from.processaddress().size() > 0) {

    processaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processaddress_);
  }
}

void GATEWAY_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GATEWAY_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GATEWAY_CONFIG::CopyFrom(const GATEWAY_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GATEWAY_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GATEWAY_CONFIG::IsInitialized() const {

  return true;
}

void GATEWAY_CONFIG::Swap(GATEWAY_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GATEWAY_CONFIG::InternalSwap(GATEWAY_CONFIG* other) {
  std::swap(clientchecktime_, other->clientchecktime_);
  clientcheckkey_.Swap(&other->clientcheckkey_);
  std::swap(timeoutcheckinterval_, other->timeoutcheckinterval_);
  std::swap(timeouttime_, other->timeouttime_);
  processaddress_.Swap(&other->processaddress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GATEWAY_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GATEWAY_CONFIG_descriptor_;
  metadata.reflection = GATEWAY_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GATEWAY_CONFIG

// optional int32 ClientCheckTime = 1;
void GATEWAY_CONFIG::clear_clientchecktime() {
  clientchecktime_ = 0;
}
 ::google::protobuf::int32 GATEWAY_CONFIG::clientchecktime() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ClientCheckTime)
  return clientchecktime_;
}
 void GATEWAY_CONFIG::set_clientchecktime(::google::protobuf::int32 value) {
  
  clientchecktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ClientCheckTime)
}

// optional string ClientCheckKey = 2;
void GATEWAY_CONFIG::clear_clientcheckkey() {
  clientcheckkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GATEWAY_CONFIG::clientcheckkey() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  return clientcheckkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATEWAY_CONFIG::set_clientcheckkey(const ::std::string& value) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
 void GATEWAY_CONFIG::set_clientcheckkey(const char* value) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
 void GATEWAY_CONFIG::set_clientcheckkey(const char* value, size_t size) {
  
  clientcheckkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}
 ::std::string* GATEWAY_CONFIG::mutable_clientcheckkey() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  return clientcheckkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GATEWAY_CONFIG::release_clientcheckkey() {
  // @@protoc_insertion_point(field_release:Protocol.GATEWAY_CONFIG.ClientCheckKey)
  
  return clientcheckkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATEWAY_CONFIG::set_allocated_clientcheckkey(::std::string* clientcheckkey) {
  if (clientcheckkey != NULL) {
    
  } else {
    
  }
  clientcheckkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientcheckkey);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GATEWAY_CONFIG.ClientCheckKey)
}

// optional int32 TimeoutCheckInterval = 3;
void GATEWAY_CONFIG::clear_timeoutcheckinterval() {
  timeoutcheckinterval_ = 0;
}
 ::google::protobuf::int32 GATEWAY_CONFIG::timeoutcheckinterval() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.TimeoutCheckInterval)
  return timeoutcheckinterval_;
}
 void GATEWAY_CONFIG::set_timeoutcheckinterval(::google::protobuf::int32 value) {
  
  timeoutcheckinterval_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.TimeoutCheckInterval)
}

// optional int32 TimeoutTime = 4;
void GATEWAY_CONFIG::clear_timeouttime() {
  timeouttime_ = 0;
}
 ::google::protobuf::int32 GATEWAY_CONFIG::timeouttime() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.TimeoutTime)
  return timeouttime_;
}
 void GATEWAY_CONFIG::set_timeouttime(::google::protobuf::int32 value) {
  
  timeouttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.TimeoutTime)
}

// optional string ProcessAddress = 5;
void GATEWAY_CONFIG::clear_processaddress() {
  processaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GATEWAY_CONFIG::processaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.GATEWAY_CONFIG.ProcessAddress)
  return processaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATEWAY_CONFIG::set_processaddress(const ::std::string& value) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
 void GATEWAY_CONFIG::set_processaddress(const char* value) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
 void GATEWAY_CONFIG::set_processaddress(const char* value, size_t size) {
  
  processaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.GATEWAY_CONFIG.ProcessAddress)
}
 ::std::string* GATEWAY_CONFIG::mutable_processaddress() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.GATEWAY_CONFIG.ProcessAddress)
  return processaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GATEWAY_CONFIG::release_processaddress() {
  // @@protoc_insertion_point(field_release:Protocol.GATEWAY_CONFIG.ProcessAddress)
  
  return processaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATEWAY_CONFIG::set_allocated_processaddress(::std::string* processaddress) {
  if (processaddress != NULL) {
    
  } else {
    
  }
  processaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processaddress);
  // @@protoc_insertion_point(field_set_allocated:Protocol.GATEWAY_CONFIG.ProcessAddress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FIREWALL_CONFIG::kBlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FIREWALL_CONFIG::FIREWALL_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.FIREWALL_CONFIG)
}

void FIREWALL_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FIREWALL_CONFIG::FIREWALL_CONFIG(const FIREWALL_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.FIREWALL_CONFIG)
}

void FIREWALL_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  blocktime_ = 0;
}

FIREWALL_CONFIG::~FIREWALL_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.FIREWALL_CONFIG)
  SharedDtor();
}

void FIREWALL_CONFIG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FIREWALL_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FIREWALL_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIREWALL_CONFIG_descriptor_;
}

const FIREWALL_CONFIG& FIREWALL_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

FIREWALL_CONFIG* FIREWALL_CONFIG::default_instance_ = NULL;

FIREWALL_CONFIG* FIREWALL_CONFIG::New(::google::protobuf::Arena* arena) const {
  FIREWALL_CONFIG* n = new FIREWALL_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FIREWALL_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.FIREWALL_CONFIG)
  blocktime_ = 0;
}

bool FIREWALL_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.FIREWALL_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BlockTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocktime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.FIREWALL_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.FIREWALL_CONFIG)
  return false;
#undef DO_
}

void FIREWALL_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.FIREWALL_CONFIG)
  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blocktime(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.FIREWALL_CONFIG)
}

::google::protobuf::uint8* FIREWALL_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.FIREWALL_CONFIG)
  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blocktime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.FIREWALL_CONFIG)
  return target;
}

int FIREWALL_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.FIREWALL_CONFIG)
  int total_size = 0;

  // optional int32 BlockTime = 1;
  if (this->blocktime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blocktime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FIREWALL_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.FIREWALL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FIREWALL_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FIREWALL_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.FIREWALL_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.FIREWALL_CONFIG)
    MergeFrom(*source);
  }
}

void FIREWALL_CONFIG::MergeFrom(const FIREWALL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.FIREWALL_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.blocktime() != 0) {
    set_blocktime(from.blocktime());
  }
}

void FIREWALL_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.FIREWALL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FIREWALL_CONFIG::CopyFrom(const FIREWALL_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.FIREWALL_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FIREWALL_CONFIG::IsInitialized() const {

  return true;
}

void FIREWALL_CONFIG::Swap(FIREWALL_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FIREWALL_CONFIG::InternalSwap(FIREWALL_CONFIG* other) {
  std::swap(blocktime_, other->blocktime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FIREWALL_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FIREWALL_CONFIG_descriptor_;
  metadata.reflection = FIREWALL_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FIREWALL_CONFIG

// optional int32 BlockTime = 1;
void FIREWALL_CONFIG::clear_blocktime() {
  blocktime_ = 0;
}
 ::google::protobuf::int32 FIREWALL_CONFIG::blocktime() const {
  // @@protoc_insertion_point(field_get:Protocol.FIREWALL_CONFIG.BlockTime)
  return blocktime_;
}
 void FIREWALL_CONFIG::set_blocktime(::google::protobuf::int32 value) {
  
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.FIREWALL_CONFIG.BlockTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PROCESS_CONFIG::kLuaContextQuantityFieldNumber;
const int PROCESS_CONFIG::kLuaScriptFolderFieldNumber;
const int PROCESS_CONFIG::kLuaEntryFileFieldNumber;
const int PROCESS_CONFIG::kLuaEntryFunctionFieldNumber;
const int PROCESS_CONFIG::kLuaProcessFunctionFieldNumber;
const int PROCESS_CONFIG::kLuaSocketCloseFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PROCESS_CONFIG::PROCESS_CONFIG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.PROCESS_CONFIG)
}

void PROCESS_CONFIG::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PROCESS_CONFIG::PROCESS_CONFIG(const PROCESS_CONFIG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.PROCESS_CONFIG)
}

void PROCESS_CONFIG::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  luacontextquantity_ = 0;
  luascriptfolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfunction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaprocessfunction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luasocketclosefunction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PROCESS_CONFIG::~PROCESS_CONFIG() {
  // @@protoc_insertion_point(destructor:Protocol.PROCESS_CONFIG)
  SharedDtor();
}

void PROCESS_CONFIG::SharedDtor() {
  luascriptfolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfunction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaprocessfunction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luasocketclosefunction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PROCESS_CONFIG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PROCESS_CONFIG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROCESS_CONFIG_descriptor_;
}

const PROCESS_CONFIG& PROCESS_CONFIG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

PROCESS_CONFIG* PROCESS_CONFIG::default_instance_ = NULL;

PROCESS_CONFIG* PROCESS_CONFIG::New(::google::protobuf::Arena* arena) const {
  PROCESS_CONFIG* n = new PROCESS_CONFIG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PROCESS_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PROCESS_CONFIG)
  luacontextquantity_ = 0;
  luascriptfolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaentryfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luaprocessfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  luasocketclosefunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PROCESS_CONFIG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.PROCESS_CONFIG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LuaContextQuantity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luacontextquantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LuaScriptFolder;
        break;
      }

      // optional string LuaScriptFolder = 2;
      case 2: {
        if (tag == 18) {
         parse_LuaScriptFolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luascriptfolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->luascriptfolder().data(), this->luascriptfolder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.PROCESS_CONFIG.LuaScriptFolder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LuaEntryFile;
        break;
      }

      // optional string LuaEntryFile = 3;
      case 3: {
        if (tag == 26) {
         parse_LuaEntryFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luaentryfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->luaentryfile().data(), this->luaentryfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.PROCESS_CONFIG.LuaEntryFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_LuaEntryFunction;
        break;
      }

      // optional string LuaEntryFunction = 4;
      case 4: {
        if (tag == 34) {
         parse_LuaEntryFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luaentryfunction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->luaentryfunction().data(), this->luaentryfunction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.PROCESS_CONFIG.LuaEntryFunction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_LuaProcessFunction;
        break;
      }

      // optional string LuaProcessFunction = 5;
      case 5: {
        if (tag == 42) {
         parse_LuaProcessFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luaprocessfunction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->luaprocessfunction().data(), this->luaprocessfunction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.PROCESS_CONFIG.LuaProcessFunction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_LuaSocketCloseFunction;
        break;
      }

      // optional string LuaSocketCloseFunction = 6;
      case 6: {
        if (tag == 50) {
         parse_LuaSocketCloseFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luasocketclosefunction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->luasocketclosefunction().data(), this->luasocketclosefunction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protocol.PROCESS_CONFIG.LuaSocketCloseFunction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.PROCESS_CONFIG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.PROCESS_CONFIG)
  return false;
#undef DO_
}

void PROCESS_CONFIG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.PROCESS_CONFIG)
  // optional int32 LuaContextQuantity = 1;
  if (this->luacontextquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->luacontextquantity(), output);
  }

  // optional string LuaScriptFolder = 2;
  if (this->luascriptfolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luascriptfolder().data(), this->luascriptfolder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaScriptFolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->luascriptfolder(), output);
  }

  // optional string LuaEntryFile = 3;
  if (this->luaentryfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaentryfile().data(), this->luaentryfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaEntryFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->luaentryfile(), output);
  }

  // optional string LuaEntryFunction = 4;
  if (this->luaentryfunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaentryfunction().data(), this->luaentryfunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaEntryFunction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->luaentryfunction(), output);
  }

  // optional string LuaProcessFunction = 5;
  if (this->luaprocessfunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaprocessfunction().data(), this->luaprocessfunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaProcessFunction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->luaprocessfunction(), output);
  }

  // optional string LuaSocketCloseFunction = 6;
  if (this->luasocketclosefunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luasocketclosefunction().data(), this->luasocketclosefunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaSocketCloseFunction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->luasocketclosefunction(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protocol.PROCESS_CONFIG)
}

::google::protobuf::uint8* PROCESS_CONFIG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PROCESS_CONFIG)
  // optional int32 LuaContextQuantity = 1;
  if (this->luacontextquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->luacontextquantity(), target);
  }

  // optional string LuaScriptFolder = 2;
  if (this->luascriptfolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luascriptfolder().data(), this->luascriptfolder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaScriptFolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->luascriptfolder(), target);
  }

  // optional string LuaEntryFile = 3;
  if (this->luaentryfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaentryfile().data(), this->luaentryfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaEntryFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->luaentryfile(), target);
  }

  // optional string LuaEntryFunction = 4;
  if (this->luaentryfunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaentryfunction().data(), this->luaentryfunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaEntryFunction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->luaentryfunction(), target);
  }

  // optional string LuaProcessFunction = 5;
  if (this->luaprocessfunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luaprocessfunction().data(), this->luaprocessfunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaProcessFunction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->luaprocessfunction(), target);
  }

  // optional string LuaSocketCloseFunction = 6;
  if (this->luasocketclosefunction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->luasocketclosefunction().data(), this->luasocketclosefunction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protocol.PROCESS_CONFIG.LuaSocketCloseFunction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->luasocketclosefunction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PROCESS_CONFIG)
  return target;
}

int PROCESS_CONFIG::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PROCESS_CONFIG)
  int total_size = 0;

  // optional int32 LuaContextQuantity = 1;
  if (this->luacontextquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->luacontextquantity());
  }

  // optional string LuaScriptFolder = 2;
  if (this->luascriptfolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->luascriptfolder());
  }

  // optional string LuaEntryFile = 3;
  if (this->luaentryfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->luaentryfile());
  }

  // optional string LuaEntryFunction = 4;
  if (this->luaentryfunction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->luaentryfunction());
  }

  // optional string LuaProcessFunction = 5;
  if (this->luaprocessfunction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->luaprocessfunction());
  }

  // optional string LuaSocketCloseFunction = 6;
  if (this->luasocketclosefunction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->luasocketclosefunction());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROCESS_CONFIG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.PROCESS_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PROCESS_CONFIG* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PROCESS_CONFIG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.PROCESS_CONFIG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.PROCESS_CONFIG)
    MergeFrom(*source);
  }
}

void PROCESS_CONFIG::MergeFrom(const PROCESS_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PROCESS_CONFIG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.luacontextquantity() != 0) {
    set_luacontextquantity(from.luacontextquantity());
  }
  if (from.luascriptfolder().size() > 0) {

    luascriptfolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.luascriptfolder_);
  }
  if (from.luaentryfile().size() > 0) {

    luaentryfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.luaentryfile_);
  }
  if (from.luaentryfunction().size() > 0) {

    luaentryfunction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.luaentryfunction_);
  }
  if (from.luaprocessfunction().size() > 0) {

    luaprocessfunction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.luaprocessfunction_);
  }
  if (from.luasocketclosefunction().size() > 0) {

    luasocketclosefunction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.luasocketclosefunction_);
  }
}

void PROCESS_CONFIG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.PROCESS_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROCESS_CONFIG::CopyFrom(const PROCESS_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PROCESS_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROCESS_CONFIG::IsInitialized() const {

  return true;
}

void PROCESS_CONFIG::Swap(PROCESS_CONFIG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PROCESS_CONFIG::InternalSwap(PROCESS_CONFIG* other) {
  std::swap(luacontextquantity_, other->luacontextquantity_);
  luascriptfolder_.Swap(&other->luascriptfolder_);
  luaentryfile_.Swap(&other->luaentryfile_);
  luaentryfunction_.Swap(&other->luaentryfunction_);
  luaprocessfunction_.Swap(&other->luaprocessfunction_);
  luasocketclosefunction_.Swap(&other->luasocketclosefunction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PROCESS_CONFIG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PROCESS_CONFIG_descriptor_;
  metadata.reflection = PROCESS_CONFIG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PROCESS_CONFIG

// optional int32 LuaContextQuantity = 1;
void PROCESS_CONFIG::clear_luacontextquantity() {
  luacontextquantity_ = 0;
}
 ::google::protobuf::int32 PROCESS_CONFIG::luacontextquantity() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaContextQuantity)
  return luacontextquantity_;
}
 void PROCESS_CONFIG::set_luacontextquantity(::google::protobuf::int32 value) {
  
  luacontextquantity_ = value;
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaContextQuantity)
}

// optional string LuaScriptFolder = 2;
void PROCESS_CONFIG::clear_luascriptfolder() {
  luascriptfolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PROCESS_CONFIG::luascriptfolder() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_luascriptfolder(const ::std::string& value) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
 void PROCESS_CONFIG::set_luascriptfolder(const char* value) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
 void PROCESS_CONFIG::set_luascriptfolder(const char* value, size_t size) {
  
  luascriptfolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}
 ::std::string* PROCESS_CONFIG::mutable_luascriptfolder() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  return luascriptfolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PROCESS_CONFIG::release_luascriptfolder() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaScriptFolder)
  
  return luascriptfolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_allocated_luascriptfolder(::std::string* luascriptfolder) {
  if (luascriptfolder != NULL) {
    
  } else {
    
  }
  luascriptfolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luascriptfolder);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaScriptFolder)
}

// optional string LuaEntryFile = 3;
void PROCESS_CONFIG::clear_luaentryfile() {
  luaentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PROCESS_CONFIG::luaentryfile() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_luaentryfile(const ::std::string& value) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
 void PROCESS_CONFIG::set_luaentryfile(const char* value) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
 void PROCESS_CONFIG::set_luaentryfile(const char* value, size_t size) {
  
  luaentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaEntryFile)
}
 ::std::string* PROCESS_CONFIG::mutable_luaentryfile() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaEntryFile)
  return luaentryfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PROCESS_CONFIG::release_luaentryfile() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaEntryFile)
  
  return luaentryfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_allocated_luaentryfile(::std::string* luaentryfile) {
  if (luaentryfile != NULL) {
    
  } else {
    
  }
  luaentryfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfile);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaEntryFile)
}

// optional string LuaEntryFunction = 4;
void PROCESS_CONFIG::clear_luaentryfunction() {
  luaentryfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PROCESS_CONFIG::luaentryfunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_luaentryfunction(const ::std::string& value) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
 void PROCESS_CONFIG::set_luaentryfunction(const char* value) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
 void PROCESS_CONFIG::set_luaentryfunction(const char* value, size_t size) {
  
  luaentryfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}
 ::std::string* PROCESS_CONFIG::mutable_luaentryfunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  return luaentryfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PROCESS_CONFIG::release_luaentryfunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaEntryFunction)
  
  return luaentryfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_allocated_luaentryfunction(::std::string* luaentryfunction) {
  if (luaentryfunction != NULL) {
    
  } else {
    
  }
  luaentryfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaentryfunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaEntryFunction)
}

// optional string LuaProcessFunction = 5;
void PROCESS_CONFIG::clear_luaprocessfunction() {
  luaprocessfunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PROCESS_CONFIG::luaprocessfunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_luaprocessfunction(const ::std::string& value) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
 void PROCESS_CONFIG::set_luaprocessfunction(const char* value) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
 void PROCESS_CONFIG::set_luaprocessfunction(const char* value, size_t size) {
  
  luaprocessfunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}
 ::std::string* PROCESS_CONFIG::mutable_luaprocessfunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  return luaprocessfunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PROCESS_CONFIG::release_luaprocessfunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaProcessFunction)
  
  return luaprocessfunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_allocated_luaprocessfunction(::std::string* luaprocessfunction) {
  if (luaprocessfunction != NULL) {
    
  } else {
    
  }
  luaprocessfunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luaprocessfunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaProcessFunction)
}

// optional string LuaSocketCloseFunction = 6;
void PROCESS_CONFIG::clear_luasocketclosefunction() {
  luasocketclosefunction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PROCESS_CONFIG::luasocketclosefunction() const {
  // @@protoc_insertion_point(field_get:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_luasocketclosefunction(const ::std::string& value) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
 void PROCESS_CONFIG::set_luasocketclosefunction(const char* value) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
 void PROCESS_CONFIG::set_luasocketclosefunction(const char* value, size_t size) {
  
  luasocketclosefunction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}
 ::std::string* PROCESS_CONFIG::mutable_luasocketclosefunction() {
  
  // @@protoc_insertion_point(field_mutable:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  return luasocketclosefunction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PROCESS_CONFIG::release_luasocketclosefunction() {
  // @@protoc_insertion_point(field_release:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
  
  return luasocketclosefunction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PROCESS_CONFIG::set_allocated_luasocketclosefunction(::std::string* luasocketclosefunction) {
  if (luasocketclosefunction != NULL) {
    
  } else {
    
  }
  luasocketclosefunction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), luasocketclosefunction);
  // @@protoc_insertion_point(field_set_allocated:Protocol.PROCESS_CONFIG.LuaSocketCloseFunction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
