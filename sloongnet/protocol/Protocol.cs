// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIIUHJvdG9jb2wizQEKC0RhdGFQYWNrYWdlEiUK",
            "CEZ1bmN0aW9uGAEgASgOMhMuUHJvdG9jb2wuRnVuY3Rpb25zEhUKDVByaW9y",
            "aXR5TGV2ZWwYAiABKAUSFAoMU2VyaWFsTnVtYmVyGAMgASgDEhMKC0NoZWNr",
            "U3RyaW5nGAQgASgJEg4KBlNlbmRlchgFIAEoCRIkCgZSZXN1bHQYByABKA4y",
            "FC5Qcm90b2NvbC5SZXN1bHRUeXBlEg8KB0NvbnRlbnQYCCABKAkSDgoGRXh0",
            "ZW5kGAkgASgMIqwDCg1HTE9CQUxfQ09ORklHEhIKCkxpc3RlblBvcnQYASAB",
            "KAUSEQoJRW5hYmxlU1NMGAIgASgIEhQKDENlcnRGaWxlUGF0aBgDIAEoCRIT",
            "CgtLZXlGaWxlUGF0aBgEIAEoCRISCgpDZXJ0UGFzc3dkGAUgASgJEhMKC0Nv",
            "bm5lY3RUaW1lGAYgASgFEhMKC1JlY2VpdmVUaW1lGAcgASgFEg8KB0xvZ1Bh",
            "dGgYCCABKAkSJAoITG9nTGV2ZWwYCSABKA4yEi5Qcm90b2NvbC5Mb2dMZXZl",
            "bBIRCglEZWJ1Z01vZGUYCiABKAgSGAoQTVFUaHJlYWRRdWFudGl0eRgLIAEo",
            "BRIbChNFUG9sbFRocmVhZFF1YW50aXR5GAwgASgFEh0KFVByb2Nlc3NUaHJl",
            "YWRRdWFudGl0eRgNIAEoBRIUCgxQcmlvcml0eVNpemUYDiABKAUSEgoKTW9k",
            "dWxlTmFtZRgQIAEoCRISCgpNb2R1bGVQYXRoGBEgASgJEhQKDE1vZHVsZUNv",
            "bmZpZxgSIAEoDBIXCg9Nb2R1bGVSZWZlcmVuY2UYEyABKAkqSQoKUmVzdWx0",
            "VHlwZRILCgdTdWNjZWVkEAASCQoFRXJyb3IQARILCgdXYXJuaW5nEAISCQoF",
            "UmV0cnkQAxILCgdJbnZhbGlkEAQqXgoITG9nTGV2ZWwSBwoDQWxsEAASCgoG",
            "VmVyYm9zEAESCQoFRGVidWcQAhIICgRJbmZvEAMSCAoEV2FybhAEEgcKA0Vy",
            "chAFEgoKBkFzc2VydBAGEgkKBUZhdGFsEAcqMAoJRnVuY3Rpb25zEhIKDlBy",
            "b2Nlc3NNZXNzYWdlEAASDwoLUmVzdGFydE5vZGUQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.ResultType), typeof(global::Protocol.LogLevel), typeof(global::Protocol.Functions), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DataPackage), global::Protocol.DataPackage.Parser, new[]{ "Function", "PriorityLevel", "SerialNumber", "CheckString", "Sender", "Result", "Content", "Extend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GLOBAL_CONFIG), global::Protocol.GLOBAL_CONFIG.Parser, new[]{ "ListenPort", "EnableSSL", "CertFilePath", "KeyFilePath", "CertPasswd", "ConnectTime", "ReceiveTime", "LogPath", "LogLevel", "DebugMode", "MQThreadQuantity", "EPollThreadQuantity", "ProcessThreadQuantity", "PrioritySize", "ModuleName", "ModulePath", "ModuleConfig", "ModuleReference" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Result
  /// </summary>
  public enum ResultType {
    [pbr::OriginalName("Succeed")] Succeed = 0,
    [pbr::OriginalName("Error")] Error = 1,
    [pbr::OriginalName("Warning")] Warning = 2,
    [pbr::OriginalName("Retry")] Retry = 3,
    [pbr::OriginalName("Invalid")] Invalid = 4,
  }

  /// <summary>
  /// LogLevel
  /// </summary>
  public enum LogLevel {
    [pbr::OriginalName("All")] All = 0,
    [pbr::OriginalName("Verbos")] Verbos = 1,
    [pbr::OriginalName("Debug")] Debug = 2,
    [pbr::OriginalName("Info")] Info = 3,
    [pbr::OriginalName("Warn")] Warn = 4,
    [pbr::OriginalName("Err")] Err = 5,
    [pbr::OriginalName("Assert")] Assert = 6,
    [pbr::OriginalName("Fatal")] Fatal = 7,
  }

  public enum Functions {
    [pbr::OriginalName("ProcessMessage")] ProcessMessage = 0,
    [pbr::OriginalName("RestartNode")] RestartNode = 2,
  }

  #endregion

  #region Messages
  public sealed partial class DataPackage : pb::IMessage<DataPackage> {
    private static readonly pb::MessageParser<DataPackage> _parser = new pb::MessageParser<DataPackage>(() => new DataPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage(DataPackage other) : this() {
      function_ = other.function_;
      priorityLevel_ = other.priorityLevel_;
      serialNumber_ = other.serialNumber_;
      checkString_ = other.checkString_;
      sender_ = other.sender_;
      result_ = other.result_;
      content_ = other.content_;
      extend_ = other.extend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage Clone() {
      return new DataPackage(this);
    }

    /// <summary>Field number for the "Function" field.</summary>
    public const int FunctionFieldNumber = 1;
    private global::Protocol.Functions function_ = 0;
    /// <summary>
    /// 功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Functions Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "PriorityLevel" field.</summary>
    public const int PriorityLevelFieldNumber = 2;
    private int priorityLevel_;
    /// <summary>
    /// 优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriorityLevel {
      get { return priorityLevel_; }
      set {
        priorityLevel_ = value;
      }
    }

    /// <summary>Field number for the "SerialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 3;
    private long serialNumber_;
    /// <summary>
    /// 流水号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    /// <summary>Field number for the "CheckString" field.</summary>
    public const int CheckStringFieldNumber = 4;
    private string checkString_ = "";
    /// <summary>
    /// 校验串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CheckString {
      get { return checkString_; }
      set {
        checkString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private string sender_ = "";
    /// <summary>
    /// 发送者的唯一标识符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 7;
    private global::Protocol.ResultType result_ = 0;
    /// <summary>
    /// 结果代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ResultType Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 8;
    private string content_ = "";
    /// <summary>
    /// 消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Extend" field.</summary>
    public const int ExtendFieldNumber = 9;
    private pb::ByteString extend_ = pb::ByteString.Empty;
    /// <summary>
    /// 扩展数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extend {
      get { return extend_; }
      set {
        extend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Function != other.Function) return false;
      if (PriorityLevel != other.PriorityLevel) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if (CheckString != other.CheckString) return false;
      if (Sender != other.Sender) return false;
      if (Result != other.Result) return false;
      if (Content != other.Content) return false;
      if (Extend != other.Extend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Function != 0) hash ^= Function.GetHashCode();
      if (PriorityLevel != 0) hash ^= PriorityLevel.GetHashCode();
      if (SerialNumber != 0L) hash ^= SerialNumber.GetHashCode();
      if (CheckString.Length != 0) hash ^= CheckString.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Extend.Length != 0) hash ^= Extend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Function != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Function);
      }
      if (PriorityLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PriorityLevel);
      }
      if (SerialNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SerialNumber);
      }
      if (CheckString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CheckString);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sender);
      }
      if (Result != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Result);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Content);
      }
      if (Extend.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Extend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Function);
      }
      if (PriorityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriorityLevel);
      }
      if (SerialNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SerialNumber);
      }
      if (CheckString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheckString);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Extend.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPackage other) {
      if (other == null) {
        return;
      }
      if (other.Function != 0) {
        Function = other.Function;
      }
      if (other.PriorityLevel != 0) {
        PriorityLevel = other.PriorityLevel;
      }
      if (other.SerialNumber != 0L) {
        SerialNumber = other.SerialNumber;
      }
      if (other.CheckString.Length != 0) {
        CheckString = other.CheckString;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Extend.Length != 0) {
        Extend = other.Extend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            function_ = (global::Protocol.Functions) input.ReadEnum();
            break;
          }
          case 16: {
            PriorityLevel = input.ReadInt32();
            break;
          }
          case 24: {
            SerialNumber = input.ReadInt64();
            break;
          }
          case 34: {
            CheckString = input.ReadString();
            break;
          }
          case 42: {
            Sender = input.ReadString();
            break;
          }
          case 56: {
            result_ = (global::Protocol.ResultType) input.ReadEnum();
            break;
          }
          case 66: {
            Content = input.ReadString();
            break;
          }
          case 74: {
            Extend = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GLOBAL_CONFIG : pb::IMessage<GLOBAL_CONFIG> {
    private static readonly pb::MessageParser<GLOBAL_CONFIG> _parser = new pb::MessageParser<GLOBAL_CONFIG>(() => new GLOBAL_CONFIG());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GLOBAL_CONFIG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG(GLOBAL_CONFIG other) : this() {
      listenPort_ = other.listenPort_;
      enableSSL_ = other.enableSSL_;
      certFilePath_ = other.certFilePath_;
      keyFilePath_ = other.keyFilePath_;
      certPasswd_ = other.certPasswd_;
      connectTime_ = other.connectTime_;
      receiveTime_ = other.receiveTime_;
      logPath_ = other.logPath_;
      logLevel_ = other.logLevel_;
      debugMode_ = other.debugMode_;
      mQThreadQuantity_ = other.mQThreadQuantity_;
      ePollThreadQuantity_ = other.ePollThreadQuantity_;
      processThreadQuantity_ = other.processThreadQuantity_;
      prioritySize_ = other.prioritySize_;
      moduleName_ = other.moduleName_;
      modulePath_ = other.modulePath_;
      moduleConfig_ = other.moduleConfig_;
      moduleReference_ = other.moduleReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GLOBAL_CONFIG Clone() {
      return new GLOBAL_CONFIG(this);
    }

    /// <summary>Field number for the "ListenPort" field.</summary>
    public const int ListenPortFieldNumber = 1;
    private int listenPort_;
    /// <summary>
    /// Network 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenPort {
      get { return listenPort_; }
      set {
        listenPort_ = value;
      }
    }

    /// <summary>Field number for the "EnableSSL" field.</summary>
    public const int EnableSSLFieldNumber = 2;
    private bool enableSSL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSSL {
      get { return enableSSL_; }
      set {
        enableSSL_ = value;
      }
    }

    /// <summary>Field number for the "CertFilePath" field.</summary>
    public const int CertFilePathFieldNumber = 3;
    private string certFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertFilePath {
      get { return certFilePath_; }
      set {
        certFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KeyFilePath" field.</summary>
    public const int KeyFilePathFieldNumber = 4;
    private string keyFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyFilePath {
      get { return keyFilePath_; }
      set {
        keyFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertPasswd" field.</summary>
    public const int CertPasswdFieldNumber = 5;
    private string certPasswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertPasswd {
      get { return certPasswd_; }
      set {
        certPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConnectTime" field.</summary>
    public const int ConnectTimeFieldNumber = 6;
    private int connectTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTime {
      get { return connectTime_; }
      set {
        connectTime_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 7;
    private int receiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = value;
      }
    }

    /// <summary>Field number for the "LogPath" field.</summary>
    public const int LogPathFieldNumber = 8;
    private string logPath_ = "";
    /// <summary>
    /// Log 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogPath {
      get { return logPath_; }
      set {
        logPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogLevel" field.</summary>
    public const int LogLevelFieldNumber = 9;
    private global::Protocol.LogLevel logLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "DebugMode" field.</summary>
    public const int DebugModeFieldNumber = 10;
    private bool debugMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugMode {
      get { return debugMode_; }
      set {
        debugMode_ = value;
      }
    }

    /// <summary>Field number for the "MQThreadQuantity" field.</summary>
    public const int MQThreadQuantityFieldNumber = 11;
    private int mQThreadQuantity_;
    /// <summary>
    /// Performance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MQThreadQuantity {
      get { return mQThreadQuantity_; }
      set {
        mQThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "EPollThreadQuantity" field.</summary>
    public const int EPollThreadQuantityFieldNumber = 12;
    private int ePollThreadQuantity_;
    /// <summary>
    /// EPoll event process thread quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EPollThreadQuantity {
      get { return ePollThreadQuantity_; }
      set {
        ePollThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "ProcessThreadQuantity" field.</summary>
    public const int ProcessThreadQuantityFieldNumber = 13;
    private int processThreadQuantity_;
    /// <summary>
    /// work thread for DataPackage process quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessThreadQuantity {
      get { return processThreadQuantity_; }
      set {
        processThreadQuantity_ = value;
      }
    }

    /// <summary>Field number for the "PrioritySize" field.</summary>
    public const int PrioritySizeFieldNumber = 14;
    private int prioritySize_;
    /// <summary>
    /// Priority Size for the list. the priority level cannot bigger than this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySize {
      get { return prioritySize_; }
      set {
        prioritySize_ = value;
      }
    }

    /// <summary>Field number for the "ModuleName" field.</summary>
    public const int ModuleNameFieldNumber = 16;
    private string moduleName_ = "";
    /// <summary>
    /// Module
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleName {
      get { return moduleName_; }
      set {
        moduleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModulePath" field.</summary>
    public const int ModulePathFieldNumber = 17;
    private string modulePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModulePath {
      get { return modulePath_; }
      set {
        modulePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModuleConfig" field.</summary>
    public const int ModuleConfigFieldNumber = 18;
    private pb::ByteString moduleConfig_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ModuleConfig {
      get { return moduleConfig_; }
      set {
        moduleConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModuleReference" field.</summary>
    public const int ModuleReferenceFieldNumber = 19;
    private string moduleReference_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleReference {
      get { return moduleReference_; }
      set {
        moduleReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GLOBAL_CONFIG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GLOBAL_CONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListenPort != other.ListenPort) return false;
      if (EnableSSL != other.EnableSSL) return false;
      if (CertFilePath != other.CertFilePath) return false;
      if (KeyFilePath != other.KeyFilePath) return false;
      if (CertPasswd != other.CertPasswd) return false;
      if (ConnectTime != other.ConnectTime) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      if (LogPath != other.LogPath) return false;
      if (LogLevel != other.LogLevel) return false;
      if (DebugMode != other.DebugMode) return false;
      if (MQThreadQuantity != other.MQThreadQuantity) return false;
      if (EPollThreadQuantity != other.EPollThreadQuantity) return false;
      if (ProcessThreadQuantity != other.ProcessThreadQuantity) return false;
      if (PrioritySize != other.PrioritySize) return false;
      if (ModuleName != other.ModuleName) return false;
      if (ModulePath != other.ModulePath) return false;
      if (ModuleConfig != other.ModuleConfig) return false;
      if (ModuleReference != other.ModuleReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListenPort != 0) hash ^= ListenPort.GetHashCode();
      if (EnableSSL != false) hash ^= EnableSSL.GetHashCode();
      if (CertFilePath.Length != 0) hash ^= CertFilePath.GetHashCode();
      if (KeyFilePath.Length != 0) hash ^= KeyFilePath.GetHashCode();
      if (CertPasswd.Length != 0) hash ^= CertPasswd.GetHashCode();
      if (ConnectTime != 0) hash ^= ConnectTime.GetHashCode();
      if (ReceiveTime != 0) hash ^= ReceiveTime.GetHashCode();
      if (LogPath.Length != 0) hash ^= LogPath.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (DebugMode != false) hash ^= DebugMode.GetHashCode();
      if (MQThreadQuantity != 0) hash ^= MQThreadQuantity.GetHashCode();
      if (EPollThreadQuantity != 0) hash ^= EPollThreadQuantity.GetHashCode();
      if (ProcessThreadQuantity != 0) hash ^= ProcessThreadQuantity.GetHashCode();
      if (PrioritySize != 0) hash ^= PrioritySize.GetHashCode();
      if (ModuleName.Length != 0) hash ^= ModuleName.GetHashCode();
      if (ModulePath.Length != 0) hash ^= ModulePath.GetHashCode();
      if (ModuleConfig.Length != 0) hash ^= ModuleConfig.GetHashCode();
      if (ModuleReference.Length != 0) hash ^= ModuleReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListenPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ListenPort);
      }
      if (EnableSSL != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableSSL);
      }
      if (CertFilePath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CertFilePath);
      }
      if (KeyFilePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyFilePath);
      }
      if (CertPasswd.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertPasswd);
      }
      if (ConnectTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ConnectTime);
      }
      if (ReceiveTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReceiveTime);
      }
      if (LogPath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LogPath);
      }
      if (LogLevel != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) LogLevel);
      }
      if (DebugMode != false) {
        output.WriteRawTag(80);
        output.WriteBool(DebugMode);
      }
      if (MQThreadQuantity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MQThreadQuantity);
      }
      if (EPollThreadQuantity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EPollThreadQuantity);
      }
      if (ProcessThreadQuantity != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ProcessThreadQuantity);
      }
      if (PrioritySize != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PrioritySize);
      }
      if (ModuleName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ModuleName);
      }
      if (ModulePath.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ModulePath);
      }
      if (ModuleConfig.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(ModuleConfig);
      }
      if (ModuleReference.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ModuleReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListenPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenPort);
      }
      if (EnableSSL != false) {
        size += 1 + 1;
      }
      if (CertFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertFilePath);
      }
      if (KeyFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyFilePath);
      }
      if (CertPasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertPasswd);
      }
      if (ConnectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectTime);
      }
      if (ReceiveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiveTime);
      }
      if (LogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogPath);
      }
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (DebugMode != false) {
        size += 1 + 1;
      }
      if (MQThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MQThreadQuantity);
      }
      if (EPollThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EPollThreadQuantity);
      }
      if (ProcessThreadQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessThreadQuantity);
      }
      if (PrioritySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySize);
      }
      if (ModuleName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModuleName);
      }
      if (ModulePath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModulePath);
      }
      if (ModuleConfig.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ModuleConfig);
      }
      if (ModuleReference.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModuleReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GLOBAL_CONFIG other) {
      if (other == null) {
        return;
      }
      if (other.ListenPort != 0) {
        ListenPort = other.ListenPort;
      }
      if (other.EnableSSL != false) {
        EnableSSL = other.EnableSSL;
      }
      if (other.CertFilePath.Length != 0) {
        CertFilePath = other.CertFilePath;
      }
      if (other.KeyFilePath.Length != 0) {
        KeyFilePath = other.KeyFilePath;
      }
      if (other.CertPasswd.Length != 0) {
        CertPasswd = other.CertPasswd;
      }
      if (other.ConnectTime != 0) {
        ConnectTime = other.ConnectTime;
      }
      if (other.ReceiveTime != 0) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.LogPath.Length != 0) {
        LogPath = other.LogPath;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.DebugMode != false) {
        DebugMode = other.DebugMode;
      }
      if (other.MQThreadQuantity != 0) {
        MQThreadQuantity = other.MQThreadQuantity;
      }
      if (other.EPollThreadQuantity != 0) {
        EPollThreadQuantity = other.EPollThreadQuantity;
      }
      if (other.ProcessThreadQuantity != 0) {
        ProcessThreadQuantity = other.ProcessThreadQuantity;
      }
      if (other.PrioritySize != 0) {
        PrioritySize = other.PrioritySize;
      }
      if (other.ModuleName.Length != 0) {
        ModuleName = other.ModuleName;
      }
      if (other.ModulePath.Length != 0) {
        ModulePath = other.ModulePath;
      }
      if (other.ModuleConfig.Length != 0) {
        ModuleConfig = other.ModuleConfig;
      }
      if (other.ModuleReference.Length != 0) {
        ModuleReference = other.ModuleReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ListenPort = input.ReadInt32();
            break;
          }
          case 16: {
            EnableSSL = input.ReadBool();
            break;
          }
          case 26: {
            CertFilePath = input.ReadString();
            break;
          }
          case 34: {
            KeyFilePath = input.ReadString();
            break;
          }
          case 42: {
            CertPasswd = input.ReadString();
            break;
          }
          case 48: {
            ConnectTime = input.ReadInt32();
            break;
          }
          case 56: {
            ReceiveTime = input.ReadInt32();
            break;
          }
          case 66: {
            LogPath = input.ReadString();
            break;
          }
          case 72: {
            logLevel_ = (global::Protocol.LogLevel) input.ReadEnum();
            break;
          }
          case 80: {
            DebugMode = input.ReadBool();
            break;
          }
          case 88: {
            MQThreadQuantity = input.ReadInt32();
            break;
          }
          case 96: {
            EPollThreadQuantity = input.ReadInt32();
            break;
          }
          case 104: {
            ProcessThreadQuantity = input.ReadInt32();
            break;
          }
          case 112: {
            PrioritySize = input.ReadInt32();
            break;
          }
          case 130: {
            ModuleName = input.ReadString();
            break;
          }
          case 138: {
            ModulePath = input.ReadString();
            break;
          }
          case 146: {
            ModuleConfig = input.ReadBytes();
            break;
          }
          case 154: {
            ModuleReference = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
